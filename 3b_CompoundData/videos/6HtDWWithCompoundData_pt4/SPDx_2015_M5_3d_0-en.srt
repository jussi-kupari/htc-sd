0
00:00:00,000 --> 00:00:00,714


1
00:00:00,714 --> 00:00:02,630
GREGOR KICZALES: What I've done now is to jump

2
00:00:02,630 --> 00:00:06,780
to the v.3 version of the Cowabunga solution.

3
00:00:06,780 --> 00:00:11,770
That has the next cow solution, which we just developed a few minutes ago.

4
00:00:11,770 --> 00:00:13,920
And I've actually done a bit more than that.

5
00:00:13,920 --> 00:00:18,340
I've started doing the design for the render-cow function.

6
00:00:18,340 --> 00:00:23,440
Just to save time, I did the first part of the design already.

7
00:00:23,440 --> 00:00:29,710
So I've got the signature, the purpose, the stub, and I did the examples.

8
00:00:29,710 --> 00:00:33,610
And the examples for this function are actually relatively straightforward.

9
00:00:33,610 --> 00:00:39,400
If I render a cow that's at position 99 and has a positive velocity--

10
00:00:39,400 --> 00:00:44,762
In other words, it's facing towards the right edge of the screen--

11
00:00:44,762 --> 00:00:46,720
then what this function needs to do is to place

12
00:00:46,720 --> 00:00:51,220
an image of the right facing cow at exposition 99,

13
00:00:51,220 --> 00:00:56,030
at y position center y onto the background MTS.

14
00:00:56,030 --> 00:00:58,760
And I need two tests for this function, because sometimes it

15
00:00:58,760 --> 00:01:03,100
places a cow facing right, and sometimes it places a cow facing left.

16
00:01:03,100 --> 00:01:06,810
And so I've got a second task here where the cow

17
00:01:06,810 --> 00:01:09,350
is going in a different direction.

18
00:01:09,350 --> 00:01:11,230
And to be honest, this test would actually

19
00:01:11,230 --> 00:01:14,770
be a little bit better if I changed the x-coordinate just

20
00:01:14,770 --> 00:01:19,630
to be sure that I couldn't accidentally have put in by accident 99

21
00:01:19,630 --> 00:01:21,110
into the actual solution.

22
00:01:21,110 --> 00:01:25,790
So let's just make this be 33, and we'll make that be 33,

23
00:01:25,790 --> 00:01:28,440
and now those are two pretty good examples.

24
00:01:28,440 --> 00:01:32,145
They vary both the direction that the cow is facing, and the x-coordinate.

25
00:01:32,145 --> 00:01:35,275


26
00:01:35,275 --> 00:01:36,650
So I've already got the template.

27
00:01:36,650 --> 00:01:38,040
Let's just start filling this in.

28
00:01:38,040 --> 00:01:41,140
Let's see, both examples tell me that I'm going to place an image.

29
00:01:41,140 --> 00:01:45,240


30
00:01:45,240 --> 00:01:48,890
And sometimes it's one image, and sometimes it's another image.

31
00:01:48,890 --> 00:01:52,090
Let me just put dots there for a second.

32
00:01:52,090 --> 00:01:57,230
And I always place the image at the cow's x-coordinate.

33
00:01:57,230 --> 00:02:01,750
And I always place the image at center y,

34
00:02:01,750 --> 00:02:04,055
and I always the image on the background.

35
00:02:04,055 --> 00:02:07,426


36
00:02:07,426 --> 00:02:09,759
That's all of it, except for this part here where I have

37
00:02:09,759 --> 00:02:13,320
to decide exactly which image to place.

38
00:02:13,320 --> 00:02:14,570
Now, there's two choices here.

39
00:02:14,570 --> 00:02:18,350
One choice is I could start to put an if expression here

40
00:02:18,350 --> 00:02:22,680
that would choose which cow image to use.

41
00:02:22,680 --> 00:02:25,360
But I'm going to do something slightly different.

42
00:02:25,360 --> 00:02:28,110
And it's going to be something that we talk a lot about the course

43
00:02:28,110 --> 00:02:29,089
as we go forward.

44
00:02:29,089 --> 00:02:31,630
Which is, I'm going to say to myself, you know, this function

45
00:02:31,630 --> 00:02:34,180
is actually doing two things.

46
00:02:34,180 --> 00:02:38,620
This function is deciding which image to use,

47
00:02:38,620 --> 00:02:41,680
and putting it in the proper place.

48
00:02:41,680 --> 00:02:43,420
Two tasks.

49
00:02:43,420 --> 00:02:46,570
And as a general rule, we don't want functions that do two tasks.

50
00:02:46,570 --> 00:02:50,080
We want each function to do one task.

51
00:02:50,080 --> 00:02:55,660
So what I'm going to do is I'm going to wish for a helper.

52
00:02:55,660 --> 00:02:58,430
I'm going to say, you know, it really would be great here

53
00:02:58,430 --> 00:03:01,820
if there was a function called Choose image,

54
00:03:01,820 --> 00:03:04,480
and I could call that function with a cow,

55
00:03:04,480 --> 00:03:07,660
and it would give me back the right image to use.

56
00:03:07,660 --> 00:03:11,560
If I had that, then I would be done.

57
00:03:11,560 --> 00:03:14,450
And so I'm just going to wish for that to exist.

58
00:03:14,450 --> 00:03:18,640
And I have to wish in a little bit more detail.

59
00:03:18,640 --> 00:03:21,880
I'll wish in a little bit more detail by writing the wish list entry for it.

60
00:03:21,880 --> 00:03:28,930
So I'll say cow to image produce-- now, what does it need to do?

61
00:03:28,930 --> 00:03:34,180
Well, it needs to choose the right cow, produce R cow or L cow,

62
00:03:34,180 --> 00:03:37,910
depending on direction cow is going.

63
00:03:37,910 --> 00:03:41,710


64
00:03:41,710 --> 00:03:45,090
And the reason I write this signature on purpose right now,

65
00:03:45,090 --> 00:03:49,260
and I write it in detail right now, is that right now after I've just

66
00:03:49,260 --> 00:03:52,640
finished wishing for this function, I know what I want it to do.

67
00:03:52,640 --> 00:03:56,070
So I'm going to take the trouble to write down what I want it to do.

68
00:03:56,070 --> 00:03:58,510
And then I'm going to say oh, but this doesn't exist yet,

69
00:03:58,510 --> 00:04:00,205
I hope it will someday.

70
00:04:00,205 --> 00:04:01,555
And I'll make a stub.

71
00:04:01,555 --> 00:04:05,100


72
00:04:05,100 --> 00:04:11,040
Choose image, consumes a cow-- and it's got to produce some image.

73
00:04:11,040 --> 00:04:13,180
I could make it produce the blank image.

74
00:04:13,180 --> 00:04:17,010
In this case, I'll just make the stub produce the right cow.

75
00:04:17,010 --> 00:04:21,040
And now I run this to see if it's well formed.

76
00:04:21,040 --> 00:04:22,029
And it is well formed.

77
00:04:22,029 --> 00:04:23,900
And what we're going to see, paradoxically,

78
00:04:23,900 --> 00:04:28,540
is that one of these two render-cow tests actually passed.

79
00:04:28,540 --> 00:04:32,380
The first one actually passed, just because the Choose image stub always

80
00:04:32,380 --> 00:04:36,240
produces the right facing cow.

81
00:04:36,240 --> 00:04:42,900
So now I've basically done render-cow, if somebody goes and fulfills

82
00:04:42,900 --> 00:04:46,527
this wish that I made for Choose image.

83
00:04:46,527 --> 00:04:48,360
And that somebody is going to be me a little

84
00:04:48,360 --> 00:04:53,070
bit later when I say to myself, hey, what work remains to be done?

85
00:04:53,070 --> 00:04:58,650
Let me search for bang, bang, bang-- oh, I need this function, Choose image.

86
00:04:58,650 --> 00:04:59,340
OK, great.

87
00:04:59,340 --> 00:05:00,850
Let me do it.

88
00:05:00,850 --> 00:05:02,210
Let's see, what does it do?

89
00:05:02,210 --> 00:05:04,210
It consumes a cow, it produces an image.

90
00:05:04,210 --> 00:05:07,640
It produces either the right cow or the left cow, depending on the direction

91
00:05:07,640 --> 00:05:08,590
the cow is going.

92
00:05:08,590 --> 00:05:11,420


93
00:05:11,420 --> 00:05:14,560
So I'm going to speed this up a bit.

94
00:05:14,560 --> 00:05:18,760
I've got two examples, one example for when the cow is moving left to right,

95
00:05:18,760 --> 00:05:21,610
so it's facing towards the right.

96
00:05:21,610 --> 00:05:24,210
Another example for when the cow is moving the other way,

97
00:05:24,210 --> 00:05:27,950
so I need the left cow image.

98
00:05:27,950 --> 00:05:30,790
I'm going to go and get the template from cow.

99
00:05:30,790 --> 00:05:40,739


100
00:05:40,739 --> 00:05:41,530
And now, let's see.

101
00:05:41,530 --> 00:05:44,740
There's two cases, so I'll use an if.

102
00:05:44,740 --> 00:05:48,785
And the question is whether the dx of the cow is greater than 0.

103
00:05:48,785 --> 00:05:54,089
If it is, I use the right facing cow, otherwise I use the left facing cow.

104
00:05:54,089 --> 00:05:56,380
And there's a bit of an issue here I have to deal with,

105
00:05:56,380 --> 00:05:59,889
which is what to do if cow dx is actually 0.

106
00:05:59,889 --> 00:06:02,180
And in that case, I'm just going to go ahead and decide

107
00:06:02,180 --> 00:06:03,595
to use the left facing cow.

108
00:06:03,595 --> 00:06:07,400


109
00:06:07,400 --> 00:06:10,820
And when I run it, I get that all my tests pass,

110
00:06:10,820 --> 00:06:13,810
and that includes the three tests for Choose image,

111
00:06:13,810 --> 00:06:16,970
but it also includes the two tests for render-cow,

112
00:06:16,970 --> 00:06:19,620
because Choose image is a helper for render-cow.

113
00:06:19,620 --> 00:06:22,680
So now render-cow is working completely, because choose-image

114
00:06:22,680 --> 00:06:25,690
is working completely.

115
00:06:25,690 --> 00:06:28,870
Let me just recap what happened there.

116
00:06:28,870 --> 00:06:33,060
We were in the middle of coding the function render-cow.

117
00:06:33,060 --> 00:06:34,990
And we knew we had to place an image, and we

118
00:06:34,990 --> 00:06:36,880
knew where it was going to place the image,

119
00:06:36,880 --> 00:06:41,100
and we knew it had to decide what image it was going to place.

120
00:06:41,100 --> 00:06:43,840
And that's when this idea about each function

121
00:06:43,840 --> 00:06:47,350
should only do one task came up.

122
00:06:47,350 --> 00:06:51,010
What I did was I decided, you know, deciding where to put the image,

123
00:06:51,010 --> 00:06:54,590
and deciding what the image is, is two tasks.

124
00:06:54,590 --> 00:06:58,310
I'm going to delegate one of the tasks to a new helper function,

125
00:06:58,310 --> 00:07:00,960
Choose image in this case.

126
00:07:00,960 --> 00:07:03,710
We're going to talk a lot more about this idea of helper functions

127
00:07:03,710 --> 00:07:05,095
as we go along.

128
00:07:05,095 --> 00:07:08,120
And In some cases, we're going to give you very clear cut

129
00:07:08,120 --> 00:07:11,770
and dried rules for when to use helper functions.

130
00:07:11,770 --> 00:07:15,290
This is not one of those cut and dried cases.

131
00:07:15,290 --> 00:07:19,260
In this case, you have to kind of decide that Choose image is

132
00:07:19,260 --> 00:07:21,770
its own separate task.

133
00:07:21,770 --> 00:07:26,150
And some programmers wouldn't make a separate function for Choose image,

134
00:07:26,150 --> 00:07:29,720
because it's so small.

135
00:07:29,720 --> 00:07:32,410
But this is a reasonable place to use a helper function,

136
00:07:32,410 --> 00:07:36,110
because it really is a separate task here.

137
00:07:36,110 --> 00:07:38,140
And as we work through this part of the course,

138
00:07:38,140 --> 00:07:41,710
we want you to look out for places where there is a separate task

139
00:07:41,710 --> 00:07:45,880
and it makes sense to use a separate function.

140
00:07:45,880 --> 00:07:48,510
What is clear that when I go back to read this function,

141
00:07:48,510 --> 00:07:52,880
and I go to read render-cow, it says, OK, let's see.

142
00:07:52,880 --> 00:07:55,029
I'm going to place an image, and somebody else

143
00:07:55,029 --> 00:07:56,820
is going to choose the image, and I'm going

144
00:07:56,820 --> 00:08:01,191
to put it at the cow's x-coordinate, center y and MTS.

145
00:08:01,191 --> 00:08:02,190
That's very clear to me.

146
00:08:02,190 --> 00:08:06,881
It says, I'm placing the image and somebody else is choosing the image.

147
00:08:06,881 --> 00:08:09,130
And now when I go down here and read choose the image,

148
00:08:09,130 --> 00:08:13,150
it says, well, if the dx is greater than 0, it's right facing.

149
00:08:13,150 --> 00:08:15,170
Otherwise, it's left facing.

150
00:08:15,170 --> 00:08:19,060
This code is easy to read.

151
00:08:19,060 --> 00:08:23,860
And at this point, I have all of my handlers done except for handle-key.

152
00:08:23,860 --> 00:08:26,710
So I actually can run this program at this point.

153
00:08:26,710 --> 00:08:32,880
I could say, Main, make-cow, the cow that starts at the left edge

154
00:08:32,880 --> 00:08:38,940
and is moving three pixels per tick, and there is our little cow.

155
00:08:38,940 --> 00:08:43,120


156
00:08:43,120 --> 00:08:46,340
I'll leave it to you to finish the key handler.

157
00:08:46,340 --> 00:08:48,640
As I said, the solution is there in Cowabunga v.5.

158
00:08:48,640 --> 00:08:52,585


159
00:08:52,585 --> 00:08:55,210
And the problem description also talks about a fun little thing

160
00:08:55,210 --> 00:09:01,160
you can do where if you take the cow image and take each image and rotate it

161
00:09:01,160 --> 00:09:04,490
a couple degrees left and a couple degrees right,

162
00:09:04,490 --> 00:09:09,260
and then you take a speed that's for example an odd number,

163
00:09:09,260 --> 00:09:12,440
and you arrange to use different cow images depending

164
00:09:12,440 --> 00:09:15,120
on whether the position is and odd or an even number,

165
00:09:15,120 --> 00:09:18,410
you can make the cow appear to waddle as it crosses the screen,

166
00:09:18,410 --> 00:09:19,720
and that looks kind of neat.

167
00:09:19,720 --> 00:09:22,730
And there's all sorts of other fun stuff you can do here.

168
00:09:22,730 --> 00:09:24,980
Just go ahead and have some fun with this cow program.

169
00:09:24,980 --> 00:09:29,016
That will be good practice for doing this week's homework assignment.

170
00:09:29,016 --> 00:09:29,515



0
00:00:00,000 --> 00:00:01,530


1
00:00:01,530 --> 00:00:03,850
GREGOR KICZALES: So here I'm in Cowabunga v.2,

2
00:00:03,850 --> 00:00:06,640
and it's got the data definition we did before.

3
00:00:06,640 --> 00:00:09,880
And it's got a main function that calls big-bang with the three

4
00:00:09,880 --> 00:00:13,810
handlers on tick two drawn on key.

5
00:00:13,810 --> 00:00:19,140
And I've given those functions the names next-cow, render-cow, and handle-key.

6
00:00:19,140 --> 00:00:22,090
And here's the wish list entries.

7
00:00:22,090 --> 00:00:24,010
The signatures are formulaic, of course.

8
00:00:24,010 --> 00:00:26,270
Once we know that the changing world state is

9
00:00:26,270 --> 00:00:31,330
represented by a type called cow, all these signatures come automatically.

10
00:00:31,330 --> 00:00:35,560
But I did spend some time thinking about the purposes that I put in here.

11
00:00:35,560 --> 00:00:39,650
So I said for next-cow that it increases the cow-x by dx,

12
00:00:39,650 --> 00:00:42,350
and it bounces off the edges, just to remind me

13
00:00:42,350 --> 00:00:46,190
that when the cow gets to the edge it has to turn around.

14
00:00:46,190 --> 00:00:50,030
In this one I said, place the appropriate cow image on MTS

15
00:00:50,030 --> 00:00:53,600
at its current position and center y.

16
00:00:53,600 --> 00:00:56,130
And appropriate here is reminding me that sometimes I

17
00:00:56,130 --> 00:00:58,310
use the cow that faces right, and sometimes I

18
00:00:58,310 --> 00:01:01,830
use the count it faces left.

19
00:01:01,830 --> 00:01:05,319
And for handle-key, I put reverse the direction of cow travel

20
00:01:05,319 --> 00:01:07,720
when the space bar is pressed.

21
00:01:07,720 --> 00:01:09,640
At this point we're set up to go, out and all

22
00:01:09,640 --> 00:01:14,300
has to happen is to complete the design of these three functions.

23
00:01:14,300 --> 00:01:16,050
There are a couple interesting things that

24
00:01:16,050 --> 00:01:18,620
happen in the design of these functions, though.

25
00:01:18,620 --> 00:01:22,610
So I'm going to go ahead and work through next-cow and render-cow in more

26
00:01:22,610 --> 00:01:26,440
detail so that you could see how that plays out.

27
00:01:26,440 --> 00:01:29,110
So now I need to work on wish list until it's done.

28
00:01:29,110 --> 00:01:33,890
And the first wish list entry is for next-cow, so let me start with that.

29
00:01:33,890 --> 00:01:35,970
I've already got the signature purpose and stub.

30
00:01:35,970 --> 00:01:38,840
I need to work on the examples.

31
00:01:38,840 --> 00:01:44,310
So let's see, examples are going to look something like this, next.

32
00:01:44,310 --> 00:01:48,020
Cow, they're always going to consume some sort of cow,

33
00:01:48,020 --> 00:01:51,880
and they're always going to produce some sort of cow.

34
00:01:51,880 --> 00:01:56,870
So that's kind of the skeleton of an example.

35
00:01:56,870 --> 00:02:00,060
Let's try to fill them in some.

36
00:02:00,060 --> 00:02:03,644
Let's see, a simple case is that the cow is somewhere

37
00:02:03,644 --> 00:02:04,810
in the middle of the screen.

38
00:02:04,810 --> 00:02:08,300
Let's just assume that 20 is less than the full width.

39
00:02:08,300 --> 00:02:11,660
And it's moving at a velocity of 3, which

40
00:02:11,660 --> 00:02:16,790
means it's moving three pixels to the right each time.

41
00:02:16,790 --> 00:02:19,370
And that means that on the next tick that cow

42
00:02:19,370 --> 00:02:28,610
should be at 20 plus 3, and still moving at the same velocity.

43
00:02:28,610 --> 00:02:30,860
So that's a cow in the middle, moving left to right.

44
00:02:30,860 --> 00:02:37,370
Let's do a cow in the middle that's moving right to left.

45
00:02:37,370 --> 00:02:42,250
Let's see, that cow would just be at minus 20 and 3,

46
00:02:42,250 --> 00:02:46,420
and still moving right to left.

47
00:02:46,420 --> 00:02:49,350
See, that's those two cases.

48
00:02:49,350 --> 00:02:51,690
These are middle cases.

49
00:02:51,690 --> 00:02:54,820
I said in the analysis that we'd let the cow go all the way to the edge

50
00:02:54,820 --> 00:02:57,430
of the box, without changing direction.

51
00:02:57,430 --> 00:02:58,990
So let's do that case next.

52
00:02:58,990 --> 00:03:04,020
Let me make some more copies of this, before I edit it.

53
00:03:04,020 --> 00:03:07,850
So let's see, we might have a cow moving from left to right

54
00:03:07,850 --> 00:03:10,800
that's just about to get all the way to the edge of the box.

55
00:03:10,800 --> 00:03:14,790
So that might be a cow, for example, that's at width minus 3

56
00:03:14,790 --> 00:03:21,180
and moving three pixels to the right per tick.

57
00:03:21,180 --> 00:03:25,960
So that cow, after this tick, will be all the way to width,

58
00:03:25,960 --> 00:03:29,618
and still think it's moving towards the right.

59
00:03:29,618 --> 00:03:31,826
It hasn't balanced yet, because we said we were going

60
00:03:31,826 --> 00:03:34,801
to let it get all the way to the edge.

61
00:03:34,801 --> 00:03:36,744
It'll bounce the next time.

62
00:03:36,744 --> 00:03:39,410


63
00:03:39,410 --> 00:03:46,190
And another cow might be, let's see, it might be at 3,

64
00:03:46,190 --> 00:03:48,155
moving with SPEED minus 3.

65
00:03:48,155 --> 00:03:50,770


66
00:03:50,770 --> 00:03:54,580
And that means that when this tick is done, it'll be all the way at 0

67
00:03:54,580 --> 00:04:00,346
and still think it's going to head towards the left, even though it's not.

68
00:04:00,346 --> 00:04:03,690
It'll bounce on the next tick.

69
00:04:03,690 --> 00:04:09,490
So these are somewhere-- how would we describe these cases?

70
00:04:09,490 --> 00:04:15,451
These are cases where the cow reaches the very edge.

71
00:04:15,451 --> 00:04:18,200
And now it seems like there's going to be two more cases for where

72
00:04:18,200 --> 00:04:20,019
the cow would actually pass the edge.

73
00:04:20,019 --> 00:04:22,700


74
00:04:22,700 --> 00:04:28,960
Let's see, there's a case where the cow might be at, let's say, width minus 2,

75
00:04:28,960 --> 00:04:33,916
moving 3 to the right each time.

76
00:04:33,916 --> 00:04:35,665
And what are we going to do with that cow?

77
00:04:35,665 --> 00:04:38,330


78
00:04:38,330 --> 00:04:42,750
Well, let's put it all the way at the edge,

79
00:04:42,750 --> 00:04:45,520
but now headed back towards the center.

80
00:04:45,520 --> 00:04:47,760
It needs to change its direction now.

81
00:04:47,760 --> 00:04:50,756
So we'll change it direction to that.

82
00:04:50,756 --> 00:04:53,320
We'll basically make it reverse its direction,

83
00:04:53,320 --> 00:04:56,550
because it actually tried to leave the box,

84
00:04:56,550 --> 00:04:59,060
and now it's going to be at the edge but it's

85
00:04:59,060 --> 00:05:03,552
going to be heading towards the center of the box again.

86
00:05:03,552 --> 00:05:05,260
And the corresponding case, of course, is

87
00:05:05,260 --> 00:05:12,770
that there's a cow at 2 that's headed towards the left.

88
00:05:12,770 --> 00:05:15,440
And we'll say, no, no, no, you can't leave the box.

89
00:05:15,440 --> 00:05:21,680
You stay at the edge of the box, and now you're heading the other way.

90
00:05:21,680 --> 00:05:27,020
So these are cows that these two cows, they try these cases,

91
00:05:27,020 --> 00:05:31,505
try to pass the edge.

92
00:05:31,505 --> 00:05:34,210


93
00:05:34,210 --> 00:05:36,459
Let's see, are all of those well formed?

94
00:05:36,459 --> 00:05:37,500
They are all well formed.

95
00:05:37,500 --> 00:05:40,917


96
00:05:40,917 --> 00:05:43,510
Now, you can see the case is a little bit complicated.

97
00:05:43,510 --> 00:05:46,210
That's a feature of this design method, which

98
00:05:46,210 --> 00:05:49,050
is that I'm working out all these complex boundary

99
00:05:49,050 --> 00:05:53,740
cases before I actually get to coding the general purpose function.

100
00:05:53,740 --> 00:05:58,420
I've got some concrete examples to help me understand the function,

101
00:05:58,420 --> 00:06:02,470
and I've got tests for when I get the function going.

102
00:06:02,470 --> 00:06:03,272
So now let's see.

103
00:06:03,272 --> 00:06:04,355
Let's go get the template.

104
00:06:04,355 --> 00:06:06,990


105
00:06:06,990 --> 00:06:08,760
There's the template for a cow.

106
00:06:08,760 --> 00:06:13,400


107
00:06:13,400 --> 00:06:23,040
And I've got these notes here in the template.

108
00:06:23,040 --> 00:06:29,710
I'll make a note to myself that says, I took template from cow.

109
00:06:29,710 --> 00:06:34,920
I'll rename this function to next-cow, and I've

110
00:06:34,920 --> 00:06:38,125
got a note for myself that says that the template has the two fields,

111
00:06:38,125 --> 00:06:40,150
and it also tells me the types of the fields,

112
00:06:40,150 --> 00:06:41,820
to remind me what's going on there.

113
00:06:41,820 --> 00:06:44,599


114
00:06:44,599 --> 00:06:46,640
Now, let's think about the examples for a second.

115
00:06:46,640 --> 00:06:50,330
What do the examples tell us, in terms of how many cases of cow behavior

116
00:06:50,330 --> 00:06:52,340
there are?

117
00:06:52,340 --> 00:06:56,020
In all four of these cases, the cow really

118
00:06:56,020 --> 00:06:57,660
keeps doing whatever it was doing.

119
00:06:57,660 --> 00:07:01,590
Here it goes from 20 to 23, and its direction doesn't change.

120
00:07:01,590 --> 00:07:05,610
Here it goes from 20 to 17, and its direction doesn't change.

121
00:07:05,610 --> 00:07:10,380
Here it goes from width minus 3 to width, its direction doesn't change.

122
00:07:10,380 --> 00:07:15,370
Here it goes from 3 to 0, but its direction doesn't change.

123
00:07:15,370 --> 00:07:17,670
These four are all really the same case.

124
00:07:17,670 --> 00:07:22,240
They're just the keep doing what you're doing case.

125
00:07:22,240 --> 00:07:24,200
But these two are different.

126
00:07:24,200 --> 00:07:29,060
This is the case where the cow tries to leave the right hand edge of the box,

127
00:07:29,060 --> 00:07:32,485
and this is the case where the cow tries to leave the left hand edge of the box.

128
00:07:32,485 --> 00:07:35,570


129
00:07:35,570 --> 00:07:38,160
So my next step in building the template for this function

130
00:07:38,160 --> 00:07:41,870
is I'm going to give myself a three case cond.

131
00:07:41,870 --> 00:07:46,460
I'm going to say cond, on and then each case,

132
00:07:46,460 --> 00:07:52,150
now that I know what these types are, I'll just delete this note.

133
00:07:52,150 --> 00:07:55,400
And then in each case I'll give myself two copies

134
00:07:55,400 --> 00:07:58,150
of the template to work with, the question version and the answer

135
00:07:58,150 --> 00:07:58,650
version.

136
00:07:58,650 --> 00:08:02,980


137
00:08:02,980 --> 00:08:04,470
And I'll have three of these.

138
00:08:04,470 --> 00:08:08,020


139
00:08:08,020 --> 00:08:11,510
So now let me see, how do I think about these cases?

140
00:08:11,510 --> 00:08:15,600
Well, this case here is the case where if the cow kept going,

141
00:08:15,600 --> 00:08:18,450
it would leave the box by the right edge.

142
00:08:18,450 --> 00:08:20,827
It would go too far.

143
00:08:20,827 --> 00:08:22,660
So what does that mean, it would go too far?

144
00:08:22,660 --> 00:08:27,060
Well, it means that if I took the cow's current exposition

145
00:08:27,060 --> 00:08:32,409
and I added the dx to it, this expression here

146
00:08:32,409 --> 00:08:38,230
is what the cow's position would be if it just kept going.

147
00:08:38,230 --> 00:08:43,549
And in this case, what happens is that if the cow just kept going,

148
00:08:43,549 --> 00:08:49,260
then its position would end up being greater than width.

149
00:08:49,260 --> 00:08:52,430
The cow would leave the right edge of the box.

150
00:08:52,430 --> 00:08:54,430
And of course, we don't want the cow to do that.

151
00:08:54,430 --> 00:08:59,050
We want the cow to be a nice, docile creature that stays inside the box.

152
00:08:59,050 --> 00:09:01,800
And so instead of letting it leave the box,

153
00:09:01,800 --> 00:09:04,550
we're going to say, no, no, no, no, no.

154
00:09:04,550 --> 00:09:08,380
You're going to be a new cow that is going

155
00:09:08,380 --> 00:09:14,590
to be right at the edge of the box, and your new velocity

156
00:09:14,590 --> 00:09:19,100
will basically be the opposite of your current velocity.

157
00:09:19,100 --> 00:09:23,600
And in racket, if you call the minus primitive with a single argument,

158
00:09:23,600 --> 00:09:25,910
it just changes the sign of the number.

159
00:09:25,910 --> 00:09:29,510
So if you called minus with 3, it gives you minus 3.

160
00:09:29,510 --> 00:09:34,140
If you call minus with minus 6, it gives you 6.

161
00:09:34,140 --> 00:09:36,900
So this changes the direction of the cow,

162
00:09:36,900 --> 00:09:40,700
and this puts it right at the edge of the box.

163
00:09:40,700 --> 00:09:44,990
So that's this case here.

164
00:09:44,990 --> 00:09:47,180
Now, let's look at this case here.

165
00:09:47,180 --> 00:09:49,600
Well, this is a case where if you let the cow just

166
00:09:49,600 --> 00:09:55,660
keep going-- this is the cow that just keeps going-- then

167
00:09:55,660 --> 00:09:57,980
it would end up outside the left edge of the box.

168
00:09:57,980 --> 00:10:00,200
It's position would end up less than 0.

169
00:10:00,200 --> 00:10:02,980
And of course, we don't want the cow to do that.

170
00:10:02,980 --> 00:10:05,410
We want it to stay in the box.

171
00:10:05,410 --> 00:10:07,750
So we're going to say no.

172
00:10:07,750 --> 00:10:12,620
Instead, we're going to have a cow that's

173
00:10:12,620 --> 00:10:14,335
at the very left edge of the box.

174
00:10:14,335 --> 00:10:16,985


175
00:10:16,985 --> 00:10:21,339
And once again, we're just going to flip its direction around.

176
00:10:21,339 --> 00:10:27,090


177
00:10:27,090 --> 00:10:30,330
So that's this case.

178
00:10:30,330 --> 00:10:32,700
And now all these other cases are just the cow

179
00:10:32,700 --> 00:10:34,270
keeps doing whatever it was doing.

180
00:10:34,270 --> 00:10:36,645
So we don't need a question here, we'll just put an else.

181
00:10:36,645 --> 00:10:39,320


182
00:10:39,320 --> 00:10:43,130
And we'll say, well, the new cow is a cow that

183
00:10:43,130 --> 00:10:47,170
keeps doing whatever it was doing-- that's plus cow of x, and cow of dx.

184
00:10:47,170 --> 00:10:50,680


185
00:10:50,680 --> 00:10:54,620
This is the same expression we used here and here,

186
00:10:54,620 --> 00:10:58,150
to see where will the cow end up if we just let it keep going?

187
00:10:58,150 --> 00:11:01,070
Well, this cow is going to just keep going.

188
00:11:01,070 --> 00:11:04,647
And its new dx is just going to be the same, as is old dx,

189
00:11:04,647 --> 00:11:06,230
because it's just going to keep going.

190
00:11:06,230 --> 00:11:10,010


191
00:11:10,010 --> 00:11:12,090
Let's try all our tests now.

192
00:11:12,090 --> 00:11:13,519
Oops, this make is wrong.

193
00:11:13,519 --> 00:11:14,560
This is just to make-cow.

194
00:11:14,560 --> 00:11:20,030


195
00:11:20,030 --> 00:11:21,005
All six tests pass.

196
00:11:21,005 --> 00:11:23,870


197
00:11:23,870 --> 00:11:29,660
Now look, this in some sense is the most complicated function

198
00:11:29,660 --> 00:11:31,680
we've designed so far.

199
00:11:31,680 --> 00:11:35,010
Now, it's complicated entirely due to domain knowledge.

200
00:11:35,010 --> 00:11:38,510
It's complicated, because the geometry of an object moving

201
00:11:38,510 --> 00:11:43,530
back and forth across a box and handling the edge conditions right

202
00:11:43,530 --> 00:11:46,160
is a bit complicated.

203
00:11:46,160 --> 00:11:48,230
But notice something important.

204
00:11:48,230 --> 00:11:52,290
If you break it down into all of these six examples,

205
00:11:52,290 --> 00:11:57,440
and then you realize those that six examples are really just three cases,

206
00:11:57,440 --> 00:11:59,440
then it isn't complicated.

207
00:11:59,440 --> 00:12:01,850
The design method really worked for us here.

208
00:12:01,850 --> 00:12:04,370
It told us to do the examples first, which

209
00:12:04,370 --> 00:12:09,220
broke the problem down, and helped us then take the template

210
00:12:09,220 --> 00:12:12,730
and put structure onto it.

211
00:12:12,730 --> 00:12:17,350
Here's an example of the design method making a moderately difficult problem

212
00:12:17,350 --> 00:12:19,280
a lot easier.


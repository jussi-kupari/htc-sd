0
00:00:00,000 --> 00:00:04,540


1
00:00:04,540 --> 00:00:08,300
GREGOR KICZALES: Now I'm going to make another change to the cat program.

2
00:00:08,300 --> 00:00:10,870
We're going to change it so that when we press the Space key,

3
00:00:10,870 --> 00:00:14,730
the cat resets back to the edge of the box.

4
00:00:14,730 --> 00:00:19,170
So this will be more practice with using to how to design worlds recipe and more

5
00:00:19,170 --> 00:00:23,270
practice with using a well structured design to work

6
00:00:23,270 --> 00:00:27,230
through making a change to that design.

7
00:00:27,230 --> 00:00:29,960
Another technical point we'll see in this recipe

8
00:00:29,960 --> 00:00:33,990
is how to use the on-key option to big-bang

9
00:00:33,990 --> 00:00:36,140
and how to template a function that operates

10
00:00:36,140 --> 00:00:38,150
on what's called a large enumeration.

11
00:00:38,150 --> 00:00:41,520
And that'll be something that'll be useful for on-key options,

12
00:00:41,520 --> 00:00:45,070
as well as on-mouse options that you'll see later.

13
00:00:45,070 --> 00:00:50,140
What we're starting with here is the cat program from the last video.

14
00:00:50,140 --> 00:00:52,150
And what we got from the end of that video

15
00:00:52,150 --> 00:00:55,990
is we changed the cat program so the cat walks across the screen more

16
00:00:55,990 --> 00:00:57,530
quickly, which is nice.

17
00:00:57,530 --> 00:01:00,040


18
00:01:00,040 --> 00:01:04,569
What I want to do now is go back to one of the original goals in the problem

19
00:01:04,569 --> 00:01:08,880
statement, which is for this program to have the functionality that if I press

20
00:01:08,880 --> 00:01:12,410
the Space bar, the cat jumps back to the beginning of the screen

21
00:01:12,410 --> 00:01:13,390
and starts walking.

22
00:01:13,390 --> 00:01:16,500
So you're kind of picking the kitten up, putting the kitten back

23
00:01:16,500 --> 00:01:18,870
at the left edge of the screen.

24
00:01:18,870 --> 00:01:21,460
Now this is going to end up being a fairly simple change.

25
00:01:21,460 --> 00:01:23,520
But we've got this domain analysis.

26
00:01:23,520 --> 00:01:27,450
And it's a good idea to keep the domain analysis in sync with the program.

27
00:01:27,450 --> 00:01:30,470
So the first thing I'm going to do is grab the domain analysis

28
00:01:30,470 --> 00:01:32,770
and make the required change there.

29
00:01:32,770 --> 00:01:35,480
In this case, there's no constants that change.

30
00:01:35,480 --> 00:01:37,950
And there's no changing information the changes.

31
00:01:37,950 --> 00:01:41,990
All that changes is we're going to add one more big bang option,

32
00:01:41,990 --> 00:01:44,690
which is the on-key option.

33
00:01:44,690 --> 00:01:49,160
And that allows us to give special behavior to our world program

34
00:01:49,160 --> 00:01:51,130
when a key on the keyboard is pressed.

35
00:01:51,130 --> 00:01:53,170
So I'm going to add on-key here.

36
00:01:53,170 --> 00:01:55,820
And I'm going to jump over to the code.

37
00:01:55,820 --> 00:01:59,450
Nothing changed in the constants, so nothing changes here.

38
00:01:59,450 --> 00:02:03,670
Nothing changed in the changing world information, so nothing changes here.

39
00:02:03,670 --> 00:02:07,630
But we are going to use one more big-bang option.

40
00:02:07,630 --> 00:02:11,620
And what I'm going to do is I'm going to go to the HTDW page,

41
00:02:11,620 --> 00:02:14,630
go to the How To Design Worlds page.

42
00:02:14,630 --> 00:02:18,830
And I'm going to scroll down to get the template for world programs.

43
00:02:18,830 --> 00:02:23,260
And I'm just going to look at the template for the on-key option.

44
00:02:23,260 --> 00:02:25,010
Here it is here.

45
00:02:25,010 --> 00:02:33,950
And I'll just copy this from here right over into my main function here,

46
00:02:33,950 --> 00:02:34,670
paste it there.

47
00:02:34,670 --> 00:02:36,580
Now I've got some parentheses problems here.

48
00:02:36,580 --> 00:02:39,130
Let me see-- I'll get rid of both of those.

49
00:02:39,130 --> 00:02:42,400


50
00:02:42,400 --> 00:02:47,810
And WS in this program is called Cat.

51
00:02:47,810 --> 00:02:51,580
And that's a WS.

52
00:02:51,580 --> 00:02:56,730
And I'll decide right now that I'm going to call this function handle-key.

53
00:02:56,730 --> 00:03:00,330


54
00:03:00,330 --> 00:03:04,430
So now that I've added that there, I wished for this handle-key function.

55
00:03:04,430 --> 00:03:08,050
So what I'm going to do is I'm going to grab the signature of it

56
00:03:08,050 --> 00:03:11,370
and go make a wish list entry.

57
00:03:11,370 --> 00:03:12,010
Here it is.

58
00:03:12,010 --> 00:03:23,620
Let's see, it's Cat KeyEvent to Cat, reset cat to left edge

59
00:03:23,620 --> 00:03:27,490
when space key is pressed.

60
00:03:27,490 --> 00:03:32,597
And I'll make a stub-- handle-key.

61
00:03:32,597 --> 00:03:34,180
And this function takes two arguments.

62
00:03:34,180 --> 00:03:35,720
I'm going to talk about that a bit more in a minute.

63
00:03:35,720 --> 00:03:36,844
But it takes two arguments.

64
00:03:36,844 --> 00:03:39,340
One is the actual world state, the Cat.

65
00:03:39,340 --> 00:03:40,770
And the other is the KeyEvent.

66
00:03:40,770 --> 00:03:43,440
And that's going to describe which key was pressed.

67
00:03:43,440 --> 00:03:45,510
This is just the stub.

68
00:03:45,510 --> 00:03:46,760
I'll produce zero.

69
00:03:46,760 --> 00:03:50,330


70
00:03:50,330 --> 00:03:52,340
And I'll put bang, bang, bang to remind myself

71
00:03:52,340 --> 00:03:54,550
I still need to do this function.

72
00:03:54,550 --> 00:04:00,000
I updated the analysis to say that big-bang needed the on-key option.

73
00:04:00,000 --> 00:04:05,300
I updated main so that that big-bang specifies on-key and tells

74
00:04:05,300 --> 00:04:08,440
big-bang to call a handler called handle-key.

75
00:04:08,440 --> 00:04:11,860
And I'd made the wish list entry for the handler.

76
00:04:11,860 --> 00:04:14,680
So I've got the signature, purpose, and stub.

77
00:04:14,680 --> 00:04:16,769
Now I need to work on the examples.

78
00:04:16,769 --> 00:04:20,079
And what I'm going to do is I'm going to explain about KeyEvent while I

79
00:04:20,079 --> 00:04:23,400
work on the examples.

80
00:04:23,400 --> 00:04:31,020
This function consumes two arguments.

81
00:04:31,020 --> 00:04:33,470
And the first argument is a Cat.

82
00:04:33,470 --> 00:04:36,360
It's a representation of the cats x-coordinate.

83
00:04:36,360 --> 00:04:39,610
So a reasonable value for cat might be 10.

84
00:04:39,610 --> 00:04:42,000
The second argument is a KeyEvent.

85
00:04:42,000 --> 00:04:46,610
Now what KeyEvent is is it's a primitive type in a Racket.

86
00:04:46,610 --> 00:04:49,930
And it's what's called a large enumeration.

87
00:04:49,930 --> 00:04:55,250
There's one distinct value in key event for each of the many different keys

88
00:04:55,250 --> 00:04:56,930
you can press on the keyboard.

89
00:04:56,930 --> 00:04:59,160
So there's a distinct value for the Space key,

90
00:04:59,160 --> 00:05:03,050
and a distinct value for A key, and a distinct value for the 1 key,

91
00:05:03,050 --> 00:05:05,600
and distinct value for the Left Arrow key.

92
00:05:05,600 --> 00:05:06,800
There's a lot of them.

93
00:05:06,800 --> 00:05:10,130
That's why it's called a large enumeration.

94
00:05:10,130 --> 00:05:13,270
Now, in order to make this simple, what Racket does

95
00:05:13,270 --> 00:05:17,680
is it uses simple strings to be those distinct values.

96
00:05:17,680 --> 00:05:21,620
So the distinct value that represents that the Space key was pressed

97
00:05:21,620 --> 00:05:26,190
is a string with a space in it.

98
00:05:26,190 --> 00:05:30,040
So that's the way Big Bang would call handle key

99
00:05:30,040 --> 00:05:35,120
if the current state of the world is 10 and the Space key is pressed.

100
00:05:35,120 --> 00:05:36,400
Now we understand key event.

101
00:05:36,400 --> 00:05:40,240
Now we're back to the standard HtDF generation of examples.

102
00:05:40,240 --> 00:05:44,710
Well, what is handle-key supposed to do if the current world state is 10?

103
00:05:44,710 --> 00:05:49,750
If the cat is at x-coordinate 10 and the Space key is pressed?

104
00:05:49,750 --> 00:05:52,420
Well, it's supposed to reset the cat to the left edge,

105
00:05:52,420 --> 00:05:55,810
so that should produce 0.

106
00:05:55,810 --> 00:05:58,550
Let's do another example now.

107
00:05:58,550 --> 00:06:05,610
What happens if we have handle key 10 and the A key is pressed?

108
00:06:05,610 --> 00:06:08,140
Because remember, we've told the user that they're

109
00:06:08,140 --> 00:06:12,370
supposed to set the cat back to the beginning by pressing Space.

110
00:06:12,370 --> 00:06:16,660
But they might accidentally press something else.

111
00:06:16,660 --> 00:06:19,480
Well, what happens in that case is nothing supposed to happen.

112
00:06:19,480 --> 00:06:22,420
The cat is supposed to stay where it is.

113
00:06:22,420 --> 00:06:25,030
So that'll be 10.

114
00:06:25,030 --> 00:06:31,140
Now let's see, what other tests might we need?

115
00:06:31,140 --> 00:06:33,440
Well, you might also want to say, well, what

116
00:06:33,440 --> 00:06:40,835
happens if the cat happens to already be at 0 and the Space key is pressed?

117
00:06:40,835 --> 00:06:43,410


118
00:06:43,410 --> 00:06:44,770
I'll line this up this way.

119
00:06:44,770 --> 00:06:46,770
I'll indulge my inner Virgo.

120
00:06:46,770 --> 00:06:51,210
Well, if it's already at 0 and Space key is pressed, it should stay at 0.

121
00:06:51,210 --> 00:06:55,620
You might even want to do that for this example, which is to say, I start at 0.

122
00:06:55,620 --> 00:06:58,555
I press A. In that case, I should still be at 0.

123
00:06:58,555 --> 00:07:02,660


124
00:07:02,660 --> 00:07:09,360
Now, you might say, wait a minute, there is a whole bunch of possible keys.

125
00:07:09,360 --> 00:07:11,600
It's a very large enumeration.

126
00:07:11,600 --> 00:07:15,570
Do I need to test every single case?

127
00:07:15,570 --> 00:07:17,520
This is an example of white box testing.

128
00:07:17,520 --> 00:07:19,936
What we're going to do is we're going to say to ourselves,

129
00:07:19,936 --> 00:07:24,270
you know, we don't need to test every single case,

130
00:07:24,270 --> 00:07:27,190
because we kind of know how this functions going to work.

131
00:07:27,190 --> 00:07:30,540
Except you don't yet know how this functions going to work.

132
00:07:30,540 --> 00:07:34,170
So now I have to start talking about how we template functions

133
00:07:34,170 --> 00:07:36,720
that operate on large enumerations.

134
00:07:36,720 --> 00:07:39,440
So let's jump ahead to the template step.

135
00:07:39,440 --> 00:07:44,840
And then you'll see why it's OK to use this small number of test cases.

136
00:07:44,840 --> 00:07:49,170
One way to get the template for a handle-key function

137
00:07:49,170 --> 00:07:52,840
would be to go to the How To Design Worlds page.

138
00:07:52,840 --> 00:07:56,070
And then at the bottom of the page it includes

139
00:07:56,070 --> 00:08:01,610
templates for handle-key and handle-mouse, which are quite similar.

140
00:08:01,610 --> 00:08:03,570
handle-key consumes a KeyEvent.

141
00:08:03,570 --> 00:08:07,640
And handle-mouse consumes a MouseEvent, which is a large enumeration describing

142
00:08:07,640 --> 00:08:09,530
all the possible mouse events.

143
00:08:09,530 --> 00:08:10,960
I'll copy it from here.

144
00:08:10,960 --> 00:08:13,960
And then I'll explain how it works when we get back over to Racket.

145
00:08:13,960 --> 00:08:16,600


146
00:08:16,600 --> 00:08:19,330
So let's see, I got to comment out the stub.

147
00:08:19,330 --> 00:08:21,640
It already happens to have the same name I'm using.

148
00:08:21,640 --> 00:08:23,170
That's a stroke of luck.

149
00:08:23,170 --> 00:08:26,760
But WS is, in this program, world state is a Cat.

150
00:08:26,760 --> 00:08:32,561
So let me just for consistency rename WS to Cat.

151
00:08:32,561 --> 00:08:35,870
And now it turns out that this template happens

152
00:08:35,870 --> 00:08:37,590
to be right for this particular case.

153
00:08:37,590 --> 00:08:40,789
But let's talk about why.

154
00:08:40,789 --> 00:08:43,630
Because it's an enumeration and a large enumeration,

155
00:08:43,630 --> 00:08:46,860
if you followed the normal data template rule,

156
00:08:46,860 --> 00:08:49,160
you'd end up with a very large cond.

157
00:08:49,160 --> 00:08:53,500
There be one case in this cond for every possible key event.

158
00:08:53,500 --> 00:08:58,920
So this first case says, if the key is equal to Space--

159
00:08:58,920 --> 00:09:03,880
key equals is a special function the checks the quality of key events--

160
00:09:03,880 --> 00:09:06,480
if the key is a space, do this.

161
00:09:06,480 --> 00:09:08,840
And then you have one if the key is an A, do this.

162
00:09:08,840 --> 00:09:10,240
And if the key is a B, do this.

163
00:09:10,240 --> 00:09:12,220
And da, da, da, da, you'd have a lot of them.

164
00:09:12,220 --> 00:09:15,620
But when we template a large enumeration, what

165
00:09:15,620 --> 00:09:18,160
we're allowed to do is say, look, there's

166
00:09:18,160 --> 00:09:20,970
going to be a small number of special cases.

167
00:09:20,970 --> 00:09:26,210
And then all the other keys are going to be handled similarly.

168
00:09:26,210 --> 00:09:28,280
Or sometimes what happens if, for example, you're

169
00:09:28,280 --> 00:09:31,740
building a world program that does a text editor,

170
00:09:31,740 --> 00:09:34,970
there's whole groups of keys that are handled similarly.

171
00:09:34,970 --> 00:09:37,660
All the keys that insert text are handled similarly,

172
00:09:37,660 --> 00:09:40,250
whereas the Arrow keys are handled similarly.

173
00:09:40,250 --> 00:09:44,680
And so you might have larger groups than groups of one key and all the rest.

174
00:09:44,680 --> 00:09:48,950
But the basic idea here this is how we template a large enumeration.

175
00:09:48,950 --> 00:09:51,250
We identify the special cases.

176
00:09:51,250 --> 00:09:53,770
And then we have an else for everything else.

177
00:09:53,770 --> 00:09:58,170
So let's see now, completing the code against the examples and the purpose,

178
00:09:58,170 --> 00:10:01,910
if the key is equal to Space, then these two examples and the purpose

179
00:10:01,910 --> 00:10:04,745
tell me that I'm supposed to produce 0.

180
00:10:04,745 --> 00:10:07,260


181
00:10:07,260 --> 00:10:11,660
And if the key is anything else than these two examples and the purpose

182
00:10:11,660 --> 00:10:13,720
tell me that the cat shouldn't change.

183
00:10:13,720 --> 00:10:16,990
I should just produce whatever the cat currently is.

184
00:10:16,990 --> 00:10:19,141
Let's test that.

185
00:10:19,141 --> 00:10:23,900
And now you see why when I wrote the tests I was allowed to do it this way.

186
00:10:23,900 --> 00:10:27,340
I'm allowed to just test the special case

187
00:10:27,340 --> 00:10:31,790
Space and one example of the other cases,

188
00:10:31,790 --> 00:10:35,070
because I know that I'm going to end up having this special constructor

189
00:10:35,070 --> 00:10:37,050
in which there are only two cases.

190
00:10:37,050 --> 00:10:40,930
Again, this is what's called a white box testing, where when I write the test,

191
00:10:40,930 --> 00:10:45,940
I allow myself to know something about the structure of the function.

192
00:10:45,940 --> 00:10:49,370
White box testing is something you'll talk more about in software engineering

193
00:10:49,370 --> 00:10:51,060
courses if you take those.

194
00:10:51,060 --> 00:10:53,060
But this is an example of why we would do it.

195
00:10:53,060 --> 00:10:55,700
It lets us test what a function is really

196
00:10:55,700 --> 00:11:00,490
doing without having to create anywhere near as elaborate a set of tests.

197
00:11:00,490 --> 00:11:02,700
So let's how my tests pass.

198
00:11:02,700 --> 00:11:07,230
Let me actually try running the program, main of 0.

199
00:11:07,230 --> 00:11:09,710
And I'll try to type very loudly here.

200
00:11:09,710 --> 00:11:12,440


201
00:11:12,440 --> 00:11:16,510
You hear whenever I press the Space key, the cat

202
00:11:16,510 --> 00:11:18,020
is resetting back to the beginning.

203
00:11:18,020 --> 00:11:23,100


204
00:11:23,100 --> 00:11:24,600
So just a quick summary.

205
00:11:24,600 --> 00:11:28,050
We kind of replayed the whole How To Design World's recipe.

206
00:11:28,050 --> 00:11:33,230
We, in the analysis, identified a new option to big-bang.

207
00:11:33,230 --> 00:11:34,800
There were no changes to constants.

208
00:11:34,800 --> 00:11:37,950
There were no changes to the data definitions.

209
00:11:37,950 --> 00:11:40,990
We added one new option to big-bang.

210
00:11:40,990 --> 00:11:43,910
That made us wish for a new handler.

211
00:11:43,910 --> 00:11:47,800
We did the signature, purpose, and stub for the new handler.

212
00:11:47,800 --> 00:11:50,680
Then we went ahead and did the examples in the template.

213
00:11:50,680 --> 00:11:53,560
There was a special rule for templating this function,

214
00:11:53,560 --> 00:11:55,960
because it's a large enumeration.

215
00:11:55,960 --> 00:11:58,590
Most of what we did here is something we've done before.

216
00:11:58,590 --> 00:12:01,500
We followed the various pieces of the recipe.

217
00:12:01,500 --> 00:12:06,010
Really the large enumeration rule is the only new thing we did here.

218
00:12:06,010 --> 00:12:10,490
What I suggest you do now is try adding another piece of functionality

219
00:12:10,490 --> 00:12:15,210
to this program, which is to make it whenever I click the mouse,

220
00:12:15,210 --> 00:12:19,570
the cat goes to the current exposition of the mouse.

221
00:12:19,570 --> 00:12:22,560
That'll be an exercise very much like the one we just did.

222
00:12:22,560 --> 00:12:27,700
Except instead of adding a key handler, you'll be adding a mouse handler.

223
00:12:27,700 --> 00:12:29,940
Have some fun with that.

224
00:12:29,940 --> 00:12:30,469



0
00:00:00,000 --> 00:00:04,520


1
00:00:04,520 --> 00:00:07,760
GREGOR KICZALES: Here's another sample how to design functions problem.

2
00:00:07,760 --> 00:00:11,700
In this problem, we're going to see a few extra wrinkles; including

3
00:00:11,700 --> 00:00:14,740
an example of how not to write a good purpose,

4
00:00:14,740 --> 00:00:17,180
some problems that can come up with tests,

5
00:00:17,180 --> 00:00:22,764
and some issues having to do with copying part of what's in the template.

6
00:00:22,764 --> 00:00:25,430
OK, so here's the example, I'm going to design a function called

7
00:00:25,430 --> 00:00:28,920
area that consumes the length of one side of a square

8
00:00:28,920 --> 00:00:30,645
and produces the area of the square.

9
00:00:30,645 --> 00:00:33,500


10
00:00:33,500 --> 00:00:40,320
Let's see, so the length is going to be a number, and the area of a square

11
00:00:40,320 --> 00:00:41,689
is also going to be a number.

12
00:00:41,689 --> 00:00:43,230
So the signature is number to number.

13
00:00:43,230 --> 00:00:46,120


14
00:00:46,120 --> 00:00:56,730
And the purpose is given length of one side of square produce

15
00:00:56,730 --> 00:01:00,070
the area of the square.

16
00:01:00,070 --> 00:01:03,030
Let me just make a note here about what's not a good purpose.

17
00:01:03,030 --> 00:01:05,099
This is not a good purpose.

18
00:01:05,099 --> 00:01:09,720
Given number, produce number.

19
00:01:09,720 --> 00:01:12,470
That just repeats the signature.

20
00:01:12,470 --> 00:01:15,650
That's not telling me something we don't already know.

21
00:01:15,650 --> 00:01:18,100
The purpose needs to tell me something more specific

22
00:01:18,100 --> 00:01:21,450
than the signature about exactly what we do with the given number

23
00:01:21,450 --> 00:01:24,310
and exactly what the number we produce means.

24
00:01:24,310 --> 00:01:26,270
Given the length of one side of the square,

25
00:01:26,270 --> 00:01:29,280
it says this is the length of one side of the square,

26
00:01:29,280 --> 00:01:30,760
produce the area of the square.

27
00:01:30,760 --> 00:01:33,370
This number is going to be the area of the square.

28
00:01:33,370 --> 00:01:35,370
So that's what we want a purpose statement to do

29
00:01:35,370 --> 00:01:39,320
is be quite specific about what's going on.

30
00:01:39,320 --> 00:01:42,130
So now, let's see, the stub is define area.

31
00:01:42,130 --> 00:01:44,550
This is a one-argument function.

32
00:01:44,550 --> 00:01:46,955
And maybe the length of a side will be s.

33
00:01:46,955 --> 00:01:50,409
We can use any name we want, but s seems good.

34
00:01:50,409 --> 00:01:52,200
And, let's see, this is producing a number,

35
00:01:52,200 --> 00:01:56,857
so a good dummy value to produce is 0.

36
00:01:56,857 --> 00:01:58,190
Now let's do some check-expects.

37
00:01:58,190 --> 00:02:04,790
Let's see, check-expect area of 3.

38
00:02:04,790 --> 00:02:09,009
Well, if one side of the square is 3, then the area is 9.

39
00:02:09,009 --> 00:02:15,830
We'll do another one, check-expect area of, let's say, 3.2.

40
00:02:15,830 --> 00:02:19,050
And, let's see, the area of that square is times 3.2,

41
00:02:19,050 --> 00:02:20,980
3.2-- I won't try to do that in my head.

42
00:02:20,980 --> 00:02:25,770


43
00:02:25,770 --> 00:02:28,250
Now we run the check-expects.

44
00:02:28,250 --> 00:02:33,850
And both ran, they failed, but they both ran, so that means they're well-formed.

45
00:02:33,850 --> 00:02:34,590
We can continue.

46
00:02:34,590 --> 00:02:37,670


47
00:02:37,670 --> 00:02:41,460
Now, let's see, we've got the stub.

48
00:02:41,460 --> 00:02:47,490
Let's comment out the stub and label it, and we'll write the template.

49
00:02:47,490 --> 00:02:52,310
Area with a parameter s that's number, the template is . . .

50
00:02:52,310 --> 00:02:55,050
s.

51
00:02:55,050 --> 00:02:57,780
And it's going to be good to have a copy of that template,

52
00:02:57,780 --> 00:03:01,160
so I'll make a copy of it right there.

53
00:03:01,160 --> 00:03:07,830
We'll comment out the original template, we'll label it as the original.

54
00:03:07,830 --> 00:03:14,130
And now, let's see, if this is a function that consumes the side

55
00:03:14,130 --> 00:03:18,270
and it just multiplies this side by itself, so this becomes times s s.

56
00:03:18,270 --> 00:03:23,730


57
00:03:23,730 --> 00:03:26,310
Let's run that.

58
00:03:26,310 --> 00:03:28,765
We've got a failing test here, let's see what's happening.

59
00:03:28,765 --> 00:03:32,120


60
00:03:32,120 --> 00:03:36,750
This says that the actual value 9 differs from 3, the expected value.

61
00:03:36,750 --> 00:03:40,100
And I can click to see which test it is.

62
00:03:40,100 --> 00:03:45,250
It said it produced 9 and; oh, here's a thing that happens,

63
00:03:45,250 --> 00:03:47,480
this test is actually wrong.

64
00:03:47,480 --> 00:03:50,750
That's not supposed to be 3, that's supposed to be 9.

65
00:03:50,750 --> 00:03:53,520


66
00:03:53,520 --> 00:03:58,600
Now if we run it, both tests pass.

67
00:03:58,600 --> 00:04:00,770
So there's two interesting things in this example,

68
00:04:00,770 --> 00:04:04,040
one is to note that you need to be careful if you get a failing test

69
00:04:04,040 --> 00:04:06,260
to make sure the test is right.

70
00:04:06,260 --> 00:04:09,030
If your test is wrong and you make the function conform to it,

71
00:04:09,030 --> 00:04:10,647
then the function will be wrong.

72
00:04:10,647 --> 00:04:12,480
And that happens, sometimes you write a test

73
00:04:12,480 --> 00:04:16,780
and you're just going a bit too quickly and you put the wrong expected value.

74
00:04:16,780 --> 00:04:18,529
So whenever you have a failing test, first

75
00:04:18,529 --> 00:04:21,909
look at the test to see if the test is right.

76
00:04:21,909 --> 00:04:24,450
The second interesting thing that's happening in this example

77
00:04:24,450 --> 00:04:28,930
is to see that sometimes you have to copy part of the template.

78
00:04:28,930 --> 00:04:32,690
Remember the template for this function was dot dot dot s.

79
00:04:32,690 --> 00:04:36,160
In the final function we ended up with s times s.

80
00:04:36,160 --> 00:04:39,610
So we copied a piece of the template, and that's OK.

81
00:04:39,610 --> 00:04:41,360
The template is really trying to tell you;

82
00:04:41,360 --> 00:04:44,960
hey, here's the stuff you have to work with.

83
00:04:44,960 --> 00:04:46,970
You can use it in any way you want, it's just

84
00:04:46,970 --> 00:04:52,270
telling you this is the parts list, you can use s twice.

85
00:04:52,270 --> 00:04:55,040
So there you go, that's our second function.

86
00:04:55,040 --> 00:04:58,420
I'll save it, run it one more time.

87
00:04:58,420 --> 00:05:00,118



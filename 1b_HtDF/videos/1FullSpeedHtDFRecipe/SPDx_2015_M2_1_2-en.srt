0
00:00:00,000 --> 00:00:05,313


1
00:00:05,313 --> 00:00:07,820
GREGOR KICZALES: In this video, I want to introduce

2
00:00:07,820 --> 00:00:12,090
one of the most important elements of the course, the How to Design Functions

3
00:00:12,090 --> 00:00:13,070
recipe.

4
00:00:13,070 --> 00:00:16,712
Or we call it the HtDF recipe for short.

5
00:00:16,712 --> 00:00:21,760
The HtDF recipe systematizes the design of a function.

6
00:00:21,760 --> 00:00:24,570
What I mean by that is it tells us what to do first,

7
00:00:24,570 --> 00:00:29,350
and second, and third, all the way through the design of a function.

8
00:00:29,350 --> 00:00:32,000
So it helps us know what to do, and it also

9
00:00:32,000 --> 00:00:35,470
helps us be sure that we end up with a high quality function.

10
00:00:35,470 --> 00:00:38,310
It really does what we need it to do, and that's been well-tested.

11
00:00:38,310 --> 00:00:40,930


12
00:00:40,930 --> 00:00:43,190
Now, there's a funny thing about design recipes,

13
00:00:43,190 --> 00:00:45,350
or design methods as they're sometimes called,

14
00:00:45,350 --> 00:00:48,980
that particularly affects when you learn them.

15
00:00:48,980 --> 00:00:52,900
What a design recipe does is it makes hard problems easier.

16
00:00:52,900 --> 00:00:56,070
It lets us take a big, hard problem, and break it down

17
00:00:56,070 --> 00:01:00,220
and work through it in a systematic fashion.

18
00:01:00,220 --> 00:01:02,280
The price we pay for that is that it actually

19
00:01:02,280 --> 00:01:05,230
makes easy problems more cumbersome.

20
00:01:05,230 --> 00:01:06,290
That's right.

21
00:01:06,290 --> 00:01:08,680
The HtDF recipe is going to make hard functions

22
00:01:08,680 --> 00:01:13,580
easier to design and easy functions a little harder to design.

23
00:01:13,580 --> 00:01:17,710
In fact, once you get good at designing functions,

24
00:01:17,710 --> 00:01:22,320
you won't use the HtDF recipe for really simple functions.

25
00:01:22,320 --> 00:01:27,910
But for now, we want you to use the HtDF even for simple functions.

26
00:01:27,910 --> 00:01:30,140
That's because the way this is going to work

27
00:01:30,140 --> 00:01:34,230
is that you're going to use simple functions to learn the recipe,

28
00:01:34,230 --> 00:01:37,850
and then you're going to use the recipe to do the hard functions.

29
00:01:37,850 --> 00:01:41,510
So what I need to ask for now is two kinds of patience.

30
00:01:41,510 --> 00:01:43,740
If you've never programmed before, it's going

31
00:01:43,740 --> 00:01:48,440
to seem like there's a lot going on when we introduce this recipe.

32
00:01:48,440 --> 00:01:51,770
So I'm going to need to ask that you be patient, and go through it with me

33
00:01:51,770 --> 00:01:57,550
at the pace we're going through, and I promise you it will become familiar.

34
00:01:57,550 --> 00:02:00,890
If you have programmed before, this is going to seem like overkill.

35
00:02:00,890 --> 00:02:03,270
We're going to start with a very simple function.

36
00:02:03,270 --> 00:02:07,990
And by using the recipe, it's going to take us quite a long time to do it.

37
00:02:07,990 --> 00:02:10,490
I need to ask you to be patient too.

38
00:02:10,490 --> 00:02:14,220
I promise you within a few weeks, by using the recipe,

39
00:02:14,220 --> 00:02:16,530
we're going to be designing much harder functions

40
00:02:16,530 --> 00:02:19,150
than we could design otherwise.

41
00:02:19,150 --> 00:02:21,275
Here's how we're going to go through this material.

42
00:02:21,275 --> 00:02:24,740
There's going to be this video and the next one.

43
00:02:24,740 --> 00:02:28,240
In the first video, I'm going to go through the design of a function step

44
00:02:28,240 --> 00:02:29,650
by step.

45
00:02:29,650 --> 00:02:32,710
And I'm going to tell you what I'm doing at each step,

46
00:02:32,710 --> 00:02:35,800
but I'm going to describe it as if you already knew

47
00:02:35,800 --> 00:02:38,990
the terminology of the design recipe.

48
00:02:38,990 --> 00:02:41,680
I know that sounds silly, because you don't.

49
00:02:41,680 --> 00:02:44,290
But we've learned from teaching this to many, many students

50
00:02:44,290 --> 00:02:48,640
at UBC that the right thing to do first is to kind of go through

51
00:02:48,640 --> 00:02:51,820
at almost normal speed.

52
00:02:51,820 --> 00:02:54,870
And in the next video, the next video is going to kind of

53
00:02:54,870 --> 00:02:57,980
be a slow motion version of this video.

54
00:02:57,980 --> 00:03:01,420
In that next video, as we go through it piece by piece,

55
00:03:01,420 --> 00:03:05,060
I'll elaborate on each piece we're doing, and why we're doing it,

56
00:03:05,060 --> 00:03:07,570
and how it works.

57
00:03:07,570 --> 00:03:13,060
So what we're going to ask you do is watch this video once at speed,

58
00:03:13,060 --> 00:03:19,180
then watch the next video with DrRacket open following along,

59
00:03:19,180 --> 00:03:24,240
and then it'll probably help you to watch this video again at speed.

60
00:03:24,240 --> 00:03:26,770
Everything we do, the entire design recipe,

61
00:03:26,770 --> 00:03:31,906
you can find on the course web page under the Design Recipes link.

62
00:03:31,906 --> 00:03:36,820
That example that's used on the website is the one we're going to do here,

63
00:03:36,820 --> 00:03:39,260
so you'll be able to follow along.

64
00:03:39,260 --> 00:03:43,700
Again, be patient with the material, and be patient with yourself.

65
00:03:43,700 --> 00:03:46,720
There's a lot going on in the HTDF recipe.

66
00:03:46,720 --> 00:03:49,350
You're not going to pick it up the first time through.

67
00:03:49,350 --> 00:03:52,480
You're not going to pick it all up the second time through.

68
00:03:52,480 --> 00:03:56,180
But you'll be going through the recipe hundreds of times through the course,

69
00:03:56,180 --> 00:03:59,960
and I promise you within a couple weeks, it's going to seem quite familiar,

70
00:03:59,960 --> 00:04:02,980
and you'll just be learning more nuances about it as we go forward.

71
00:04:02,980 --> 00:04:05,610


72
00:04:05,610 --> 00:04:06,110
OK.

73
00:04:06,110 --> 00:04:10,510
Now, what I've done here is I downloaded the doublestarter.racket

74
00:04:10,510 --> 00:04:14,680
from the HtDF module web page.

75
00:04:14,680 --> 00:04:17,510
And I've opened the file up in DrRacket.

76
00:04:17,510 --> 00:04:22,094
And it's giving me a problem that we need to solve, a design problem.

77
00:04:22,094 --> 00:04:25,010
And what it wants us to do is design a function that consumes a number

78
00:04:25,010 --> 00:04:27,099
and produces twice that number.

79
00:04:27,099 --> 00:04:28,890
We're supposed to call the function double,

80
00:04:28,890 --> 00:04:32,320
and we're supposed to follow the HtDF recipe.

81
00:04:32,320 --> 00:04:35,190
Now, whenever I follow the HtDF recipe, I

82
00:04:35,190 --> 00:04:39,080
like to have a copy of the recipe right in front of me.

83
00:04:39,080 --> 00:04:43,660
And so what I've done here is I went to the Design Recipes tab

84
00:04:43,660 --> 00:04:47,940
on the course website, and then I followed the link to the How

85
00:04:47,940 --> 00:04:50,020
to Design Functions page.

86
00:04:50,020 --> 00:04:53,640
And then at the top here is a quick summary of that recipe,

87
00:04:53,640 --> 00:04:59,240
and I've copied that in my video editor and put it right here, so we can work.

88
00:04:59,240 --> 00:05:02,210
So step one is the signature, purpose, and stub.

89
00:05:02,210 --> 00:05:06,180
So this function's going to consume a number and produce a number,

90
00:05:06,180 --> 00:05:09,590
and that's the signature for it.

91
00:05:09,590 --> 00:05:13,970
The purpose of this function is to produce two times the given number.

92
00:05:13,970 --> 00:05:17,780


93
00:05:17,780 --> 00:05:21,430
And the stub, the stub is something, remember, in the next video,

94
00:05:21,430 --> 00:05:23,160
I'll go through more detail about this.

95
00:05:23,160 --> 00:05:24,950
But the stub is going to look like this.

96
00:05:24,950 --> 00:05:30,270
It's defined the name of the function, a single parameter which I'll call N.

97
00:05:30,270 --> 00:05:32,689
And this stub is going to produce zero.

98
00:05:32,689 --> 00:05:34,480
And as I, said we'll talk more about what's

99
00:05:34,480 --> 00:05:37,450
going on there in the next video.

100
00:05:37,450 --> 00:05:41,090
So there's step one, signature, purpose, and stub.

101
00:05:41,090 --> 00:05:42,605
Now, I'm going to do the examples.

102
00:05:42,605 --> 00:05:45,580


103
00:05:45,580 --> 00:05:48,050
Now what I'm going to write for the examples is I'm

104
00:05:48,050 --> 00:05:53,000
going to write check-expect, and then a call to the function

105
00:05:53,000 --> 00:05:56,670
double of an argument like, let's say, 3.

106
00:05:56,670 --> 00:05:59,280
And then I'm going to write 6, because of what this is saying

107
00:05:59,280 --> 00:06:03,200
is that if I call double with 3, I expect to get the result 6.

108
00:06:03,200 --> 00:06:10,580
Now, if I call double with, for example, 4.2, I expect to get 8.4.

109
00:06:10,580 --> 00:06:11,530
So that's my examples.

110
00:06:11,530 --> 00:06:16,980


111
00:06:16,980 --> 00:06:20,300
I'm going to run my examples, and they're going to fail.

112
00:06:20,300 --> 00:06:21,740
Both tests are going to fail.

113
00:06:21,740 --> 00:06:23,900
Again, we'll talk more about this next time.

114
00:06:23,900 --> 00:06:26,886
But the fact that they even ran told me something important, which

115
00:06:26,886 --> 00:06:28,510
is that the examples where well-formed.

116
00:06:28,510 --> 00:06:31,610


117
00:06:31,610 --> 00:06:35,220
Now, I go onto the template step.

118
00:06:35,220 --> 00:06:43,880
And the template for this function is going to be just define double of N,

119
00:06:43,880 --> 00:06:47,040
and then dot, dot, dot N. And the way I'm

120
00:06:47,040 --> 00:06:49,770
going to read that is it's going to say, you know,

121
00:06:49,770 --> 00:06:53,330
when I get around to coding the body of the function,

122
00:06:53,330 --> 00:06:55,659
N is what I have to work with.

123
00:06:55,659 --> 00:06:57,700
The actual parameter is what I have to work with.

124
00:06:57,700 --> 00:07:00,440
So there's the template.

125
00:07:00,440 --> 00:07:04,800
Now, I have to go onto the step of coding the body.

126
00:07:04,800 --> 00:07:08,020
To code the body, what I do is I make myself a copy of the template.

127
00:07:08,020 --> 00:07:10,840
I take the old template and comment it out.

128
00:07:10,840 --> 00:07:14,360
And now, I have to figure out, well, what is in the body of this function?

129
00:07:14,360 --> 00:07:17,970
What's going to make the body of this function work?

130
00:07:17,970 --> 00:07:20,520
And now, I'm going to look at the examples.

131
00:07:20,520 --> 00:07:22,570
I'm going to look at the signature.

132
00:07:22,570 --> 00:07:24,988
I'm going to look at everything I've written before.

133
00:07:24,988 --> 00:07:26,946
And what I'm going to do here is, actually, I'm

134
00:07:26,946 --> 00:07:29,410
going to elaborate the second example.

135
00:07:29,410 --> 00:07:31,310
Just to make this more clear to myself, I'm

136
00:07:31,310 --> 00:07:38,480
going to say, look, the reason it was 8.4 is that it was really 2 times 4.2.

137
00:07:38,480 --> 00:07:40,760
And now, I have my aha moment.

138
00:07:40,760 --> 00:07:43,160
I understand what the function is supposed to do.

139
00:07:43,160 --> 00:07:47,700
It's times 2 of N. I run it.

140
00:07:47,700 --> 00:07:49,690
Both tests pass.

141
00:07:49,690 --> 00:07:50,570
Fantastic.

142
00:07:50,570 --> 00:07:54,900
I have the sense of my functions working.

143
00:07:54,900 --> 00:07:59,290
So that's a first pass through the HtDF design recipe.

144
00:07:59,290 --> 00:08:03,230
Again, I certainly don't expect you to have fully absorbed the HtDF

145
00:08:03,230 --> 00:08:06,550
recipe from that quick pass through it.

146
00:08:06,550 --> 00:08:10,130
What I want you to do now is go to the next video, which

147
00:08:10,130 --> 00:08:13,880
is going to be the slow motion version of this video, in which I'll

148
00:08:13,880 --> 00:08:17,560
talk about the different parts of the recipe in more detail.

149
00:08:17,560 --> 00:08:19,600



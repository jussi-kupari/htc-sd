0
00:00:00,000 --> 00:00:05,319


1
00:00:05,319 --> 00:00:07,110
GREGOR KICZALES: In the last video, you saw

2
00:00:07,110 --> 00:00:12,050
me use the HtDF design recipe to design a very simple function,

3
00:00:12,050 --> 00:00:13,970
but I went through it very quickly.

4
00:00:13,970 --> 00:00:18,000
Too quickly for you to absorb the different elements of the recipe.

5
00:00:18,000 --> 00:00:19,930
What I'm going to go through in this video

6
00:00:19,930 --> 00:00:23,790
is the same design much more slowly and talk more carefully

7
00:00:23,790 --> 00:00:26,630
about what I'm doing in each step.

8
00:00:26,630 --> 00:00:32,350
What I recommend you do is have your computer open, open up Dr. Racket

9
00:00:32,350 --> 00:00:35,395
and follow along with the design recipe as I'm going through.

10
00:00:35,395 --> 00:00:41,120
At each step, you could stop the video and catch up in your Dr. Racket.

11
00:00:41,120 --> 00:00:46,080
And I'll also recommend that you open up a web browser to the HTDF design recipe

12
00:00:46,080 --> 00:00:51,552
page from the course website, so that you can follow along with that as well.

13
00:00:51,552 --> 00:00:53,260
Then you'll be able to see what I'm doing

14
00:00:53,260 --> 00:00:55,140
and practice it as it's going through.

15
00:00:55,140 --> 00:00:58,210


16
00:00:58,210 --> 00:01:01,870
Just like before, I've taken the doublestarter.racket file

17
00:01:01,870 --> 00:01:04,129
from the HTDF module web page.

18
00:01:04,129 --> 00:01:05,459
I've opened it up.

19
00:01:05,459 --> 00:01:07,014
And here's the problem.

20
00:01:07,014 --> 00:01:09,430
We're supposed to design a function that consumes a number

21
00:01:09,430 --> 00:01:13,370
and produces twice that number, and the function should be called double.

22
00:01:13,370 --> 00:01:15,220
Again, it's a very, very simple function.

23
00:01:15,220 --> 00:01:17,940
Remember we're using simple functions to learn the recipe,

24
00:01:17,940 --> 00:01:21,080
and then the recipe will let us do harder functions.

25
00:01:21,080 --> 00:01:25,380
And also, just like in the full speed version of the video,

26
00:01:25,380 --> 00:01:28,660
I've taken a copy of How to Design Functions recipe, which

27
00:01:28,660 --> 00:01:31,240
I got from the Design Recipes page.

28
00:01:31,240 --> 00:01:36,780
And I am setting here on the right hand side, so we can refer to it as we go.

29
00:01:36,780 --> 00:01:40,390
The first step of the recipe is write the signature.

30
00:01:40,390 --> 00:01:44,710
The job of the signature is to tell me what type of data a function consumes

31
00:01:44,710 --> 00:01:48,070
and what type of data it produces.

32
00:01:48,070 --> 00:01:51,410
In this case, the function consumes a number and produces a number.

33
00:01:51,410 --> 00:01:54,970
So I write the signature with two semi-colons, a space,

34
00:01:54,970 --> 00:01:58,490
capitalized number-- type names are always capitalized--

35
00:01:58,490 --> 00:02:01,560
and then I make a little arrow and again capitalize number,

36
00:02:01,560 --> 00:02:05,330
because this function produces a number.

37
00:02:05,330 --> 00:02:07,200
If the function consumes multiple arguments,

38
00:02:07,200 --> 00:02:11,310
then I'd have multiple type names before the arrow.

39
00:02:11,310 --> 00:02:13,410
In this case, it just consumes one argument.

40
00:02:13,410 --> 00:02:17,340
And I read this signature as saying the function consumes a number

41
00:02:17,340 --> 00:02:18,370
and produces a number.

42
00:02:18,370 --> 00:02:21,720


43
00:02:21,720 --> 00:02:24,070
Now I need to write the purpose.

44
00:02:24,070 --> 00:02:27,520
The job of the purpose is to give me a succinct description

45
00:02:27,520 --> 00:02:31,660
of what the function produces given what it consumes.

46
00:02:31,660 --> 00:02:36,060
So in this case, a good purpose is to say that the function produces

47
00:02:36,060 --> 00:02:38,040
two times the given number.

48
00:02:38,040 --> 00:02:42,680
Now I know exactly what it's producing in terms of what it consumed.

49
00:02:42,680 --> 00:02:44,930
The purpose needs to say more than the signature.

50
00:02:44,930 --> 00:02:48,230
So purpose, for example, that just says consumes a number

51
00:02:48,230 --> 00:02:51,650
and produces a number isn't telling me anymore than the signature.

52
00:02:51,650 --> 00:02:54,310
And that wouldn't be a good purpose.

53
00:02:54,310 --> 00:02:56,430
We also want the purpose to be short.

54
00:02:56,430 --> 00:03:00,010
Sometimes it's hard to write it short, less than one line.

55
00:03:00,010 --> 00:03:01,745
But it's good to do so, because it starts

56
00:03:01,745 --> 00:03:03,245
to help you understand the function.

57
00:03:03,245 --> 00:03:06,500
And the stub is like a piece of scaffolding

58
00:03:06,500 --> 00:03:09,540
that we're going to put in place for a short period of time.

59
00:03:09,540 --> 00:03:12,400
It's going to help us with some other parts of our work.

60
00:03:12,400 --> 00:03:15,250
And then we'll end up commenting it out or later in the course,

61
00:03:15,250 --> 00:03:17,510
we'll just actually delete it.

62
00:03:17,510 --> 00:03:23,300
So it only lasts a short while, but it will do an important piece of work.

63
00:03:23,300 --> 00:03:26,270
What the stub has to be is a function definition

64
00:03:26,270 --> 00:03:28,460
that has the correct function name, in this case,

65
00:03:28,460 --> 00:03:32,490
double, has the correct number of parameters, in this case, one.

66
00:03:32,490 --> 00:03:34,390
I'll just call it n.

67
00:03:34,390 --> 00:03:38,000
And it produces a dummy result of the correct type.

68
00:03:38,000 --> 00:03:41,910
Since this function produces number, I'll make the stub produce zero,

69
00:03:41,910 --> 00:03:44,930
because zero is certainly a number.

70
00:03:44,930 --> 00:03:48,030
So now I'm going to write the examples in tests.

71
00:03:48,030 --> 00:03:53,800
We call them examples and tests, because they're going to serve both roles.

72
00:03:53,800 --> 00:03:56,300
What I mean by examples is that oftentimes, it's

73
00:03:56,300 --> 00:03:59,060
easier to design a general function if we

74
00:03:59,060 --> 00:04:05,040
start with some very specific examples of what it's going to do.

75
00:04:05,040 --> 00:04:09,340
So in this case, for example I might write check-expect

76
00:04:09,340 --> 00:04:16,450
that if I call double with an argument of three, then

77
00:04:16,450 --> 00:04:17,970
what I expect to get back is six.

78
00:04:17,970 --> 00:04:21,050


79
00:04:21,050 --> 00:04:28,200
And I'll also write check expect that if I call double with an argument of 4.2,

80
00:04:28,200 --> 00:04:31,629
I'll expect to get back 8.4.

81
00:04:31,629 --> 00:04:33,920
The reason I'm calling double with these two arguments,

82
00:04:33,920 --> 00:04:37,220
the reason I have two examples, is I've said here in the signature

83
00:04:37,220 --> 00:04:39,920
that the function consumes number.

84
00:04:39,920 --> 00:04:43,640
And by number I mean real numbers, integers, natural,

85
00:04:43,640 --> 00:04:45,334
all kinds of numbers.

86
00:04:45,334 --> 00:04:47,250
And so I'm going to put two examples here just

87
00:04:47,250 --> 00:04:49,600
to really illustrate that I don't just mean integers.

88
00:04:49,600 --> 00:04:53,659
The first example might lead you to think I just mean integers.

89
00:04:53,659 --> 00:04:56,950
We're going to talk a lot in the course about reasons to have multiple examples

90
00:04:56,950 --> 00:05:00,370
and how many examples are enough for a given function.

91
00:05:00,370 --> 00:05:04,710
But here's two examples for this function.

92
00:05:04,710 --> 00:05:06,950
Because I've wrapped them in check expect,

93
00:05:06,950 --> 00:05:09,652
they're also going to be able to serve as test.

94
00:05:09,652 --> 00:05:11,610
And we'll see shortly how they're going to help

95
00:05:11,610 --> 00:05:15,520
us code the final body of the function.

96
00:05:15,520 --> 00:05:17,400
But first what we're going to do is make sure

97
00:05:17,400 --> 00:05:21,000
that the examples, that the check expects are well formed.

98
00:05:21,000 --> 00:05:24,170
And here's where the stub is going to help us.

99
00:05:24,170 --> 00:05:28,190
What I'm going to do now is I'm going to go ahead and run this program.

100
00:05:28,190 --> 00:05:31,750
And when Dr. Racket has a program that has check-expects in it, what

101
00:05:31,750 --> 00:05:37,180
it does is it runs the check-expects and it checks to see for each check-expect

102
00:05:37,180 --> 00:05:39,710
it will call double with three, and it checks

103
00:05:39,710 --> 00:05:42,690
to see whether the result is six.

104
00:05:42,690 --> 00:05:45,550
And then it will call double with 4.2 and checks

105
00:05:45,550 --> 00:05:48,240
to see where the result is 8.4.

106
00:05:48,240 --> 00:05:51,240
And if the result isn't what it's supposed to be,

107
00:05:51,240 --> 00:05:55,810
then Dr. Racket reports that the test failed.

108
00:05:55,810 --> 00:05:57,890
Now in this case both tests failed.

109
00:05:57,890 --> 00:05:59,660
And I'm very happy.

110
00:05:59,660 --> 00:06:03,470
The reason I'm very happy is both tests actually ran.

111
00:06:03,470 --> 00:06:05,850
Here's what the stub is doing for us.

112
00:06:05,850 --> 00:06:10,460
It's letting us make sure that the tests actually run.

113
00:06:10,460 --> 00:06:13,290
They're going to fail, because the stub always produces zero,

114
00:06:13,290 --> 00:06:16,520
and that's not the right answer for these cases.

115
00:06:16,520 --> 00:06:18,810
But we're going to know that they ran.

116
00:06:18,810 --> 00:06:21,200
And you'll see later as programs start to get big

117
00:06:21,200 --> 00:06:24,110
that making sure all your tests are well formed

118
00:06:24,110 --> 00:06:27,910
before you get further along in the process is a good thing to do,

119
00:06:27,910 --> 00:06:32,430
because the sooner you find a mistake the easier it is to fix.

120
00:06:32,430 --> 00:06:33,280
So here we go.

121
00:06:33,280 --> 00:06:37,540
Both of these tests ran, and they failed, and I'm really happy.

122
00:06:37,540 --> 00:06:40,350
I want to take a minute here to make an important general point

123
00:06:40,350 --> 00:06:42,130
about the recipe.

124
00:06:42,130 --> 00:06:44,540
And that is that every step of the recipe

125
00:06:44,540 --> 00:06:48,870
is intended to help with all the steps after it.

126
00:06:48,870 --> 00:06:51,431
For example, the signature helps us write the purpose,

127
00:06:51,431 --> 00:06:54,180
because the signature tells us that the function consumes a number

128
00:06:54,180 --> 00:06:55,310
and produces a number.

129
00:06:55,310 --> 00:06:57,960


130
00:06:57,960 --> 00:07:01,950
Similarly, the signature helps us write the stub,

131
00:07:01,950 --> 00:07:05,420
because the signature says the function consumes a single argument

132
00:07:05,420 --> 00:07:07,740
so this function has one parameter.

133
00:07:07,740 --> 00:07:10,100
It's a number that's why I called it n.

134
00:07:10,100 --> 00:07:12,000
It also tells us that the function produces

135
00:07:12,000 --> 00:07:18,870
a number, that's why I chose zero as the dummy value for the stub to produce.

136
00:07:18,870 --> 00:07:22,020
The signature also helps us write the check expects.

137
00:07:22,020 --> 00:07:26,090
It tells us that this function, when I sit there right check expects double,

138
00:07:26,090 --> 00:07:28,240
and then I ask myself what to put it.

139
00:07:28,240 --> 00:07:31,650
Well, the signature tells me, put a number.

140
00:07:31,650 --> 00:07:34,460
And then when I try to write the expected value,

141
00:07:34,460 --> 00:07:37,270
the signature says that it's a number, and the purpose

142
00:07:37,270 --> 00:07:45,670
tells me exactly how that number relates to the argument in the example call.

143
00:07:45,670 --> 00:07:48,150
The key thing is when you're trying to figure out

144
00:07:48,150 --> 00:07:51,770
what to write at one step of the recipe, look at what you wrote

145
00:07:51,770 --> 00:07:53,270
at the previous steps of the recipe.

146
00:07:53,270 --> 00:07:57,110
That's how the recipe is helping you, is it's letting you slowly build up

147
00:07:57,110 --> 00:08:01,480
the knowledge you need to design the final function.

148
00:08:01,480 --> 00:08:03,630
The next step of the recipe is the template

149
00:08:03,630 --> 00:08:07,110
or sometimes called the inventory.

150
00:08:07,110 --> 00:08:10,670
Starting next week, we're going to get richer and richer templates.

151
00:08:10,670 --> 00:08:13,495
But for this week, the template is going to be quite simple.

152
00:08:13,495 --> 00:08:15,660
The template is a function with the right function

153
00:08:15,660 --> 00:08:17,930
name and the right parameter.

154
00:08:17,930 --> 00:08:21,210
And for this week, the body of the template is just going to be (...n.

155
00:08:21,210 --> 00:08:24,650


156
00:08:24,650 --> 00:08:28,280
the way we're going to read that is we're going to read that as saying,

157
00:08:28,280 --> 00:08:32,350
hey, the outline of this function is that it's

158
00:08:32,350 --> 00:08:36,220
going to do something-- that's what the dots mean-- is do something.

159
00:08:36,220 --> 00:08:39,580
It's going to do something with the parameter n.

160
00:08:39,580 --> 00:08:42,970
That's the role of the template is to give us the outline of the function.

161
00:08:42,970 --> 00:08:45,390


162
00:08:45,390 --> 00:08:47,473
What we're going to do here is label the template.

163
00:08:47,473 --> 00:08:50,380


164
00:08:50,380 --> 00:08:53,350
And now we'll make a copy of it.

165
00:08:53,350 --> 00:08:57,430
Put the copy here or remove the label from the copy,

166
00:08:57,430 --> 00:09:00,499
and I'll comment out the original template.

167
00:09:00,499 --> 00:09:02,290
What you're going to do later in the course

168
00:09:02,290 --> 00:09:05,730
is you're not actually going to keep a copy of the template.

169
00:09:05,730 --> 00:09:08,010
What we've found for the first few weeks of the course

170
00:09:08,010 --> 00:09:11,320
that it helps to keep a copy of the stub and template around.

171
00:09:11,320 --> 00:09:14,600
And that's why that's what I'm doing here.

172
00:09:14,600 --> 00:09:16,010
There is the template.

173
00:09:16,010 --> 00:09:20,560
It's the outline of the final function definition.

174
00:09:20,560 --> 00:09:22,372
Now I'm going to code the function body.

175
00:09:22,372 --> 00:09:24,080
In this step, I'm going to use everything

176
00:09:24,080 --> 00:09:29,490
I've written before to help me know how to finish the function body.

177
00:09:29,490 --> 00:09:33,480
One thing that's useful to do sometimes is elaborate the examples.

178
00:09:33,480 --> 00:09:37,870
So in this example, I know the double of 4.2 is 8.4,

179
00:09:37,870 --> 00:09:41,850
but what I'm going to do now is make it more clear to me why that's true.

180
00:09:41,850 --> 00:09:46,820
The reason that's true is that it's times 2 of 4.2.

181
00:09:46,820 --> 00:09:50,280
And now all at once, I know exactly how to finish this function body.

182
00:09:50,280 --> 00:09:53,205
It's just times 2 of n, whatever n is.

183
00:09:53,205 --> 00:09:58,300


184
00:09:58,300 --> 00:10:01,390
The last step is to run the tests.

185
00:10:01,390 --> 00:10:04,950
So I run the test here, and I get both tests pass,

186
00:10:04,950 --> 00:10:07,280
which makes me pretty happy.

187
00:10:07,280 --> 00:10:11,570
We'll see examples later about what to do when the tests don't pass.

188
00:10:11,570 --> 00:10:15,210
Now you've seen the HTDF design recipe used twice

189
00:10:15,210 --> 00:10:18,230
to design the same simple function.

190
00:10:18,230 --> 00:10:21,050
In the last video, I went through it quite quickly.

191
00:10:21,050 --> 00:10:23,490
And in this video, I went through it in slow motion

192
00:10:23,490 --> 00:10:27,275
where I talked in detail about each step.

193
00:10:27,275 --> 00:10:29,400
At this point, you should be starting to understand

194
00:10:29,400 --> 00:10:33,720
what to do at each step of the design recipe.

195
00:10:33,720 --> 00:10:36,430
If you don't necessarily feel comfortable with it,

196
00:10:36,430 --> 00:10:39,970
then I would suggest that you take a blank editor tab

197
00:10:39,970 --> 00:10:44,290
and rework the process of designing the function from this video

198
00:10:44,290 --> 00:10:47,260
on your own step by step.

199
00:10:47,260 --> 00:10:51,410
But when you do it, do be sure to have the HTDF design recipe

200
00:10:51,410 --> 00:10:53,790
page from the website open.

201
00:10:53,790 --> 00:10:58,490
Use that as a reference whenever you're using the HTDF design recipe.

202
00:10:58,490 --> 00:11:01,480
Our goal is not for you to memorize the recipe.

203
00:11:01,480 --> 00:11:04,680
Our goal is for you to learn how to use it as a resource

204
00:11:04,680 --> 00:11:08,510
in designing increasingly more complicated functions.

205
00:11:08,510 --> 00:11:09,710



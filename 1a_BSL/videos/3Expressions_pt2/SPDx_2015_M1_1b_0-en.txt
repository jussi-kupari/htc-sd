
GREGOR KICZALES: Let me just quickly show you how I think about it.
Given the formula, I know that I need to square 3, and I need to square 4,
and I need to add those together, and I need
to take the square root of that whole thing.
And if I run that, I get 5.
Sure enough.
Let me say a word here about math.
The Pythagorean theorem here is pretty much
the hardest math we're going to do in this whole course.
And that's important because you need to know that to design a lot of programs,
you don't need to know a lot of math.
You can be a very good program designer without knowing a lot of math.
There are certain kinds of programs, programs
in graphics or vision or machine learning,
where you do need to know a lot of math.
That's because you need to understand that domain.
We won't do a lot of math in this course, though.
The Pythagorean theorem here is about the hardest we'll do.
There is, however, one little detail I need to tell you.
A little bit more math, and then we'll go on.
If I take the square root of 2 and run that-- look at this funny thing
Racket is telling me that I see.
Why is that?
Well, you may know that the square root of 2 is an irrational number.
And what it means to be an irrational number
is that it takes infinite space to write the number down.
Well, computers are not infinite in size.
They're quite finite in size.
So it has no way of representing a number that
takes infinite space to write it down.
So what this means-- this sharp sign "I" and a number means
it's an inexact number.
It's telling you that the number is pretty close to this number
here, but not exactly.
And you may see numbers like that crop up.
Don't worry about it.
It'll usually come up in some kinds of graphic programs,
and you won't be able to see the difference between the two numbers
anyways.

OK.
Now you've seen how to write expressions that operate on numbers.
At this point you should have a pretty good sense
of how to write such expressions, and an intuitive understanding
of what they're going to evaluate to.
In the next video, we're going to look at the more precise rules
that Racket uses for evaluating them.
You may wonder at this point are there more primitives that
operate on numbers?
And the answer is that there are lots, lots, and lots and lots.
Far more than you could hope to learn at this point.
But if you want to discover some of those primitives,
I suggest you jump ahead to the video on discovering
primitives that comes later this week.
Of course, it's also fine to just stick with the primitives we learn now-- plus
and times and minus and square and square root.

0
00:00:00,000 --> 00:00:04,880


1
00:00:04,880 --> 00:00:08,210
GREGOR KICZALES: In this video, I'm going to talk about functions.

2
00:00:08,210 --> 00:00:11,356
Functions are the mechanism in the beginning student language

3
00:00:11,356 --> 00:00:13,480
that's going to let you write programs that produce

4
00:00:13,480 --> 00:00:15,650
a different value each time they run.

5
00:00:15,650 --> 00:00:19,760
Right now our programs are always producing the same value.

6
00:00:19,760 --> 00:00:22,000
So functions are incredibly important and powerful.

7
00:00:22,000 --> 00:00:24,482
And they're going to form the bulk of our programs.

8
00:00:24,482 --> 00:00:26,190
But I think what you're going to see here

9
00:00:26,190 --> 00:00:29,330
in a few minutes is that, in the beginning student language,

10
00:00:29,330 --> 00:00:32,900
functions are not too difficult to learn.

11
00:00:32,900 --> 00:00:36,270
We're starting to be able to build up some interesting results.

12
00:00:36,270 --> 00:00:41,470
For example here, by using above and circle three times,

13
00:00:41,470 --> 00:00:43,580
I can write an expression which, when I run it,

14
00:00:43,580 --> 00:00:45,710
produces this little traffic light.

15
00:00:45,710 --> 00:00:47,960
Or at least it's sort of like a North American traffic

16
00:00:47,960 --> 00:00:50,610
light except that too many lights are on.

17
00:00:50,610 --> 00:00:54,190
But let's look at this expression a bit.

18
00:00:54,190 --> 00:00:57,800
It's easy to be bothered by the amount of redundancy in it.

19
00:00:57,800 --> 00:01:01,770
Notice that in this expression all of these parts are unchanging.

20
00:01:01,770 --> 00:01:06,090
In the three calls to circle, these parts are unchanging.

21
00:01:06,090 --> 00:01:11,610
Only this part here is changing in each of these calls to circle.

22
00:01:11,610 --> 00:01:13,065
And it's easy to be worried.

23
00:01:13,065 --> 00:01:16,700
Gosh, if programs get big, and a lot of them

24
00:01:16,700 --> 00:01:20,970
are sort of duplicated code like this, that seems needless.

25
00:01:20,970 --> 00:01:24,214
That seems like it's going to be cumbersome.

26
00:01:24,214 --> 00:01:26,130
And it would be cumbersome and it is needless.

27
00:01:26,130 --> 00:01:27,880
There's a mechanism that's going to let us

28
00:01:27,880 --> 00:01:31,330
prevent that call function definitions.

29
00:01:31,330 --> 00:01:34,010
So what are function definitions and how do they work?

30
00:01:34,010 --> 00:01:37,220
Well, you actually already understand a lot about function definitions.

31
00:01:37,220 --> 00:01:39,011
You just have to remember your grade school

32
00:01:39,011 --> 00:01:42,850
math in which you learned that you could write mathematical functions like this.

33
00:01:42,850 --> 00:01:48,030
For example, here is f of x that equals 2 times x.

34
00:01:48,030 --> 00:01:52,410
And that means that f of 2 is 2 times 2 is 4.

35
00:01:52,410 --> 00:01:55,136
Or f of 6 is 2 times 6 is 12.

36
00:01:55,136 --> 00:01:57,010
What's going on in these function definitions

37
00:01:57,010 --> 00:01:58,960
is that x, which is called the parameter,

38
00:01:58,960 --> 00:02:03,690
stands for the varying value, and then the rest of the function definition

39
00:02:03,690 --> 00:02:08,190
is the unchanging value, the two times in this case.

40
00:02:08,190 --> 00:02:12,650
And then the function can use any number of times with a different value

41
00:02:12,650 --> 00:02:13,590
each time.

42
00:02:13,590 --> 00:02:17,340
Or even sometimes it can be used with the same value as before.

43
00:02:17,340 --> 00:02:22,180
And each time the parameter will take on the changing value

44
00:02:22,180 --> 00:02:26,070
and you'll get the result of the function with that value.

45
00:02:26,070 --> 00:02:28,210
So how is this going to work for us?

46
00:02:28,210 --> 00:02:31,670
The beginning student language has a function definition mechanism

47
00:02:31,670 --> 00:02:33,000
and it works like this.

48
00:02:33,000 --> 00:02:37,602
I'm going to write define open paren the name of a function.

49
00:02:37,602 --> 00:02:39,310
In our functions, we're not going to have

50
00:02:39,310 --> 00:02:41,980
to use single character names like x.

51
00:02:41,980 --> 00:02:44,240
I'm going to call this function bulb.

52
00:02:44,240 --> 00:02:49,260
And the name of a parameter, which in this case I'll call c.

53
00:02:49,260 --> 00:02:51,810
And then I'm going to write that the body of the function

54
00:02:51,810 --> 00:02:57,856
is circle 40 solid and then c.

55
00:02:57,856 --> 00:03:01,940
And what's going to happen here, just like in the mathematical functions,

56
00:03:01,940 --> 00:03:06,240
is that the parameter c is going to stand for the changing value.

57
00:03:06,240 --> 00:03:09,340
And the body of the function is going to use that parameter in the place

58
00:03:09,340 --> 00:03:11,610
where it wants to use the changing value.

59
00:03:11,610 --> 00:03:14,300
And now I can show you how this function works.

60
00:03:14,300 --> 00:03:20,949
If I write open paren Bulb and then say purple, this is a call to the function.

61
00:03:20,949 --> 00:03:23,490
Intuitively, you could think of that the body of the function

62
00:03:23,490 --> 00:03:27,850
was evaluated with c taking on the value purple.

63
00:03:27,850 --> 00:03:30,850
In a minute I'll show you the exact evaluation rules,

64
00:03:30,850 --> 00:03:34,270
but for now you could think of it intuitively that way.

65
00:03:34,270 --> 00:03:37,920
Now that I have the bulb function I can clean this up some.

66
00:03:37,920 --> 00:03:43,530
Let me just take this whole thing, and for now I'll just comment it out.

67
00:03:43,530 --> 00:03:46,120
I'm going to get rid of this bulb purple because that was just

68
00:03:46,120 --> 00:03:47,495
for demonstration.

69
00:03:47,495 --> 00:03:54,040
And I'll rewrite the original expression we had this way.

70
00:03:54,040 --> 00:03:57,690
And then when I run the program, I get the same result as before.

71
00:03:57,690 --> 00:04:00,260
Now, this expression at the end is much more concise

72
00:04:00,260 --> 00:04:02,310
than the original expression.

73
00:04:02,310 --> 00:04:04,030
It reduces the duplication.

74
00:04:04,030 --> 00:04:07,602
And also by choosing a nice name here, by choosing the name bulb,

75
00:04:07,602 --> 00:04:09,060
I give the code a bit more meaning.

76
00:04:09,060 --> 00:04:12,900
I can now think of these as three bulbs, one on top of the other.

77
00:04:12,900 --> 00:04:14,760
And what we would do now in a real program

78
00:04:14,760 --> 00:04:19,529
is we'd go ahead and completely get rid of this commented out stuff.

79
00:04:19,529 --> 00:04:22,920
And just because I think it looks better because these bulbs are

80
00:04:22,920 --> 00:04:27,500
one on top the other, I would probably format this above that way.

81
00:04:27,500 --> 00:04:30,740
And now I've got something that's nice and concise, and it's clear for me

82
00:04:30,740 --> 00:04:33,100
to understand what it's doing.



GREGOR KICZALES: In this video, I'm going to talk about functions.
Functions are the mechanism in the beginning student language
that's going to let you write programs that produce
a different value each time they run.
Right now our programs are always producing the same value.
So functions are incredibly important and powerful.
And they're going to form the bulk of our programs.
But I think what you're going to see here
in a few minutes is that, in the beginning student language,
functions are not too difficult to learn.
We're starting to be able to build up some interesting results.
For example here, by using above and circle three times,
I can write an expression which, when I run it,
produces this little traffic light.
Or at least it's sort of like a North American traffic
light except that too many lights are on.
But let's look at this expression a bit.
It's easy to be bothered by the amount of redundancy in it.
Notice that in this expression all of these parts are unchanging.
In the three calls to circle, these parts are unchanging.
Only this part here is changing in each of these calls to circle.
And it's easy to be worried.
Gosh, if programs get big, and a lot of them
are sort of duplicated code like this, that seems needless.
That seems like it's going to be cumbersome.
And it would be cumbersome and it is needless.
There's a mechanism that's going to let us
prevent that call function definitions.
So what are function definitions and how do they work?
Well, you actually already understand a lot about function definitions.
You just have to remember your grade school
math in which you learned that you could write mathematical functions like this.
For example, here is f of x that equals 2 times x.
And that means that f of 2 is 2 times 2 is 4.
Or f of 6 is 2 times 6 is 12.
What's going on in these function definitions
is that x, which is called the parameter,
stands for the varying value, and then the rest of the function definition
is the unchanging value, the two times in this case.
And then the function can use any number of times with a different value
each time.
Or even sometimes it can be used with the same value as before.
And each time the parameter will take on the changing value
and you'll get the result of the function with that value.
So how is this going to work for us?
The beginning student language has a function definition mechanism
and it works like this.
I'm going to write define open paren the name of a function.
In our functions, we're not going to have
to use single character names like x.
I'm going to call this function bulb.
And the name of a parameter, which in this case I'll call c.
And then I'm going to write that the body of the function
is circle 40 solid and then c.
And what's going to happen here, just like in the mathematical functions,
is that the parameter c is going to stand for the changing value.
And the body of the function is going to use that parameter in the place
where it wants to use the changing value.
And now I can show you how this function works.
If I write open paren Bulb and then say purple, this is a call to the function.
Intuitively, you could think of that the body of the function
was evaluated with c taking on the value purple.
In a minute I'll show you the exact evaluation rules,
but for now you could think of it intuitively that way.
Now that I have the bulb function I can clean this up some.
Let me just take this whole thing, and for now I'll just comment it out.
I'm going to get rid of this bulb purple because that was just
for demonstration.
And I'll rewrite the original expression we had this way.
And then when I run the program, I get the same result as before.
Now, this expression at the end is much more concise
than the original expression.
It reduces the duplication.
And also by choosing a nice name here, by choosing the name bulb,
I give the code a bit more meaning.
I can now think of these as three bulbs, one on top of the other.
And what we would do now in a real program
is we'd go ahead and completely get rid of this commented out stuff.
And just because I think it looks better because these bulbs are
one on top the other, I would probably format this above that way.
And now I've got something that's nice and concise, and it's clear for me
to understand what it's doing.
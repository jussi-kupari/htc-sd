0
00:00:00,000 --> 00:00:04,409


1
00:00:04,409 --> 00:00:06,200
GREGOR KICZALES: Here's a question for you.

2
00:00:06,200 --> 00:00:09,090
How many natural numbers are there?

3
00:00:09,090 --> 00:00:10,450
Put it this way.

4
00:00:10,450 --> 00:00:15,020
If I'm using a natural number to represent your position in line,

5
00:00:15,020 --> 00:00:16,653
how big could that be?

6
00:00:16,653 --> 00:00:17,152
One?

7
00:00:17,152 --> 00:00:17,651
10?

8
00:00:17,651 --> 00:00:19,820
A thousand?

9
00:00:19,820 --> 00:00:23,430
That's a pretty long lineup, but it could be.

10
00:00:23,430 --> 00:00:27,420
The answer is that there's an arbitrary number of natural numbers.

11
00:00:27,420 --> 00:00:30,760
We just don't know how big it could be.

12
00:00:30,760 --> 00:00:33,180
And what that tells us is that we ought to be

13
00:00:33,180 --> 00:00:36,370
able to design a well-formed self-referential data

14
00:00:36,370 --> 00:00:39,270
definition for natural numbers.

15
00:00:39,270 --> 00:00:42,850
And what that tells us is we ought to be able to design a lot of functions

16
00:00:42,850 --> 00:00:46,200
on natural numbers really easily.

17
00:00:46,200 --> 00:00:48,431
That's what we're going to do in this video.

18
00:00:48,431 --> 00:00:51,180
First, I need to tell you about a primitive function in racket you

19
00:00:51,180 --> 00:00:53,860
might not have seen yet called add one.

20
00:00:53,860 --> 00:01:00,660
Let's see 0 is 0 Add 1 of 0 is 1.

21
00:01:00,660 --> 00:01:07,720
And add 1 of add 1 of 0 is 2.

22
00:01:07,720 --> 00:01:08,760
And so on.

23
00:01:08,760 --> 00:01:13,300
So add 1 takes a natural number and adds 1 to it.

24
00:01:13,300 --> 00:01:16,580
And there's another function, sub 1.

25
00:01:16,580 --> 00:01:20,090
If I take sub 1 of 2, I get 1.

26
00:01:20,090 --> 00:01:27,820
If i take sub 1 of sub 1 of 2, I get 0.

27
00:01:27,820 --> 00:01:31,920
In a funny kind of way, add 1 is a little bit like cons.

28
00:01:31,920 --> 00:01:36,570
Cons takes a short list and gives you a list 1 longer.

29
00:01:36,570 --> 00:01:39,190
And sub 1 is a little bit like rest.

30
00:01:39,190 --> 00:01:46,800
Rest takes a list that's at least 1 long and gives you a list that's 1 shorter.

31
00:01:46,800 --> 00:01:50,050
So think of add 1 as building a natural number up

32
00:01:50,050 --> 00:01:52,420
to the next biggest natural number.

33
00:01:52,420 --> 00:01:57,140
And think of sub 1 as taking a natural number down

34
00:01:57,140 --> 00:02:00,320
to the next smallest natural number.

35
00:02:00,320 --> 00:02:03,410
I'm in natural starter dot racket.

36
00:02:03,410 --> 00:02:07,780
And what I have here is a self-referential data definition

37
00:02:07,780 --> 00:02:09,100
for natural.

38
00:02:09,100 --> 00:02:12,210
Previously, we took the type natural to be primitive.

39
00:02:12,210 --> 00:02:15,710
Now we're giving a definition for that type.

40
00:02:15,710 --> 00:02:19,000
And it says, look a natural is 1 of 0.

41
00:02:19,000 --> 00:02:21,080
That's the base case for natural, right?

42
00:02:21,080 --> 00:02:22,870
That's the smallest natural.

43
00:02:22,870 --> 00:02:25,400
Or it's add 1 of natural.

44
00:02:25,400 --> 00:02:31,290
So, if you look at the examples, example n0 is 0.

45
00:02:31,290 --> 00:02:34,310
And natural 1 is add 1 of n0.

46
00:02:34,310 --> 00:02:36,170
That's 1.

47
00:02:36,170 --> 00:02:39,122
And add 1 of n1 is 2.

48
00:02:39,122 --> 00:02:40,830
And I think you could clearly see here, I

49
00:02:40,830 --> 00:02:44,690
can get a natural number as big as I want this way.

50
00:02:44,690 --> 00:02:48,400
This well-formed self-referential data definition

51
00:02:48,400 --> 00:02:53,140
will let me build up to as big a natural number as I want.

52
00:02:53,140 --> 00:02:57,520
But I also have to be able to take a natural number back apart.

53
00:02:57,520 --> 00:02:59,520
And I already told you how that's going to work.

54
00:02:59,520 --> 00:03:01,550
Add 1 makes it bigger.

55
00:03:01,550 --> 00:03:04,660
Sub 1 is going to make it smaller.

56
00:03:04,660 --> 00:03:06,800
So now let's look at the template.

57
00:03:06,800 --> 00:03:11,910
Template rules used, it starts with a 1 of in two cases.

58
00:03:11,910 --> 00:03:14,210
So that got me the cond.

59
00:03:14,210 --> 00:03:17,410
The first case is atomic distinct 0.

60
00:03:17,410 --> 00:03:24,550
There is a predicate 0 question mark in BSL that tests whether a number is 0.

61
00:03:24,550 --> 00:03:29,030
So that got me the 0 question mark and the dot dot dot.

62
00:03:29,030 --> 00:03:31,890
And then, as I said, there's kind of this funny compound,

63
00:03:31,890 --> 00:03:37,700
this kind of funny cons like thing, add 1, that takes a natural

64
00:03:37,700 --> 00:03:40,430
and makes the next biggest natural.

65
00:03:40,430 --> 00:03:42,350
So I'm treating this is as a compound.

66
00:03:42,350 --> 00:03:45,530
But it's a funny compound because there isn't first and rest.

67
00:03:45,530 --> 00:03:47,560
There's just rest.

68
00:03:47,560 --> 00:03:50,430
There's just sub 1.

69
00:03:50,430 --> 00:03:55,220
So there is the self-reference because once I stripped the add 1 off

70
00:03:55,220 --> 00:03:58,650
with sub 1, I'm left with a natural.

71
00:03:58,650 --> 00:04:01,460
So that's the self-reference in this type comment.

72
00:04:01,460 --> 00:04:03,890
That's the self-reference rule.

73
00:04:03,890 --> 00:04:05,910
And the presence of that self-reference is

74
00:04:05,910 --> 00:04:10,867
why there's a natural recursion here in the template function.

75
00:04:10,867 --> 00:04:13,450
Now, I've got a little bit of the template commented out here.

76
00:04:13,450 --> 00:04:15,830
Just ignore that for now.

77
00:04:15,830 --> 00:04:18,410
The part that's not commented out is what the template rules

78
00:04:18,410 --> 00:04:21,050
are telling us to produce.

79
00:04:21,050 --> 00:04:24,510
So now we've got the type comment, the well-formed self-referential type

80
00:04:24,510 --> 00:04:26,182
comment, and we've got a template.

81
00:04:26,182 --> 00:04:28,390
Let's design some functions that operate on naturals.

82
00:04:28,390 --> 00:04:31,410


83
00:04:31,410 --> 00:04:35,173
Let's see, the first one is a function that consumes natural.

84
00:04:35,173 --> 00:04:38,010


85
00:04:38,010 --> 00:04:45,010
And it produces the sum of the natural, up to and including n.

86
00:04:45,010 --> 00:04:46,860
Let's see.

87
00:04:46,860 --> 00:04:50,030
That's going to be a natural, because if you add up any number of naturals

88
00:04:50,030 --> 00:04:51,940
you get a natural.

89
00:04:51,940 --> 00:05:00,420
Produce some of natural 0 and inclusive.

90
00:05:00,420 --> 00:05:03,870


91
00:05:03,870 --> 00:05:09,910
Define, we'll call it sum n and the stub is 0.

92
00:05:09,910 --> 00:05:10,540
Let's see.

93
00:05:10,540 --> 00:05:11,340
Check expect.

94
00:05:11,340 --> 00:05:13,930
This is a self-referential data definition.

95
00:05:13,930 --> 00:05:19,630
So our first check expect should be for the base case, which is 0.

96
00:05:19,630 --> 00:05:21,885
The sum of 0 to 0 is 0.

97
00:05:21,885 --> 00:05:26,150


98
00:05:26,150 --> 00:05:30,590
We need one that's at least 2 long, in this case, 2 long means at least 2

99
00:05:30,590 --> 00:05:31,160
in size.

100
00:05:31,160 --> 00:05:34,750
But let's just do some of 1 for now.

101
00:05:34,750 --> 00:05:38,623
If I add up 0 and 1, that's 1.

102
00:05:38,623 --> 00:05:44,430


103
00:05:44,430 --> 00:05:47,970
Let's do 3 now.

104
00:05:47,970 --> 00:05:53,830
So let's see, if I add 0, 1, 2, and 3, that's that.

105
00:05:53,830 --> 00:05:56,150
Which is 6.

106
00:05:56,150 --> 00:05:58,742
There's some good check expects.

107
00:05:58,742 --> 00:06:00,200
They fail, but they're well-formed.

108
00:06:00,200 --> 00:06:03,370


109
00:06:03,370 --> 00:06:10,800
Let's get this template, copy it down, and I'll

110
00:06:10,800 --> 00:06:13,640
take this part that isn't supposed to be there out.

111
00:06:13,640 --> 00:06:20,230
We'll rename the template, rename the natural recursion.

112
00:06:20,230 --> 00:06:21,200
And let's see.

113
00:06:21,200 --> 00:06:24,170
What am I supposed to do here?

114
00:06:24,170 --> 00:06:26,090
The base case result is 0.

115
00:06:26,090 --> 00:06:29,780


116
00:06:29,780 --> 00:06:33,280
And what does sum do?

117
00:06:33,280 --> 00:06:37,210
Well, these I actually kind of put in the wrong order, didn't I?

118
00:06:37,210 --> 00:06:41,570
This really happens in the other order because we start with the big end,

119
00:06:41,570 --> 00:06:42,910
and we go down.

120
00:06:42,910 --> 00:06:46,746
So this is really 3, 2, 1, 0.

121
00:06:46,746 --> 00:06:50,120
The natural recursion, in this particular case,

122
00:06:50,120 --> 00:06:58,050
the natural recursion is going to be the sum of plus 2, 1, and 0.

123
00:06:58,050 --> 00:07:01,570
That's going to be the natural recursion.

124
00:07:01,570 --> 00:07:03,880
So what do I have to do with the natural recursion

125
00:07:03,880 --> 00:07:05,850
in order to get the result I want?

126
00:07:05,850 --> 00:07:09,420


127
00:07:09,420 --> 00:07:10,360
Oh, I see.

128
00:07:10,360 --> 00:07:12,390
I have to add.

129
00:07:12,390 --> 00:07:17,110
And then there's something missing from the template, which is actually n.

130
00:07:17,110 --> 00:07:18,320
I need n.

131
00:07:18,320 --> 00:07:20,230
I'm allowed to add it to the template.

132
00:07:20,230 --> 00:07:25,610
Remember, a template is a skeleton of what you have available.

133
00:07:25,610 --> 00:07:29,660
In this case, the template didn't show us that we have the entire n available.

134
00:07:29,660 --> 00:07:33,270
But we do have it available.

135
00:07:33,270 --> 00:07:35,550
Let's try it.

136
00:07:35,550 --> 00:07:38,460
Well, 3 tests passed.

137
00:07:38,460 --> 00:07:40,362
OK, let's do the other one.

138
00:07:40,362 --> 00:07:44,390
What we need to do is design a function that consumes natural number, n,

139
00:07:44,390 --> 00:07:51,080
and produces a list of all the naturals of the form cons n, cons n minus 1,

140
00:07:51,080 --> 00:07:55,270
all the way down to empty, but doesn't include 0.

141
00:07:55,270 --> 00:07:55,770
OK?

142
00:07:55,770 --> 00:07:57,390
Let's do that.

143
00:07:57,390 --> 00:07:59,490
Consume natural.

144
00:07:59,490 --> 00:08:03,400
Produce list of natural.

145
00:08:03,400 --> 00:08:06,210
I'm not going to do a data definition for list of natural

146
00:08:06,210 --> 00:08:08,650
because we're producing it, not consuming it.

147
00:08:08,650 --> 00:08:10,922
So I don't need the template for it.

148
00:08:10,922 --> 00:08:13,630
I think you could produce the data definition for list of natural

149
00:08:13,630 --> 00:08:15,130
if you wanted to do it right now.

150
00:08:15,130 --> 00:08:19,760
It's not necessarily needed for a simple list type that we're going to produce.

151
00:08:19,760 --> 00:08:28,860
So produce cons and cons n minus 1, all the way down to empty.

152
00:08:28,860 --> 00:08:33,230
Not including 0.

153
00:08:33,230 --> 00:08:41,600
To find we'll call it 2 list, n, it'll produce empty as its stub.

154
00:08:41,600 --> 00:08:43,039
Let's do some examples.

155
00:08:43,039 --> 00:08:51,190
Well, again, we'll start with the base case.

156
00:08:51,190 --> 00:08:53,385
Whoops, not 2 list of empty it consumes natural.

157
00:08:53,385 --> 00:08:55,220
It produces empty.

158
00:08:55,220 --> 00:08:57,500
So let's see, 2 list of 0.

159
00:08:57,500 --> 00:09:01,390
It's not supposed to include the 0, the base case.

160
00:09:01,390 --> 00:09:04,020
0 is the base case, but we don't include it.

161
00:09:04,020 --> 00:09:06,541
We'll produce empty.

162
00:09:06,541 --> 00:09:08,540
Gee, that's kind of funny what's going on there.

163
00:09:08,540 --> 00:09:11,590
Let's do the next one, just to be sure we have a clear in our mind.

164
00:09:11,590 --> 00:09:14,004
2 list of 1.

165
00:09:14,004 --> 00:09:14,670
Well, let's see.

166
00:09:14,670 --> 00:09:17,540
We're never supposed to include 0 in the result.

167
00:09:17,540 --> 00:09:21,680
But there's nothing that says we're not supposed to include 1 in the result.

168
00:09:21,680 --> 00:09:25,660
So this looks to me like it should be cons, 1, and empty.

169
00:09:25,660 --> 00:09:31,000
And that makes sense because the next number after 1 will be 0.

170
00:09:31,000 --> 00:09:33,060
That's going to produce empty.

171
00:09:33,060 --> 00:09:38,020
So its cons 1 onto the result of the natural recursion empty.

172
00:09:38,020 --> 00:09:40,000
That looks pretty good.

173
00:09:40,000 --> 00:09:42,920
The rule is we have to do one that's at least 2 long, though.

174
00:09:42,920 --> 00:09:43,820
So let's do that.

175
00:09:43,820 --> 00:09:49,060
2 list of 2 is cons 2 cons 1 empty.

176
00:09:49,060 --> 00:09:51,825


177
00:09:51,825 --> 00:09:54,690
That looks pretty good.

178
00:09:54,690 --> 00:09:56,740
Let's run them to be sure they're well-formed.

179
00:09:56,740 --> 00:10:00,620
They fail, so they're well-formed.

180
00:10:00,620 --> 00:10:04,250
We'll go up here and get the template again.

181
00:10:04,250 --> 00:10:06,430
Command E let's me see more space.

182
00:10:06,430 --> 00:10:09,744


183
00:10:09,744 --> 00:10:12,660
I'll take out this part that the template's not opposed to have in it.

184
00:10:12,660 --> 00:10:16,770


185
00:10:16,770 --> 00:10:21,920
I rename the template and the natural recursion.

186
00:10:21,920 --> 00:10:28,160
Let's see, the base case result is empty.

187
00:10:28,160 --> 00:10:31,220
And what's the result in the case of recursion?

188
00:10:31,220 --> 00:10:32,390
Well, I'm supposed to cons.

189
00:10:32,390 --> 00:10:36,900


190
00:10:36,900 --> 00:10:41,360
This is always-- that's the natural recursion in the case of 1.

191
00:10:41,360 --> 00:10:44,750
That's the result of the natural recursion case of 2.

192
00:10:44,750 --> 00:10:49,500
So I'm supposed to cons the current number itself

193
00:10:49,500 --> 00:10:50,715
onto the natural recursion.

194
00:10:50,715 --> 00:10:53,570


195
00:10:53,570 --> 00:10:55,740
Run that, and it works.

196
00:10:55,740 --> 00:10:57,740
Oops, I forgot to comment out the stub.

197
00:10:57,740 --> 00:11:01,130


198
00:11:01,130 --> 00:11:04,360
All six tests pass.

199
00:11:04,360 --> 00:11:07,610
Now at this point, having done two of these-- or maybe after I

200
00:11:07,610 --> 00:11:09,400
wait till I've done 10 of them.

201
00:11:09,400 --> 00:11:13,730
But if you do 10 of them, you'll see that it's always

202
00:11:13,730 --> 00:11:17,270
nice to have the actual, natural number.

203
00:11:17,270 --> 00:11:20,480
So even though the template rules themselves didn't put it

204
00:11:20,480 --> 00:11:26,820
in the template, what I'm going to do now is go back to the template

205
00:11:26,820 --> 00:11:40,560
and put it in, along with a note that says, template rules don't put this in.

206
00:11:40,560 --> 00:11:43,860


207
00:11:43,860 --> 00:11:53,440
But it seems to be used a lot, so we added it.

208
00:11:53,440 --> 00:11:55,850
The key thing that happened in this video

209
00:11:55,850 --> 00:12:01,340
is we had this insight that there's an arbitrary number of natural numbers.

210
00:12:01,340 --> 00:12:04,560
So that means a well-formed self-referential data definition

211
00:12:04,560 --> 00:12:08,410
should describe the natural numbers.

212
00:12:08,410 --> 00:12:13,056
So that produced a template with a natural recursion in it.

213
00:12:13,056 --> 00:12:16,600
And once we had that template for the natural recursion,

214
00:12:16,600 --> 00:12:22,337
these functions actually were super easy to write.

215
00:12:22,337 --> 00:12:24,420
So have some fun writing some more these functions

216
00:12:24,420 --> 00:12:26,085
that operate on natural numbers.

217
00:12:26,085 --> 00:12:29,210
I think you'll find that they go pretty quickly because the template really

218
00:12:29,210 --> 00:12:32,120
gets you almost all the way there.


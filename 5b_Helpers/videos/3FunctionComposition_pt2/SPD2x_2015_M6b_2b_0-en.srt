0
00:00:00,000 --> 00:00:01,100


1
00:00:01,100 --> 00:00:06,150
GREGOR KICZALES: Here's my solution for the list of image data definition.

2
00:00:06,150 --> 00:00:09,260
It's an ordinary, self-referential data definition

3
00:00:09,260 --> 00:00:12,090
of the kind we saw previously.

4
00:00:12,090 --> 00:00:16,170
There's two cases-- the base case and the self-reference case.

5
00:00:16,170 --> 00:00:19,200
And I've got an example of the empty list,

6
00:00:19,200 --> 00:00:24,110
as well as an example of a list that has a couple images in it.

7
00:00:24,110 --> 00:00:26,240
There's the template.

8
00:00:26,240 --> 00:00:29,630
This week you're allowed to not start including template rules used.

9
00:00:29,630 --> 00:00:32,240
That means you don't have to write the template rules used.

10
00:00:32,240 --> 00:00:35,670
So I'm not going to write the template rules used.

11
00:00:35,670 --> 00:00:38,760
But as you read it, I think you can go through the template rules used

12
00:00:38,760 --> 00:00:40,830
in your mind fairly quickly.

13
00:00:40,830 --> 00:00:42,530
It's a one of with two cases.

14
00:00:42,530 --> 00:00:44,830
So there's a two case con.

15
00:00:44,830 --> 00:00:46,680
First case is atomic distinct empty.

16
00:00:46,680 --> 00:00:50,700
We have the usual empty LOI dot dot dot.

17
00:00:50,700 --> 00:00:56,960
And then there's a cons of a primitive type image-- so we just have first LOI.

18
00:00:56,960 --> 00:01:02,455
There's no call to a natural helper-- and the natural recursion.

19
00:01:02,455 --> 00:01:03,080
So there we go.

20
00:01:03,080 --> 00:01:04,288
There's that data definition.

21
00:01:04,288 --> 00:01:06,500


22
00:01:06,500 --> 00:01:10,554
Now, let's get on to designing the functions.

23
00:01:10,554 --> 00:01:12,595
We'll make another part of file called functions.

24
00:01:12,595 --> 00:01:15,340


25
00:01:15,340 --> 00:01:18,090
And we're supposed to design a function called arrange images that

26
00:01:18,090 --> 00:01:19,930
consumes an arbitrary number of images.

27
00:01:19,930 --> 00:01:22,790
So that means it consumes list of image.

28
00:01:22,790 --> 00:01:26,380
And it produces an image in which they're all laid out left to right.

29
00:01:26,380 --> 00:01:29,290
And that's going to produce a single image

30
00:01:29,290 --> 00:01:35,675
where all the images are laid out left to right at increasing order of size.

31
00:01:35,675 --> 00:01:36,800
So what does it have to do?

32
00:01:36,800 --> 00:01:49,460
It has to lay out the images the left to right in increasing order of size.

33
00:01:49,460 --> 00:01:57,110
OK, so a good stub for this function is just define, arrange, images, LOI.

34
00:01:57,110 --> 00:01:59,350
And the good stub is blank.

35
00:01:59,350 --> 00:02:03,050
By this point, we've seen that these functions that produce images often

36
00:02:03,050 --> 00:02:06,220
use blank both in their stub and in their base case.

37
00:02:06,220 --> 00:02:15,730
SO I'm going to go ahead and make a constant for it--

38
00:02:15,730 --> 00:02:21,550
square, 0, solid, white.

39
00:02:21,550 --> 00:02:24,690
Now I've got a constant I can use here in this stub.

40
00:02:24,690 --> 00:02:30,030


41
00:02:30,030 --> 00:02:30,790
I want everything.

42
00:02:30,790 --> 00:02:33,530
My stub is well formed.

43
00:02:33,530 --> 00:02:35,070
Let's do some check expectancy.

44
00:02:35,070 --> 00:02:40,320
Check expect arrange images empty-- well,

45
00:02:40,320 --> 00:02:44,275
if I ask you to arrange an empty list of images then

46
00:02:44,275 --> 00:02:45,650
that's just going to prove blank.

47
00:02:45,650 --> 00:02:49,390


48
00:02:49,390 --> 00:02:54,830
And let's see, we want to do one for a non-empty list.

49
00:02:54,830 --> 00:02:58,040
It should be at least two long.

50
00:02:58,040 --> 00:03:00,080
Let's see, we need to arrange images.

51
00:03:00,080 --> 00:03:04,690
And what I'm going to do is I'm going to use the same list that I defined up

52
00:03:04,690 --> 00:03:05,190
above.

53
00:03:05,190 --> 00:03:07,370
But I'm not going to refer to it as a constant.

54
00:03:07,370 --> 00:03:09,920
And I'll tell you why I'm going to do that,

55
00:03:09,920 --> 00:03:15,540
which is it's going to make it easier for me to understand my check expect

56
00:03:15,540 --> 00:03:22,090
as an example if I actually include the full calls to rectangle

57
00:03:22,090 --> 00:03:25,390
here, because I really understand what I'm seeing.

58
00:03:25,390 --> 00:03:28,010
So now let's see, if I need to rearrange those images left

59
00:03:28,010 --> 00:03:33,890
to right in increasing order of size, well, the area of this image is 200,

60
00:03:33,890 --> 00:03:36,910
and the area of this image is 600, so they already

61
00:03:36,910 --> 00:03:39,920
are in increasing order of size.

62
00:03:39,920 --> 00:03:47,720
So I think this is going to be beside of this rectangle, then

63
00:03:47,720 --> 00:03:52,470
this rectangle in also blank.

64
00:03:52,470 --> 00:03:55,320


65
00:03:55,320 --> 00:03:57,880
Now, you might ask, why are you putting the blank there?

66
00:03:57,880 --> 00:04:01,440
If the blank is blank, in other words it's nothing that you see,

67
00:04:01,440 --> 00:04:06,695
then it doesn't really make sense to put it there, because it's blank.

68
00:04:06,695 --> 00:04:08,570
Well, that's true, but the reason I'm putting

69
00:04:08,570 --> 00:04:12,270
the blank there is remember check expects

70
00:04:12,270 --> 00:04:15,770
are examples before they're tests.

71
00:04:15,770 --> 00:04:22,089
And by putting the blank there, I'm kind of reminding myself, what gets built up

72
00:04:22,089 --> 00:04:27,010
is the blank from the empty and then the other two images.

73
00:04:27,010 --> 00:04:28,650
That's why I'm putting the blank there.

74
00:04:28,650 --> 00:04:31,610
It's to make it clear myself not just what

75
00:04:31,610 --> 00:04:37,550
the actual, final image is, but in some sense why it's the image that it is.

76
00:04:37,550 --> 00:04:39,170
We'll run it.

77
00:04:39,170 --> 00:04:40,580
They fail, but their well formed.

78
00:04:40,580 --> 00:04:43,070
That's great.

79
00:04:43,070 --> 00:04:44,815
Now, I'm going to get the template.

80
00:04:44,815 --> 00:04:48,530


81
00:04:48,530 --> 00:04:50,820
I'm going to put the template in.

82
00:04:50,820 --> 00:04:51,710
I'll rename it.

83
00:04:51,710 --> 00:04:54,330


84
00:04:54,330 --> 00:04:56,360
I'll rename the natural recursion.

85
00:04:56,360 --> 00:04:58,650
I'll comment out the stub.

86
00:04:58,650 --> 00:05:00,710
And now, I'm going to think for a moment.

87
00:05:00,710 --> 00:05:03,710
And what I'm going to do is I'm going to go back and reread the purpose.

88
00:05:03,710 --> 00:05:08,610
And the purpose says, layout images left to right in increasing order of size.

89
00:05:08,610 --> 00:05:11,140


90
00:05:11,140 --> 00:05:13,090
Now, What does that mean?

91
00:05:13,090 --> 00:05:15,950
Well, if I think about it for a minute, what

92
00:05:15,950 --> 00:05:29,030
it means is sort images in increasing order of size and then lay them out

93
00:05:29,030 --> 00:05:32,040
left to right.

94
00:05:32,040 --> 00:05:34,740
Really what I have to do to make this problem work is first

95
00:05:34,740 --> 00:05:37,230
I have to take the entire list of images,

96
00:05:37,230 --> 00:05:41,000
and I have to sort that entire list.

97
00:05:41,000 --> 00:05:46,600
And then I have to lay those out left to right with beside.

98
00:05:46,600 --> 00:05:51,110
I can't really go through the images one at a time and sort each image

99
00:05:51,110 --> 00:05:52,670
and lay each image out.

100
00:05:52,670 --> 00:05:54,840
The sorting has to be done to the whole list

101
00:05:54,840 --> 00:05:58,360
and then the layout has to be done to the whole list.

102
00:05:58,360 --> 00:06:01,550
This is what's called a function composition problem.

103
00:06:01,550 --> 00:06:03,840
And if we go to design recipes page, there's

104
00:06:03,840 --> 00:06:06,556
a special entry for function composition.

105
00:06:06,556 --> 00:06:09,340
And it says that you use function composition

106
00:06:09,340 --> 00:06:13,770
when a function must perform two or more distinct and complete operations

107
00:06:13,770 --> 00:06:16,160
on the consume data.

108
00:06:16,160 --> 00:06:18,800
For example, and it has this example-- that's convenient--

109
00:06:18,800 --> 00:06:22,870
a function that must sort and lay out a list of images.

110
00:06:22,870 --> 00:06:24,690
I won't read through the page now.

111
00:06:24,690 --> 00:06:27,640
You should do that afterwards very carefully.

112
00:06:27,640 --> 00:06:32,610
But what happens in function composition is that we discard the entire template.

113
00:06:32,610 --> 00:06:36,680


114
00:06:36,680 --> 00:06:46,846
And we replace it with a function composition, such as this one.

115
00:06:46,846 --> 00:06:49,240
And it's called a function composition because what

116
00:06:49,240 --> 00:06:54,870
it says it says first sort the entire list-- first call

117
00:06:54,870 --> 00:06:57,060
sort images to sort the entire list.

118
00:06:57,060 --> 00:07:00,430
Then take the result of that and call out images on it

119
00:07:00,430 --> 00:07:02,800
to lay out the entire list.

120
00:07:02,800 --> 00:07:05,990
So the functions happen one after another, each

121
00:07:05,990 --> 00:07:08,260
on the output of the previous function.

122
00:07:08,260 --> 00:07:10,950
So this is a two function composition.

123
00:07:10,950 --> 00:07:14,110
You could also have problems that had three or four or five functions.

124
00:07:14,110 --> 00:07:17,360
They tend to be weighted more towards the smaller number.

125
00:07:17,360 --> 00:07:20,660
This is a two function composition.

126
00:07:20,660 --> 00:07:23,840
Now, of course, I've wish for some functions that don't exist yet.

127
00:07:23,840 --> 00:07:26,570
So I better do wish list entries.

128
00:07:26,570 --> 00:07:33,750
Let's see, layout images consumes list of image and produces image.

129
00:07:33,750 --> 00:07:43,952
Place images beside each other in order of list-- it's a wish list entry,

130
00:07:43,952 --> 00:07:44,660
so we'll do that.

131
00:07:44,660 --> 00:07:51,790


132
00:07:51,790 --> 00:07:55,130
And it's got to produce some image.

133
00:07:55,130 --> 00:07:58,600
So that's the wish list entry for layout images.

134
00:07:58,600 --> 00:08:00,070
Let's look at sort of images.

135
00:08:00,070 --> 00:08:02,840
Well, sort images consumes a list of image.

136
00:08:02,840 --> 00:08:06,100


137
00:08:06,100 --> 00:08:07,790
And it produces a list of image.

138
00:08:07,790 --> 00:08:10,790


139
00:08:10,790 --> 00:08:16,145
Sort images in increasing order of size.

140
00:08:16,145 --> 00:08:19,340


141
00:08:19,340 --> 00:08:20,340
It's a wish list entry.

142
00:08:20,340 --> 00:08:27,577


143
00:08:27,577 --> 00:08:29,410
Now this is a function that produces a list.

144
00:08:29,410 --> 00:08:31,930


145
00:08:31,930 --> 00:08:35,789
So we could put just empty as the stub here.

146
00:08:35,789 --> 00:08:40,240
What I'm going to do instead of putting empty is I'm going to put LOI.

147
00:08:40,240 --> 00:08:44,720
Because I know that when the stub is called, LOI will be list of image.

148
00:08:44,720 --> 00:08:48,780
And so if I produce LOI, I know I'll be producing list of image.

149
00:08:48,780 --> 00:08:52,170
And you'll see a little bit later that this slightly different stub,

150
00:08:52,170 --> 00:08:55,920
this slightly more clever stub, actually helps us

151
00:08:55,920 --> 00:08:58,460
in seeing how the program is coming together.

152
00:08:58,460 --> 00:09:01,750
So I'm putting that as my stub.

153
00:09:01,750 --> 00:09:05,560
Now that I've set up these wish lists and I

154
00:09:05,560 --> 00:09:07,677
know this is a function composition function,

155
00:09:07,677 --> 00:09:10,260
there's one more thing I have to do which is I have to go back

156
00:09:10,260 --> 00:09:13,960
and think about these tests one more time.

157
00:09:13,960 --> 00:09:15,305
And here's why.

158
00:09:15,305 --> 00:09:18,590
If the function is a function composition function,

159
00:09:18,590 --> 00:09:22,290
then the test for it have to make sure that it's

160
00:09:22,290 --> 00:09:24,720
composing the functions properly.

161
00:09:24,720 --> 00:09:28,220
They don't have to exhaustively test the individual functions.

162
00:09:28,220 --> 00:09:31,390
The tests for layout images will test layout images.

163
00:09:31,390 --> 00:09:34,630
And the test for sort images will test sort images.

164
00:09:34,630 --> 00:09:37,530
The test for arrange images have to make sure

165
00:09:37,530 --> 00:09:42,290
that arrange images is calling layout images and stored images properly.

166
00:09:42,290 --> 00:09:45,120
One thing this means is that when you go to function composition,

167
00:09:45,120 --> 00:09:46,850
you don't need to test the base case.

168
00:09:46,850 --> 00:09:50,030


169
00:09:50,030 --> 00:09:53,290
But another thing it means is that because this function is supposed

170
00:09:53,290 --> 00:09:58,460
to both sort and arrange, this test isn't good enough

171
00:09:58,460 --> 00:10:04,200
because a version of this function that just did the rendering would work,

172
00:10:04,200 --> 00:10:06,560
because these are already in the right order.

173
00:10:06,560 --> 00:10:08,400
So I need a second test.

174
00:10:08,400 --> 00:10:13,080
I need at least one more test in which I make sure.

175
00:10:13,080 --> 00:10:15,400
I'll just swap these two rectangles around.

176
00:10:15,400 --> 00:10:21,110


177
00:10:21,110 --> 00:10:23,740
And I want to swap them down here.

178
00:10:23,740 --> 00:10:26,400
Because the point is that what arrange images needs to do

179
00:10:26,400 --> 00:10:30,200
is call sort images to rearrange these in the right order

180
00:10:30,200 --> 00:10:32,170
and then present them.

181
00:10:32,170 --> 00:10:35,200
So now I feel like I really tested that arrange images is

182
00:10:35,200 --> 00:10:38,565
doing both jobs, both the sorting and laying out.

183
00:10:38,565 --> 00:10:41,710
At this point, you're basically done with arrange images.

184
00:10:41,710 --> 00:10:44,790
If you ran it, the test would run but fail.

185
00:10:44,790 --> 00:10:48,482
The reason they would run is because we have the wish list entries.

186
00:10:48,482 --> 00:10:50,190
But they would fail because the wish list

187
00:10:50,190 --> 00:10:54,730
entries aren't doing the proper thing for either of these functions.

188
00:10:54,730 --> 00:10:57,940
So to recap this video, remember the first part of the week

189
00:10:57,940 --> 00:11:01,320
is about more rules for helper functions, more rules

190
00:11:01,320 --> 00:11:06,520
for went to split one function into multiple other functions.

191
00:11:06,520 --> 00:11:12,230
In this video, what we saw is the function composition rule,

192
00:11:12,230 --> 00:11:18,450
which says that we should use a function composition when a single function must

193
00:11:18,450 --> 00:11:24,020
perform two or more complete operations on the entire consume data.

194
00:11:24,020 --> 00:11:27,680
So in this case, for example, we have to sort the list of images

195
00:11:27,680 --> 00:11:29,950
and then lay out the list of images.

196
00:11:29,950 --> 00:11:32,849
That's a function composition problem.

197
00:11:32,849 --> 00:11:34,765
So what I'm going to do with this picture here

198
00:11:34,765 --> 00:11:37,490
is I'm going to keep updating it through the next several videos

199
00:11:37,490 --> 00:11:43,050
to show how we've broken the original problem of doing arrange images down

200
00:11:43,050 --> 00:11:48,150
into multiple functions and which rule we used at each point.

201
00:11:48,150 --> 00:11:51,680
When we start to get into bigger programs, lots of programmers

202
00:11:51,680 --> 00:11:54,510
keep an actual pad of paper by their desks

203
00:11:54,510 --> 00:11:57,210
to kind of keep track of where they are in something.

204
00:11:57,210 --> 00:11:59,440
The wish list entries are good for that.

205
00:11:59,440 --> 00:12:03,100
But some notes and pieces of paper like this are good for it too.

206
00:12:03,100 --> 00:12:06,210
There's also a professional programming environments like Eclipse

207
00:12:06,210 --> 00:12:08,950
that can help you in some ways draw pictures like this

208
00:12:08,950 --> 00:12:11,240
to keep track of where you are as well.

209
00:12:11,240 --> 00:12:14,370
That's something you can learn about in another course.

210
00:12:14,370 --> 00:12:15,003



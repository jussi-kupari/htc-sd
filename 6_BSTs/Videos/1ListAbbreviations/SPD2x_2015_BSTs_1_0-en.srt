0
00:00:00,000 --> 00:00:06,710


1
00:00:06,710 --> 00:00:08,540
GREGOR KICZALES: It's graduation day.

2
00:00:08,540 --> 00:00:11,220
We're going to move from the beginning student language

3
00:00:11,220 --> 00:00:13,810
to the next most advanced language.

4
00:00:13,810 --> 00:00:14,880
It isn't a big move.

5
00:00:14,880 --> 00:00:16,550
But it's a good move.

6
00:00:16,550 --> 00:00:20,820
The way you do it is you go into the lower corner of DrRacket here.

7
00:00:20,820 --> 00:00:27,350
And you switch from beginning student to beginning student

8
00:00:27,350 --> 00:00:29,600
with list abbreviations.

9
00:00:29,600 --> 00:00:32,439
Now, what are list abbreviations?

10
00:00:32,439 --> 00:00:35,120
Well, by this point you've probably got a little annoyed

11
00:00:35,120 --> 00:00:40,550
at having to write something like cons a, cons b, cons c,

12
00:00:40,550 --> 00:00:45,340
empty, when all you really wanted to do was make a list of three items--

13
00:00:45,340 --> 00:00:47,820
a, b, and c.

14
00:00:47,820 --> 00:00:51,620
And what list abbreviations do is they let you write that

15
00:00:51,620 --> 00:00:56,490
more compactly as just list a, b, c.

16
00:00:56,490 --> 00:00:59,400


17
00:00:59,400 --> 00:01:02,140
Now, lists created with the list primitive

18
00:01:02,140 --> 00:01:06,570
are exactly like lists created with cons.

19
00:01:06,570 --> 00:01:08,990
That's a list of three elements.

20
00:01:08,990 --> 00:01:12,860
If I run this now, what you'll see is that because I've

21
00:01:12,860 --> 00:01:16,710
turned on the list abbreviations language,

22
00:01:16,710 --> 00:01:23,460
Racket shows me the value of this expression using list notation.

23
00:01:23,460 --> 00:01:28,000
And it also shows me the value of this expression using list notation.

24
00:01:28,000 --> 00:01:30,030
So you could still construct list with cons.

25
00:01:30,030 --> 00:01:33,880
And in many cases, you'll still want to construct them with cons.

26
00:01:33,880 --> 00:01:37,260
But you could also construct them with list.

27
00:01:37,260 --> 00:01:41,460
And Racket's always going to show them to you with list.

28
00:01:41,460 --> 00:01:47,380
Now, just like cons, list is a primitive for constructing lists.

29
00:01:47,380 --> 00:01:52,480
And it's a notation Racket uses for presenting list values.

30
00:01:52,480 --> 00:02:04,020
And so, for example, you can say list plus 1 2, plus 3 4, plus 5 6.

31
00:02:04,020 --> 00:02:08,190
So this is a call to the list primitive with three operands.

32
00:02:08,190 --> 00:02:12,150
When you run that, you'll get back list 3 7 11

33
00:02:12,150 --> 00:02:15,795
because those operands are reduced to values before the list is created.

34
00:02:15,795 --> 00:02:18,650
And so what you see is a list with the values.

35
00:02:18,650 --> 00:02:23,430
Now, an important point here, which is that when you construct

36
00:02:23,430 --> 00:02:28,100
lists one at a time in a function, you're still going to want to use cons.

37
00:02:28,100 --> 00:02:30,160
And let me show you why.

38
00:02:30,160 --> 00:02:46,680
Suppose I say, define L1 is list b c, and define L2 is list d e f.

39
00:02:46,680 --> 00:02:47,440
And I'll run that.

40
00:02:47,440 --> 00:02:49,600
And now I've got those two definitions.

41
00:02:49,600 --> 00:02:50,350
Now watch this.

42
00:02:50,350 --> 00:03:02,900
If I say, cons a on to L1, that produces the value I probably wanted,

43
00:03:02,900 --> 00:03:07,300
which was to take the list L1 and add an a to the front.

44
00:03:07,300 --> 00:03:16,000
On the other hand, if I say list a L1, that doesn't produce the value I want.

45
00:03:16,000 --> 00:03:20,120
That produces a list in which the first element is a.

46
00:03:20,120 --> 00:03:24,380
And the second element is the value of L1, which is some other list.

47
00:03:24,380 --> 00:03:27,260
So I get a funny list here that has a as its first element,

48
00:03:27,260 --> 00:03:30,610
and a list as its second element.

49
00:03:30,610 --> 00:03:33,750
I'm not saying you can't have lists with lists in them.

50
00:03:33,750 --> 00:03:36,500
Sometimes that's exactly what you want.

51
00:03:36,500 --> 00:03:39,900
All I'm saying here is, watch out.

52
00:03:39,900 --> 00:03:44,570
When you're trying to add one element to a list, you use cons.

53
00:03:44,570 --> 00:03:46,245
You don't use list.

54
00:03:46,245 --> 00:03:52,260
You use list when you're trying to make a fully formed list all at once.

55
00:03:52,260 --> 00:03:55,980
So, for example, you might want to say, list L1, list L2.

56
00:03:55,980 --> 00:03:58,380
That would be a perfectly reasonable thing to say.

57
00:03:58,380 --> 00:04:03,589
And, conceivably, even this middle thing would be a reasonable thing to say.

58
00:04:03,589 --> 00:04:05,630
But, usually, when you write something like that,

59
00:04:05,630 --> 00:04:07,005
you're going to want to use cons.

60
00:04:07,005 --> 00:04:09,200


61
00:04:09,200 --> 00:04:12,200
Let me show you one other list primitive that sometimes is quite useful.

62
00:04:12,200 --> 00:04:13,000
It's called append.

63
00:04:13,000 --> 00:04:17,690


64
00:04:17,690 --> 00:04:19,610
And it consumes two lists.

65
00:04:19,610 --> 00:04:25,070
And what it does-- let me comment these things out.

66
00:04:25,070 --> 00:04:29,390


67
00:04:29,390 --> 00:04:31,420
Append consumes two lists.

68
00:04:31,420 --> 00:04:36,510
And what it does is it produces a single list by adding the two lists together.

69
00:04:36,510 --> 00:04:38,580
So it's kind of like string append.

70
00:04:38,580 --> 00:04:42,670
It contains all the elements of L1, followed by all the elements of L2.

71
00:04:42,670 --> 00:04:45,640


72
00:04:45,640 --> 00:04:49,353
Now, one final thing about list notation rather than cons

73
00:04:49,353 --> 00:04:52,600
notation-- if you find list notation confusing,

74
00:04:52,600 --> 00:04:54,784
you don't have to start using it right away.

75
00:04:54,784 --> 00:04:55,700
We're going to use it.

76
00:04:55,700 --> 00:04:57,420
So you need to be able to read it.

77
00:04:57,420 --> 00:05:10,230
It's still perfectly fine for you to write that list that way,

78
00:05:10,230 --> 00:05:18,200
instead of that way.

79
00:05:18,200 --> 00:05:21,905


80
00:05:21,905 --> 00:05:22,905
They both mean the same.

81
00:05:22,905 --> 00:05:24,110
They're both correct.

82
00:05:24,110 --> 00:05:28,290
We think most of you will soon find it more convenient to use list notation.

83
00:05:28,290 --> 00:05:32,170
But cons notation is still perfectly valid.

84
00:05:32,170 --> 00:05:36,070
There's a few exercises to come up now to help test your understanding of list

85
00:05:36,070 --> 00:05:39,050
notation, and in particular to test the issue of when

86
00:05:39,050 --> 00:05:42,330
to use cons to add something to a list.

87
00:05:42,330 --> 00:05:43,724



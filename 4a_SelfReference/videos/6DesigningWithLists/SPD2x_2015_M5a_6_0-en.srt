0
00:00:00,000 --> 00:00:04,067


1
00:00:04,067 --> 00:00:06,650
GREGOR KICZALES: So now I'm going to work through a few design

2
00:00:06,650 --> 00:00:08,944
problems involving lists.

3
00:00:08,944 --> 00:00:10,860
As always, when I work through these problems,

4
00:00:10,860 --> 00:00:14,550
there is going to be some parts of it that are pretty familiar, things

5
00:00:14,550 --> 00:00:16,424
that you'll already know how to do.

6
00:00:16,424 --> 00:00:20,470
And then there will be parts that are about the new list material.

7
00:00:20,470 --> 00:00:23,280
So what I recommend you do and in fact, I've

8
00:00:23,280 --> 00:00:28,550
said this before, I always recommend you do this, is get the starter file

9
00:00:28,550 --> 00:00:30,840
and work through it with me.

10
00:00:30,840 --> 00:00:35,530
And now, in these problems, you might even try stopping the video for a bit

11
00:00:35,530 --> 00:00:38,240
and working ahead and then starting the video

12
00:00:38,240 --> 00:00:41,080
and comparing what you did to what I did.

13
00:00:41,080 --> 00:00:44,100
Again, that's always a good idea.

14
00:00:44,100 --> 00:00:47,890
But don't worry about it if you get stuck and need to start the video.

15
00:00:47,890 --> 00:00:50,390
After all, these are really the first list design

16
00:00:50,390 --> 00:00:52,540
problems that I've asked you to do.

17
00:00:52,540 --> 00:00:54,490
So you should expect it to take some time

18
00:00:54,490 --> 00:00:58,060
to master this new part of the recipe.

19
00:00:58,060 --> 00:01:03,213
There's a three-part problem here having to do with all the owls in the owlery.

20
00:01:03,213 --> 00:01:05,129
First, there's a data definition problem where

21
00:01:05,129 --> 00:01:09,590
we need to design a data definition to represent the weights of all the owls

22
00:01:09,590 --> 00:01:14,920
and then we're going to design two functions that operate on that data.

23
00:01:14,920 --> 00:01:16,880
As I go through this, and really whenever

24
00:01:16,880 --> 00:01:20,520
you're working on a design problem, you should have a copy of the design

25
00:01:20,520 --> 00:01:23,740
recipe pages opened up and maybe off to the side

26
00:01:23,740 --> 00:01:26,922
next to your Dr. Racket window.

27
00:01:26,922 --> 00:01:29,280
So let me start first by dividing my file

28
00:01:29,280 --> 00:01:31,349
into two parts, one part for data definitions

29
00:01:31,349 --> 00:01:32,640
and one part for the functions.

30
00:01:32,640 --> 00:01:37,740


31
00:01:37,740 --> 00:01:39,820
And now let's get to the data definition.

32
00:01:39,820 --> 00:01:44,290
Let's see, we're going to represent the weight of all the owls in the owlery.

33
00:01:44,290 --> 00:01:46,780
We don't know how many owls there's going to be,

34
00:01:46,780 --> 00:01:48,640
so we need arbitrary size data, so we need

35
00:01:48,640 --> 00:01:52,270
a well-formed, self-referential data definition.

36
00:01:52,270 --> 00:01:52,890
Here we go.

37
00:01:52,890 --> 00:01:59,750
Listed number is one of either empty because that's the base case or conds

38
00:01:59,750 --> 00:02:04,430
number on list of number.

39
00:02:04,430 --> 00:02:07,150
That's the self-reference case there.

40
00:02:07,150 --> 00:02:09,750
For the interpretation, we'll say that each number in the list

41
00:02:09,750 --> 00:02:13,200
is an owl weight and with numbers, it's always good to say the units,

42
00:02:13,200 --> 00:02:17,620
so we'll say that's it's an owl weight in ounces.

43
00:02:17,620 --> 00:02:20,030
And let's see, we'll have a couple of examples.

44
00:02:20,030 --> 00:02:24,140
In one example, we always put the base case example first

45
00:02:24,140 --> 00:02:31,780
in the data examples, so we'll say LON 1 is empty and LON 2, I don't know,

46
00:02:31,780 --> 00:02:34,860
let's make it 2 LON and one owl will weigh 60 ounces

47
00:02:34,860 --> 00:02:38,580
and the other owl will weigh 42 ounces.

48
00:02:38,580 --> 00:02:40,730
Now, we'll do the template, fun for LON.

49
00:02:40,730 --> 00:02:47,074


50
00:02:47,074 --> 00:02:50,850
Let's see, the first rule is one of because there's two cases,

51
00:02:50,850 --> 00:02:54,610
so that gets us a cond with two cases.

52
00:02:54,610 --> 00:02:58,490
The second rule is atomic distinct for empty,

53
00:02:58,490 --> 00:03:00,970
so that gets us the empty question mark predicated

54
00:03:00,970 --> 00:03:05,000
and dot, dot, dot in the answer.

55
00:03:05,000 --> 00:03:07,595
Next we've got compound because the conds is a compound.

56
00:03:07,595 --> 00:03:10,380


57
00:03:10,380 --> 00:03:12,800
It's a conds of a number, which is each element

58
00:03:12,800 --> 00:03:16,135
of the list is a number and list of number, which is the self reference.

59
00:03:16,135 --> 00:03:18,840


60
00:03:18,840 --> 00:03:21,682
So in the template, we take apart the conds.

61
00:03:21,682 --> 00:03:27,230


62
00:03:27,230 --> 00:03:30,390
First of LON is just number, but rest of LON

63
00:03:30,390 --> 00:03:33,560
is self referenced, so the self reference rule comes in.

64
00:03:33,560 --> 00:03:40,640


65
00:03:40,640 --> 00:03:45,540
And we wrap rest of LON into a natural recursion

66
00:03:45,540 --> 00:03:50,260
we call to the very same template function.

67
00:03:50,260 --> 00:03:54,050
We run it, there's no errors, so it's well formed.

68
00:03:54,050 --> 00:03:55,600
We comment out the template.

69
00:03:55,600 --> 00:03:56,390
There we go.

70
00:03:56,390 --> 00:03:59,040
We've got the complete data definition.

71
00:03:59,040 --> 00:04:01,380
And again, because there's arbitrary size information,

72
00:04:01,380 --> 00:04:06,080
we need arbitrary size data, so there's a well-formed, self referential, tight

73
00:04:06,080 --> 00:04:11,130
comment and a natural recursion in the template.

74
00:04:11,130 --> 00:04:13,830
Now, let's go design the functions.

75
00:04:13,830 --> 00:04:17,769
Let's see, the first function is going to consume the weights of some owls

76
00:04:17,769 --> 00:04:20,890
and produced the total weight of all those owls.

77
00:04:20,890 --> 00:04:21,990
So let's see.

78
00:04:21,990 --> 00:04:26,310
It's going to consume list of number because that's the type that we're

79
00:04:26,310 --> 00:04:30,300
using to represent the weights of an arbitrary number of owls

80
00:04:30,300 --> 00:04:33,630
and it's going to produce, well, the weight of a number of owls

81
00:04:33,630 --> 00:04:36,755
is the sum of a bunch of numbers, so that's number.

82
00:04:36,755 --> 00:04:39,870


83
00:04:39,870 --> 00:04:52,970
Produce total weight of owls in consumed list.

84
00:04:52,970 --> 00:04:55,790
So we take a bunch of owls, we produce the total weight.

85
00:04:55,790 --> 00:05:02,650
The stub is defined, let's call this function sumLON

86
00:05:02,650 --> 00:05:05,380
and this stub will just produced 0.

87
00:05:05,380 --> 00:05:07,550
We'll call that the stub.

88
00:05:07,550 --> 00:05:10,030
Now, let's produce some examples.

89
00:05:10,030 --> 00:05:12,990
There's a rule that for functions operating on arbitrary-size data,

90
00:05:12,990 --> 00:05:16,470
the base case example should be first, so let's do that.

91
00:05:16,470 --> 00:05:21,710
Check expect sum of empty, well, the sum of the weights

92
00:05:21,710 --> 00:05:25,860
in an empty list of weights is 0.

93
00:05:25,860 --> 00:05:27,370
Let's do another example.

94
00:05:27,370 --> 00:05:30,570
We'll do an example with just a single owl in it.

95
00:05:30,570 --> 00:05:39,780
So let's say the sum of maybe a list of owls that has this 160-ounce owl in it

96
00:05:39,780 --> 00:05:40,360
is what?

97
00:05:40,360 --> 00:05:43,760
Well, that's 60 and this might be a good place

98
00:05:43,760 --> 00:05:45,830
to be a little bit more elaborate about it.

99
00:05:45,830 --> 00:05:51,120
The reason it's 60 is because it's 60 plus the sum

100
00:05:51,120 --> 00:05:55,730
of all the owls in the rest of the list, which in this case is empty.

101
00:05:55,730 --> 00:05:59,390
So it's really 60 because it's 60 plus 0.

102
00:05:59,390 --> 00:06:00,370
Let's do one more.

103
00:06:00,370 --> 00:06:04,620


104
00:06:04,620 --> 00:06:14,680
Sum of-- let's see conds 60, conds 42, and empty.

105
00:06:14,680 --> 00:06:16,080
Well, what's that going to be?

106
00:06:16,080 --> 00:06:26,600
Well, it's 60 plus the sum of the rest, which is 42,

107
00:06:26,600 --> 00:06:29,810
plus the sum of its rest, which is 0.

108
00:06:29,810 --> 00:06:32,060
You don't have to write that out like that, of course.

109
00:06:32,060 --> 00:06:37,770
You could just write it like this because that's clearly what it is,

110
00:06:37,770 --> 00:06:42,350
but by writing it the other way, I'm starting to think out in my mind,

111
00:06:42,350 --> 00:06:44,890
well, how is this going to work?

112
00:06:44,890 --> 00:06:51,260
I'm always going to add the first weight to the total all the other weights.

113
00:06:51,260 --> 00:06:53,580
Let me run those examples.

114
00:06:53,580 --> 00:06:55,500
They're well formed.

115
00:06:55,500 --> 00:06:56,715
I'll go and get the template.

116
00:06:56,715 --> 00:07:00,712


117
00:07:00,712 --> 00:07:02,660
I bring the template down.

118
00:07:02,660 --> 00:07:05,880
I comment out the stub.

119
00:07:05,880 --> 00:07:11,650
I rename the template and I'm especially careful to rename

120
00:07:11,650 --> 00:07:14,490
the natural recursion.

121
00:07:14,490 --> 00:07:15,340
Now, let's see.

122
00:07:15,340 --> 00:07:22,400
The sum of an empty list of weights is 0, otherwise,

123
00:07:22,400 --> 00:07:25,690
the sum of another list of weights, it looks like it

124
00:07:25,690 --> 00:07:31,250
whatever the first weight is plus the sum of the remaining weights

125
00:07:31,250 --> 00:07:34,010
or the sum of the rest of the list.

126
00:07:34,010 --> 00:07:39,740
So that's the first weight right there in this first example, for example.

127
00:07:39,740 --> 00:07:43,880
That's going to be 60.

128
00:07:43,880 --> 00:07:50,340
And again, in this first example here, that whole natural recursion

129
00:07:50,340 --> 00:07:55,750
is going to be 0, so now, I know what goes here.

130
00:07:55,750 --> 00:07:57,530
I just add these together.

131
00:07:57,530 --> 00:08:00,450
I add the first weight to the sum of the remaining weights.

132
00:08:00,450 --> 00:08:02,870
Let me get rid of these notes now.

133
00:08:02,870 --> 00:08:07,080


134
00:08:07,080 --> 00:08:08,890
All tests pass.

135
00:08:08,890 --> 00:08:12,070
Notice what I did is I trusted the natural recursion

136
00:08:12,070 --> 00:08:16,250
and I used the examples to help me think about what

137
00:08:16,250 --> 00:08:19,070
I did with the first item of the list and what

138
00:08:19,070 --> 00:08:22,060
I did with the result of the natural recursion.

139
00:08:22,060 --> 00:08:24,070
I don't ever let myself think about what I'm

140
00:08:24,070 --> 00:08:25,700
going to do with the rest of the list.

141
00:08:25,700 --> 00:08:28,240
What I think about is what am I going to do

142
00:08:28,240 --> 00:08:30,950
with the result of the natural recursion.

143
00:08:30,950 --> 00:08:33,710
So there's that function done.

144
00:08:33,710 --> 00:08:36,700
Let's now do the second function, which is

145
00:08:36,700 --> 00:08:39,549
design a function that consumes the weights of owls

146
00:08:39,549 --> 00:08:41,694
and produces the total number of owls.

147
00:08:41,694 --> 00:08:44,240


148
00:08:44,240 --> 00:08:45,060
So let's see.

149
00:08:45,060 --> 00:08:49,170
The signature is, it consumes the weight of an arbitrary number of owls,

150
00:08:49,170 --> 00:08:53,080
so that's represented as list of number.

151
00:08:53,080 --> 00:08:55,803
And it produces how many weights there are in the list,

152
00:08:55,803 --> 00:08:58,530
or how many owls are represented.

153
00:08:58,530 --> 00:09:00,150
Well, that's not number.

154
00:09:00,150 --> 00:09:02,880
That's a natural number because it's 0, 1, or 2.

155
00:09:02,880 --> 00:09:04,280
It's something like that.

156
00:09:04,280 --> 00:09:07,010
So that's natural.

157
00:09:07,010 --> 00:09:12,950
Reduce total number of weights in consumed list.

158
00:09:12,950 --> 00:09:15,810


159
00:09:15,810 --> 00:09:19,480
We'll call this function count.

160
00:09:19,480 --> 00:09:21,010
There's the stub.

161
00:09:21,010 --> 00:09:22,680
Now, let's do examples.

162
00:09:22,680 --> 00:09:27,820
Again, there's a rule that the base case should be first, so check expect,

163
00:09:27,820 --> 00:09:28,370
count.

164
00:09:28,370 --> 00:09:34,140
If I count the number of weights in an empty list of weights, that 0.

165
00:09:34,140 --> 00:09:35,140
Now, let's see.

166
00:09:35,140 --> 00:09:39,080
I can use the same examples as I used last time or different ones.

167
00:09:39,080 --> 00:09:46,550
Let's use different ones, check, expect count, conds 12, empty.

168
00:09:46,550 --> 00:09:48,860
Well, how many weights are there in that list?

169
00:09:48,860 --> 00:09:52,150
Well, there's just one, so I could just write 1

170
00:09:52,150 --> 00:09:54,680
or I can remind myself that the reason there's one

171
00:09:54,680 --> 00:09:59,500
is because there's one for the first weight in the list, the 12,

172
00:09:59,500 --> 00:10:04,301
and then there is 0 for the weights in the rest.

173
00:10:04,301 --> 00:10:05,550
So I could write it like that.

174
00:10:05,550 --> 00:10:08,060


175
00:10:08,060 --> 00:10:08,780
Let's see.

176
00:10:08,780 --> 00:10:16,900
Check, expect, count, conds 35, conds 12,

177
00:10:16,900 --> 00:10:23,880
empty, and here there is one for the 35 and then

178
00:10:23,880 --> 00:10:28,170
there's whatever is in the rest, which we already know is plus 1 and 0.

179
00:10:28,170 --> 00:10:31,270
I could write that like that.

180
00:10:31,270 --> 00:10:33,325
I'll run it and my tests are well formed.

181
00:10:33,325 --> 00:10:37,530


182
00:10:37,530 --> 00:10:39,060
So let me go get the template.

183
00:10:39,060 --> 00:10:46,050


184
00:10:46,050 --> 00:10:48,196
I will copy the template down.

185
00:10:48,196 --> 00:10:50,320
Let me give myself a little more room to work here.

186
00:10:50,320 --> 00:10:54,610
I'll copy the template down, I'll comment out the stub

187
00:10:54,610 --> 00:10:59,030
and then I'll rename the template and the natural recursion.

188
00:10:59,030 --> 00:11:00,010
Now, let's see.

189
00:11:00,010 --> 00:11:03,260
If I'm trying to count how many weights there are in an empty list of weights,

190
00:11:03,260 --> 00:11:06,330
well, that test and just intuition tells me that's 0.

191
00:11:06,330 --> 00:11:09,320


192
00:11:09,320 --> 00:11:12,790
And now, I'm trying to count the weights in a list that

193
00:11:12,790 --> 00:11:15,480
actually has elements in it.

194
00:11:15,480 --> 00:11:18,530
Well, the first weight, I don't really care what the first weight is.

195
00:11:18,530 --> 00:11:21,310
I just am counting the fact there is a weight.

196
00:11:21,310 --> 00:11:23,680
So that's going to be replaced by just one.

197
00:11:23,680 --> 00:11:25,910
That's what this is telling me here.

198
00:11:25,910 --> 00:11:32,990
In sum, we use the actual weight, so that stayed as first in LON.

199
00:11:32,990 --> 00:11:35,380
But in count, we're not using the actual weight,

200
00:11:35,380 --> 00:11:38,370
we're just using the existence of the weight.

201
00:11:38,370 --> 00:11:40,529
So we're going to put a 1 there.

202
00:11:40,529 --> 00:11:42,570
And now, I'm going to deliberately make a mistake

203
00:11:42,570 --> 00:11:47,438
because I want to show you something about the two long lists row.

204
00:11:47,438 --> 00:11:49,250
The mistake I'm going to make here is just

205
00:11:49,250 --> 00:11:53,230
make this be plus 1 and then I'll look at this

206
00:11:53,230 --> 00:12:00,692
and incorrectly decide to throw away the natural recursion and just put 0.

207
00:12:00,692 --> 00:12:08,770
And now I'll run it and when I run it, this test is passing.

208
00:12:08,770 --> 00:12:11,890


209
00:12:11,890 --> 00:12:16,200
It's only the test that's too long that's failing

210
00:12:16,200 --> 00:12:19,850
and that's why we have that rule about having a test for lists that

211
00:12:19,850 --> 00:12:23,390
are too long because if you make a mistake throwing out

212
00:12:23,390 --> 00:12:29,260
the natural recursion, then you're one long tests will often run properly.

213
00:12:29,260 --> 00:12:33,401
So now, let me go back and pretend I didn't make that mistake.

214
00:12:33,401 --> 00:12:35,500
I'll close this.

215
00:12:35,500 --> 00:12:38,810
I'll just back up a little bit to where I was about to make that mistake.

216
00:12:38,810 --> 00:12:41,290
Here I was.

217
00:12:41,290 --> 00:12:47,350
And now I say to myself, well, I add 1 to-- and now what do I do?

218
00:12:47,350 --> 00:12:49,600
I trust the natural recursion.

219
00:12:49,600 --> 00:12:53,070
The natural recursion will be the right answer for the rest of the list,

220
00:12:53,070 --> 00:12:54,400
so I'm just going to trust it.

221
00:12:54,400 --> 00:12:57,680
I add one to whatever it produces.

222
00:12:57,680 --> 00:13:00,850
I run and all six tests pass.

223
00:13:00,850 --> 00:13:02,929



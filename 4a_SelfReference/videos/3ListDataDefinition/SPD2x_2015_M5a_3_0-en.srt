0
00:00:00,000 --> 00:00:03,784


1
00:00:03,784 --> 00:00:05,700
GREGOR KICZALES: In the next few videos, we're

2
00:00:05,700 --> 00:00:08,100
going to learn how to design with lists.

3
00:00:08,100 --> 00:00:11,300
That's going to include changes to both the how-to-design functions

4
00:00:11,300 --> 00:00:14,334
and how-to-design data recipes.

5
00:00:14,334 --> 00:00:16,250
Now the way I'm going to present those changes

6
00:00:16,250 --> 00:00:21,710
is different than I used to originally cover those recipes.

7
00:00:21,710 --> 00:00:23,710
What I'm going to do is, starting in this video,

8
00:00:23,710 --> 00:00:28,320
is charge into a data design problem with lists.

9
00:00:28,320 --> 00:00:30,940
And when I get to a place that I don't know what to do,

10
00:00:30,940 --> 00:00:34,180
that the recipe doesn't already tell me what to do,

11
00:00:34,180 --> 00:00:35,960
I'm going to make a lucky guess.

12
00:00:35,960 --> 00:00:38,310
And it's all going to work out fantastically.

13
00:00:38,310 --> 00:00:41,090
I'll do that with the data recipe in this video.

14
00:00:41,090 --> 00:00:44,860
And I'll do it with the function recipe in the next video.

15
00:00:44,860 --> 00:00:48,440
And then in the third video, I'm going to go back and explain

16
00:00:48,440 --> 00:00:51,420
why those lucky guesses really were the right guesses.

17
00:00:51,420 --> 00:00:54,147
And formally include them into the recipes.

18
00:00:54,147 --> 00:00:57,230
So that you'll be able to design with lists systematically from that point

19
00:00:57,230 --> 00:00:57,960
on.

20
00:00:57,960 --> 00:01:00,270
This problem has to do with designing a program that's

21
00:01:00,270 --> 00:01:02,811
going to keep track of your favorite Quidditch teams.

22
00:01:02,811 --> 00:01:04,560
So we're going to design a data definition

23
00:01:04,560 --> 00:01:07,550
to represent a list of Quidditch teams.

24
00:01:07,550 --> 00:01:11,290
Remembering always that when we design data definitions, what we're doing

25
00:01:11,290 --> 00:01:14,880
is working out how to represent information as data.

26
00:01:14,880 --> 00:01:19,190
Let me just do a couple comment boxes here.

27
00:01:19,190 --> 00:01:24,010
And in this box, we'll put some examples of the information.

28
00:01:24,010 --> 00:01:27,180
So I'm going to focus on some of the Canadian Quidditch teams.

29
00:01:27,180 --> 00:01:30,060
One of which is UBC.

30
00:01:30,060 --> 00:01:33,426
One of which is McGill.

31
00:01:33,426 --> 00:01:42,250
And one of which is the Team Who Must Not Be Named.

32
00:01:42,250 --> 00:01:43,920
And by that, I don't mean Toronto.

33
00:01:43,920 --> 00:01:46,560
I mean a team that's actually chosen that name, which I think

34
00:01:46,560 --> 00:01:48,440
was a little silly, but never mind.

35
00:01:48,440 --> 00:01:53,070
So now let's think about the data that might be used to represent that.

36
00:01:53,070 --> 00:01:55,250
Those things look a lot like strings to me.

37
00:01:55,250 --> 00:01:57,220
Strings look like a good way to represent that.

38
00:01:57,220 --> 00:02:06,490
So for example, you might represent the team UBC as the string UBC, and so on.

39
00:02:06,490 --> 00:02:11,500


40
00:02:11,500 --> 00:02:14,600
So that's how we might represent some individual teams.

41
00:02:14,600 --> 00:02:17,560
Now how might we represent a list of teams?

42
00:02:17,560 --> 00:02:18,060
Right?

43
00:02:18,060 --> 00:02:20,840
A list of my favorite teams.

44
00:02:20,840 --> 00:02:24,030
Well, we saw how to do that using conses.

45
00:02:24,030 --> 00:02:25,760
I would say cons.

46
00:02:25,760 --> 00:02:31,090
Let's suppose that my two favorite teams are UBC and McGill.

47
00:02:31,090 --> 00:02:34,020


48
00:02:34,020 --> 00:02:38,770
That's kind of how we would represent that using lists.

49
00:02:38,770 --> 00:02:41,360
So now I've thought some about the information and the data.

50
00:02:41,360 --> 00:02:47,270
And I'm ready to go ahead and write out the actual data definition.

51
00:02:47,270 --> 00:02:51,300
So let's see, what I've got here is kind of a ListOfString.

52
00:02:51,300 --> 00:02:54,860
Every element of this list is a string.

53
00:02:54,860 --> 00:02:57,070
So I'm going to go ahead and the type ListOfString.

54
00:02:57,070 --> 00:03:02,440
Now I could call it list of team, but I'm going to call it ListOfString.

55
00:03:02,440 --> 00:03:05,350
We'll see some examples where you'd introduce another type

56
00:03:05,350 --> 00:03:07,290
name, for example, team.

57
00:03:07,290 --> 00:03:10,220
We'll see some of those a little bit later this week.

58
00:03:10,220 --> 00:03:14,330
So I'm going to say ListOfString is-- now here's

59
00:03:14,330 --> 00:03:16,080
there's an interesting little thing, which

60
00:03:16,080 --> 00:03:22,190
is here's one list of favorite teams.

61
00:03:22,190 --> 00:03:24,882
And the rest of that list is a list of favorite teams.

62
00:03:24,882 --> 00:03:27,340
And the rest of that list is also a list of favorite teams,

63
00:03:27,340 --> 00:03:29,430
but it's an empty list.

64
00:03:29,430 --> 00:03:32,230
So buried in the midst of here is this subtle point

65
00:03:32,230 --> 00:03:36,080
that empty would also be a good example.

66
00:03:36,080 --> 00:03:39,170
Let's just suppose you didn't like any of the current Quidditch teams.

67
00:03:39,170 --> 00:03:43,290
Your list of favorite teams-- ooh, not with a quote there-- empty like that,

68
00:03:43,290 --> 00:03:46,189
would also be an example.

69
00:03:46,189 --> 00:03:48,230
So the way I'm going to write this type comment--

70
00:03:48,230 --> 00:03:49,940
and again, we'll come back to this.

71
00:03:49,940 --> 00:03:53,910
Remember I said I was going to kind of get lucky a few times in this design.

72
00:03:53,910 --> 00:03:58,412
And then after the data designing the function design, I'll explain it all.

73
00:03:58,412 --> 00:04:00,870
They way I'm going to write this type comment is like this.

74
00:04:00,870 --> 00:04:11,944
I'm going to say that a ListOfString is one of either empty or cons string

75
00:04:11,944 --> 00:04:12,485
ListOfString.

76
00:04:12,485 --> 00:04:15,450


77
00:04:15,450 --> 00:04:17,450
Now there's an interesting thing going on there,

78
00:04:17,450 --> 00:04:23,060
which is that in the middle of this type comment, I refer to the type comment

79
00:04:23,060 --> 00:04:23,580
itself.

80
00:04:23,580 --> 00:04:25,200
So I've defined a ListOfString.

81
00:04:25,200 --> 00:04:27,692
And in the middle of it, I refer to ListOfString.

82
00:04:27,692 --> 00:04:29,900
And we're going to talk a great deal more about that.

83
00:04:29,900 --> 00:04:32,358
I'm just pointing out that that is there when you see that.

84
00:04:32,358 --> 00:04:34,700
That's what I mean to say.

85
00:04:34,700 --> 00:04:36,590
Let's do an interpretation.

86
00:04:36,590 --> 00:04:43,520
Interpretation, a ListOfString, because each element in these columns

87
00:04:43,520 --> 00:04:45,634
is a string.

88
00:04:45,634 --> 00:04:46,925
And now let's do some examples.

89
00:04:46,925 --> 00:04:49,810


90
00:04:49,810 --> 00:04:51,225
Well, one example is empty.

91
00:04:51,225 --> 00:04:53,770


92
00:04:53,770 --> 00:05:02,050
And another example is, say, just McGill and empty.

93
00:05:02,050 --> 00:05:05,010
And another example-- oops, that's not one, that's two.

94
00:05:05,010 --> 00:05:15,230
And another example is cons UBC, cons McGill, and empty.

95
00:05:15,230 --> 00:05:17,540
Before we go on, let's see if the type comment

96
00:05:17,540 --> 00:05:20,410
we have matches the examples we have.

97
00:05:20,410 --> 00:05:24,022
We're going to talk more about the type comment in upcoming videos, as I said.

98
00:05:24,022 --> 00:05:25,730
But it's a pretty good question right now

99
00:05:25,730 --> 00:05:29,720
to at least make sure that the type comment admits

100
00:05:29,720 --> 00:05:30,980
the three examples we have.

101
00:05:30,980 --> 00:05:33,310
So let's try that.

102
00:05:33,310 --> 00:05:36,400
The value of the LS1 is empty, so the question we have to ask

103
00:05:36,400 --> 00:05:41,780
is, is empty ListOfString-- does empty match the type ListOfString?

104
00:05:41,780 --> 00:05:45,130
Let's see, the type definition for ListOfString is this.

105
00:05:45,130 --> 00:05:49,850
And there's two cases, so let's see, does empty match the first case?

106
00:05:49,850 --> 00:05:50,960
Yes, it does.

107
00:05:50,960 --> 00:05:53,900
So now we know that empty is ListOfString.

108
00:05:53,900 --> 00:05:56,750
That wasn't that hard.

109
00:05:56,750 --> 00:06:00,920
Now let's ask about LS2, which is cons McGill empty.

110
00:06:00,920 --> 00:06:04,380
Again, we want to ask is that ListOfString?

111
00:06:04,380 --> 00:06:08,090
Well, here's the type definition for ListOfString.

112
00:06:08,090 --> 00:06:09,300
And there's two cases.

113
00:06:09,300 --> 00:06:13,190
Let's see, does cons McGill empty match the first case?

114
00:06:13,190 --> 00:06:13,900
No, it doesn't.

115
00:06:13,900 --> 00:06:16,950
Cons McGill empty definitely isn't empty.

116
00:06:16,950 --> 00:06:19,200
Let's try the second case.

117
00:06:19,200 --> 00:06:22,630
Well, cons McGill empty starts out with open paren cons, which

118
00:06:22,630 --> 00:06:24,180
is how the second case starts out.

119
00:06:24,180 --> 00:06:26,590
So that looks promising.

120
00:06:26,590 --> 00:06:28,890
And cons McGill empty has this close paren

121
00:06:28,890 --> 00:06:31,980
at the end, which the second case also has.

122
00:06:31,980 --> 00:06:33,900
So that looks promising.

123
00:06:33,900 --> 00:06:37,400
Now the question we have to ask is, is McGill,

124
00:06:37,400 --> 00:06:42,670
is the second thing in cons McGill empty McGill, is that string?

125
00:06:42,670 --> 00:06:43,170
Well, yes.

126
00:06:43,170 --> 00:06:44,040
McGill is string.

127
00:06:44,040 --> 00:06:44,990
That's trivially true.

128
00:06:44,990 --> 00:06:47,510
We know that McGill is a string.

129
00:06:47,510 --> 00:06:51,630
So because that's yes, we get a little bit more of a match between cons McGill

130
00:06:51,630 --> 00:06:55,810
empty and the second case of ListOfString.

131
00:06:55,810 --> 00:07:00,509
Now we need to ask the question, is empty ListOfString?

132
00:07:00,509 --> 00:07:02,300
Well, we've done this before, but I'm going

133
00:07:02,300 --> 00:07:04,950
to do it again just for completeness.

134
00:07:04,950 --> 00:07:07,690
So we asked the question, is empty ListOfString?

135
00:07:07,690 --> 00:07:11,670
We look at the type definition for ListOfString.

136
00:07:11,670 --> 00:07:14,510
And its ListOfString is one of-- there's two cases--

137
00:07:14,510 --> 00:07:17,900
and empty matches the first case.

138
00:07:17,900 --> 00:07:20,810
So yes, empty is ListOfString.

139
00:07:20,810 --> 00:07:24,810
So going back into the prior matching, that means empty

140
00:07:24,810 --> 00:07:28,930
matches ListOfString there and there.

141
00:07:28,930 --> 00:07:30,360
So now we have a complete match.

142
00:07:30,360 --> 00:07:34,239
And we know that cons McGill empty is ListOfString.

143
00:07:34,239 --> 00:07:36,780
And I think you can see that this will work for longer lists,

144
00:07:36,780 --> 00:07:40,660
it would just get boring if I had a list that had two elements in it.

145
00:07:40,660 --> 00:07:44,070
Then I would end up having to go to ListOfString the first time,

146
00:07:44,070 --> 00:07:46,860
ListOfString the second time, ListOfString the third time to get

147
00:07:46,860 --> 00:07:48,280
the empty at the end.

148
00:07:48,280 --> 00:07:50,650
It would just keep going.

149
00:07:50,650 --> 00:07:53,980
In some sense, what's happening here is that the self-reference in the type

150
00:07:53,980 --> 00:07:59,120
comment, the place in the type comment where ListOfString refers to itself

151
00:07:59,120 --> 00:08:02,370
is letting us match arbitrarily long lists,

152
00:08:02,370 --> 00:08:07,010
because we just start the matching over with the rest of the list as many times

153
00:08:07,010 --> 00:08:11,650
as we need to before we finally get to the empty case.

154
00:08:11,650 --> 00:08:16,340
We'll talk more about this, the video, after this next one.

155
00:08:16,340 --> 00:08:19,710
Now let's do the template.

156
00:08:19,710 --> 00:08:21,610
I'm going to say define fun for-- and I'm not

157
00:08:21,610 --> 00:08:23,840
going to write ListOfString here.

158
00:08:23,840 --> 00:08:26,910
For these list of types, we're going to let you abbreviate it like this.

159
00:08:26,910 --> 00:08:30,280


160
00:08:30,280 --> 00:08:36,400
Let's see, template rules used.

161
00:08:36,400 --> 00:08:38,659
Now the template starts off easily enough.

162
00:08:38,659 --> 00:08:40,840
First word after "is" is "one of."

163
00:08:40,840 --> 00:08:44,500
So the first rule is the "one of" rule.

164
00:08:44,500 --> 00:08:48,850
And there's two choices.

165
00:08:48,850 --> 00:08:54,000
So that means I'm going to put in a cond with one question, one answer.

166
00:08:54,000 --> 00:08:56,507
And another question and another answer.

167
00:08:56,507 --> 00:08:58,215
And that's the beginning of the template.

168
00:08:58,215 --> 00:09:01,030


169
00:09:01,030 --> 00:09:03,660
Now let's see, the next part is easy.

170
00:09:03,660 --> 00:09:05,055
After the "one of" is an empty.

171
00:09:05,055 --> 00:09:07,630


172
00:09:07,630 --> 00:09:12,880
So that's an atomic distinct empty because empty is a single value.

173
00:09:12,880 --> 00:09:15,590
There's a single empty list.

174
00:09:15,590 --> 00:09:17,560
So atomic distinct empty.

175
00:09:17,560 --> 00:09:21,880
The predicate for empty is empty question mark.

176
00:09:21,880 --> 00:09:25,485
And it's an atomic distinct, so we just have dot, dot, dot in the answer.

177
00:09:25,485 --> 00:09:28,220


178
00:09:28,220 --> 00:09:31,010
That's atomic distinct empty.

179
00:09:31,010 --> 00:09:36,270
Now we have this case.

180
00:09:36,270 --> 00:09:37,350
And remember what I said.

181
00:09:37,350 --> 00:09:39,100
The way we're going to think about a cons,

182
00:09:39,100 --> 00:09:41,710
is that the cons is compound data.

183
00:09:41,710 --> 00:09:44,260
So we need to use the compound rule here.

184
00:09:44,260 --> 00:09:48,190
And if we go look at the data-driven templates page,

185
00:09:48,190 --> 00:09:52,460
we'll see that columns is one of the examples it gives for compound.

186
00:09:52,460 --> 00:09:55,670


187
00:09:55,670 --> 00:09:59,630
So it's compound cons string ListOfString.

188
00:09:59,630 --> 00:10:02,370


189
00:10:02,370 --> 00:10:04,640
It's the last question of an itemization.

190
00:10:04,640 --> 00:10:07,550
So we can make the question be else.

191
00:10:07,550 --> 00:10:10,190
And then it's dot, dot, dot and the two selectors.

192
00:10:10,190 --> 00:10:12,100
Well, the selectors are first of LOS.

193
00:10:12,100 --> 00:10:14,850


194
00:10:14,850 --> 00:10:16,310
And rest of LOS.

195
00:10:16,310 --> 00:10:20,100


196
00:10:20,100 --> 00:10:25,590
And the type of first is string, because it's

197
00:10:25,590 --> 00:10:27,610
the columns of string and ListOfString.

198
00:10:27,610 --> 00:10:29,990
So the type of first is string.

199
00:10:29,990 --> 00:10:34,250
And the type of the rest is list of string.

200
00:10:34,250 --> 00:10:38,717


201
00:10:38,717 --> 00:10:40,550
Now here what I'm going to do, and I'm going

202
00:10:40,550 --> 00:10:43,640
to talk more about this, not in this video or the next video,

203
00:10:43,640 --> 00:10:46,480
but in the video after, I'm going to come back to this point.

204
00:10:46,480 --> 00:10:48,019
So now I'm going to do something.

205
00:10:48,019 --> 00:10:49,560
This is what I mean by getting lucky.

206
00:10:49,560 --> 00:10:51,170
I'm going to do something lucky.

207
00:10:51,170 --> 00:10:52,860
I won't explain why.

208
00:10:52,860 --> 00:10:55,420
We'll explain why in two videos.

209
00:10:55,420 --> 00:11:03,860
But I'm going to put this in the template right here.

210
00:11:03,860 --> 00:11:06,060
I'm going to run that template.

211
00:11:06,060 --> 00:11:06,950
There are no errors.

212
00:11:06,950 --> 00:11:09,050
So it's well formed.

213
00:11:09,050 --> 00:11:12,430
I'll comment it out.

214
00:11:12,430 --> 00:11:15,390
And now at this point, I can delete this scratch work up here.

215
00:11:15,390 --> 00:11:18,210


216
00:11:18,210 --> 00:11:23,010
And there's a data definition for representing Quidditch teams or lists

217
00:11:23,010 --> 00:11:25,901
of Quidditch teams using ListOfString.

218
00:11:25,901 --> 00:11:28,150
In the next video, we're going to go design a function

219
00:11:28,150 --> 00:11:30,440
operating on these lists.

220
00:11:30,440 --> 00:11:31,442



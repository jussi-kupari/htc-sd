0
00:00:00,000 --> 00:00:04,539


1
00:00:04,539 --> 00:00:06,330
GREGOR KICZALES: So in the last two videos,

2
00:00:06,330 --> 00:00:09,420
we saw some pretty amazing stuff.

3
00:00:09,420 --> 00:00:13,080
We had a type comment that referred to itself,

4
00:00:13,080 --> 00:00:16,390
and then we had a function that called itself.

5
00:00:16,390 --> 00:00:19,490
And that function actually did what we wanted it to do,

6
00:00:19,490 --> 00:00:22,290
instead of just going to around and around in circles,

7
00:00:22,290 --> 00:00:25,470
on and on, and on forever.

8
00:00:25,470 --> 00:00:28,000
Now why is that?

9
00:00:28,000 --> 00:00:30,612
That's what I'm going to talk about in this video.

10
00:00:30,612 --> 00:00:33,320
There's some pretty deep computer science underlying all of this,

11
00:00:33,320 --> 00:00:37,930
and we're not going to get into it and kind of academic terms.

12
00:00:37,930 --> 00:00:44,660
But what we will see is that the type comment has two key properties.

13
00:00:44,660 --> 00:00:48,560
And the way we derive the template preserves those properties,

14
00:00:48,560 --> 00:00:52,100
so that we end up with functions that work properly,

15
00:00:52,100 --> 00:00:54,780
even though they call themselves.

16
00:00:54,780 --> 00:00:58,000
So what I'm going to do is explain that, make a few additions

17
00:00:58,000 --> 00:01:01,160
to the design recipes, so you can keep doing that

18
00:01:01,160 --> 00:01:05,610
systematically, and producing recursive functions that work properly

19
00:01:05,610 --> 00:01:07,670
on your own.

20
00:01:07,670 --> 00:01:10,110
This file is Quidditch recap starter.

21
00:01:10,110 --> 00:01:14,120
It's basically just the solutions from the last two videos,

22
00:01:14,120 --> 00:01:17,990
rearranged slightly so that I have both parts of the problem in one box.

23
00:01:17,990 --> 00:01:19,880
That gives me some more room below.

24
00:01:19,880 --> 00:01:23,774
The first thing I want to know is right here in the problem description.

25
00:01:23,774 --> 00:01:25,940
Notice that we're designing a program that will keep

26
00:01:25,940 --> 00:01:29,176
track of your favorite Quidditch teams.

27
00:01:29,176 --> 00:01:33,390
Now ask yourself, how many teams are there?

28
00:01:33,390 --> 00:01:35,200
We don't know ahead of time.

29
00:01:35,200 --> 00:01:38,540
There could be one, there could be two, there could be 30, there could be 60,

30
00:01:38,540 --> 00:01:40,630
we just don't know ahead of time.

31
00:01:40,630 --> 00:01:43,470
This is what we call arbitrary sized.

32
00:01:43,470 --> 00:01:47,340
Arbitrary doesn't mean random, it just means we don't know ahead of time.

33
00:01:47,340 --> 00:01:49,650
Now, whenever we have an arbitrary sized data

34
00:01:49,650 --> 00:01:53,890
problem, whenever we need data to be of arbitrary size,

35
00:01:53,890 --> 00:01:58,480
what we're going to see that we want to use self reference in the type comment.

36
00:01:58,480 --> 00:02:02,760
This type comment has the self reference in it, as we noted before,

37
00:02:02,760 --> 00:02:08,289
and we saw how that made it possible for it to account for lists of any size.

38
00:02:08,289 --> 00:02:11,710
We just make one more cycle around the self reference relationship

39
00:02:11,710 --> 00:02:13,270
for each element of the list.

40
00:02:13,270 --> 00:02:15,820
But why does this self reference work out?

41
00:02:15,820 --> 00:02:20,570
Why doesn't it in some sense blow up, because it just keeps going round?

42
00:02:20,570 --> 00:02:23,740
Well the key thing is this is what's called a well formed self

43
00:02:23,740 --> 00:02:26,080
referential data definition.

44
00:02:26,080 --> 00:02:31,270
And it's well formed, because it has the self reference case, that's true.

45
00:02:31,270 --> 00:02:34,390
That's what lets it get longer and longer.

46
00:02:34,390 --> 00:02:38,940
But it also has the non-self referential case, or the base case,

47
00:02:38,940 --> 00:02:41,380
and that's what lets it stop.

48
00:02:41,380 --> 00:02:44,750
So in a well formed self referential data definition,

49
00:02:44,750 --> 00:02:49,070
you always have both the base case, that has no self reference,

50
00:02:49,070 --> 00:02:51,920
and a self reference case.

51
00:02:51,920 --> 00:02:55,430
Now this is a simple self referential data definition.

52
00:02:55,430 --> 00:02:59,320
It's possible for these type comments to have more than one self reference

53
00:02:59,320 --> 00:03:02,040
case and more than one base case.

54
00:03:02,040 --> 00:03:04,220
The rule for being well formed is that there

55
00:03:04,220 --> 00:03:10,140
has to be at least one base case, non-self referential case, and at least

56
00:03:10,140 --> 00:03:12,830
one self referential case.

57
00:03:12,830 --> 00:03:16,940
So the summary so far is, if you have an arbitrary amount of information you

58
00:03:16,940 --> 00:03:20,800
need to represent, you need to use a well formed self referential data

59
00:03:20,800 --> 00:03:22,280
definition.

60
00:03:22,280 --> 00:03:24,050
That gets us to here.

61
00:03:24,050 --> 00:03:28,170
And if we look at how to design data page, what we've got so far

62
00:03:28,170 --> 00:03:36,510
is reflected here in the choice of what form of data definition to use.

63
00:03:36,510 --> 00:03:40,190
When the information to be represented is of arbitrary size,

64
00:03:40,190 --> 00:03:42,950
we use a self referential data definition.

65
00:03:42,950 --> 00:03:47,450
Mutually referential is something we'll talk about another week.

66
00:03:47,450 --> 00:03:52,910
So if we follow this link, it says that for arbitrary size information,

67
00:03:52,910 --> 00:03:56,130
we need to use a well formed self referential data definition.

68
00:03:56,130 --> 00:03:59,080
So that's the how to design data recipe accounts

69
00:03:59,080 --> 00:04:02,720
for what we've seen the code so far.

70
00:04:02,720 --> 00:04:07,390
Let's go back to the code now, and let's talk quickly about the examples.

71
00:04:07,390 --> 00:04:10,520
For soft referential data definitions, it's

72
00:04:10,520 --> 00:04:12,960
good to have examples of the base case.

73
00:04:12,960 --> 00:04:17,579
If there's more than one base case that have examples of both base cases,

74
00:04:17,579 --> 00:04:21,470
they tend to be kind of trivial, but I like to put them in anyways.

75
00:04:21,470 --> 00:04:24,730
And you should have examples of the self referential case,

76
00:04:24,730 --> 00:04:27,060
in this particular data definition I probably

77
00:04:27,060 --> 00:04:29,920
could have done with just two examples, rather than three.

78
00:04:29,920 --> 00:04:33,230
So I probably could have done with example one and example three.

79
00:04:33,230 --> 00:04:34,902
It's fine to have an additional one.

80
00:04:34,902 --> 00:04:37,110
Now, let me scroll a bit and talk about the template.

81
00:04:37,110 --> 00:04:41,070


82
00:04:41,070 --> 00:04:44,770
As we saw before, the beginning of the template's relatively straightforward.

83
00:04:44,770 --> 00:04:48,330
It's one of the two cases, so that got us to cond.

84
00:04:48,330 --> 00:04:50,810
The first cases is atomic distinct empty,

85
00:04:50,810 --> 00:04:57,004
so that got us cond empty question mark, LOS, and dot, dot, dot.

86
00:04:57,004 --> 00:05:02,340
This case, the second case, is com, so that's compound.

87
00:05:02,340 --> 00:05:05,425
We take the coms apart into its first and it's rest.

88
00:05:05,425 --> 00:05:08,220


89
00:05:08,220 --> 00:05:12,690
But then the question is, how did we get this fun for LOS.

90
00:05:12,690 --> 00:05:14,740
Well, the reason we got that from for LOS, let me

91
00:05:14,740 --> 00:05:18,035
just back up a little bit to where we were right at that point in time.

92
00:05:18,035 --> 00:05:21,250


93
00:05:21,250 --> 00:05:23,950
We knew the first LOS was going to be a string,

94
00:05:23,950 --> 00:05:29,539
and we knew that rest LOS was list of string.

95
00:05:29,539 --> 00:05:31,580
So we're not going to do anything with first LOS,

96
00:05:31,580 --> 00:05:35,690
because it's primitive type, string is a primitive type.

97
00:05:35,690 --> 00:05:38,960
But with rest LOS, here's where we're getting the self reference.

98
00:05:38,960 --> 00:05:42,630
There's a self reference here back to listed strength.

99
00:05:42,630 --> 00:05:48,950
When we take the rest of LOS, we're holding a value of type list of string.

100
00:05:48,950 --> 00:06:00,520
And so there's a special template rule, called the self reference rule,

101
00:06:00,520 --> 00:06:02,080
and we use it in this case.

102
00:06:02,080 --> 00:06:05,530
And the self preference rule says wrap that

103
00:06:05,530 --> 00:06:14,640
selector in a call to the template function itself.

104
00:06:14,640 --> 00:06:17,730
And this thing is what's called a natural recursion.

105
00:06:17,730 --> 00:06:22,370
It's of recursion that shows up exactly where in the type comment,

106
00:06:22,370 --> 00:06:24,660
we have a self reference.

107
00:06:24,660 --> 00:06:29,350
So what we have so far is arbitrary size data, well formed self referential data

108
00:06:29,350 --> 00:06:36,340
definition, have examples of the base case, and the self reference case.

109
00:06:36,340 --> 00:06:39,470
And in the template, when you hit the self reference,

110
00:06:39,470 --> 00:06:42,080
put in a natural recursion.

111
00:06:42,080 --> 00:06:47,529
That last bit shows up in the data driven templates page right here,

112
00:06:47,529 --> 00:06:49,320
where it says, if you have a self reference

113
00:06:49,320 --> 00:06:54,160
to form a natural recursion with a call to this type's template function.

114
00:06:54,160 --> 00:06:57,590
And that's what we did here, we put a call to this type's template function,

115
00:06:57,590 --> 00:07:00,920
because we had a self reference there.

116
00:07:00,920 --> 00:07:04,820
And that's why this call, this natural recursion,

117
00:07:04,820 --> 00:07:09,380
corresponds exactly to this self reference.

118
00:07:09,380 --> 00:07:13,410
And I tried to draw the arrows here, to show that correspondence clearly.

119
00:07:13,410 --> 00:07:17,520
So from now on, whenever you see a self reference in a type comment,

120
00:07:17,520 --> 00:07:22,420
you'll immediately know there's going to be a natural recursion in the template.

121
00:07:22,420 --> 00:07:26,040
Now let's look at the function we design.

122
00:07:26,040 --> 00:07:29,390
So the signature is pretty straightforward, nothing really new

123
00:07:29,390 --> 00:07:32,400
here except that it does consume list of string.

124
00:07:32,400 --> 00:07:37,170
The purpose, similarly, we knew how to do, and the stub.

125
00:07:37,170 --> 00:07:39,350
And the check expects look pretty familiar,

126
00:07:39,350 --> 00:07:41,730
but there are a couple things I want to note here

127
00:07:41,730 --> 00:07:46,260
about check expects for functions operating on lists.

128
00:07:46,260 --> 00:07:50,980
First, remember that check expects are always examples first, and tests later.

129
00:07:50,980 --> 00:07:53,990
So we use them as examples to help us figure out what we're doing.

130
00:07:53,990 --> 00:07:56,520
And with that in mind, it's always a good idea

131
00:07:56,520 --> 00:08:00,860
to have the base case example first, the base case test first.

132
00:08:00,860 --> 00:08:03,850
That's what I have here, I have contained UBC of empty

133
00:08:03,850 --> 00:08:05,700
as my first test.

134
00:08:05,700 --> 00:08:09,530
Partly, that helps us figure out the simplest case first, and also

135
00:08:09,530 --> 00:08:13,270
many tests of these functions end up at the base case.

136
00:08:13,270 --> 00:08:17,920
And so if the base case result is wrong, that can affect other tests.

137
00:08:17,920 --> 00:08:20,507
So it's good to get the base case debugged first.

138
00:08:20,507 --> 00:08:22,590
So there's two reasons to put the base case first.

139
00:08:22,590 --> 00:08:25,510
One, it helps us figure out the simplest thing first.

140
00:08:25,510 --> 00:08:28,500
And the other, it makes sure, when we run the test,

141
00:08:28,500 --> 00:08:33,100
that the base case works properly before we test the other cases.

142
00:08:33,100 --> 00:08:36,130
And another general guideline for functions operating on list

143
00:08:36,130 --> 00:08:39,600
is to be sure that you have a test that operates on a list that's

144
00:08:39,600 --> 00:08:42,133
at least two elements long.

145
00:08:42,133 --> 00:08:44,049
That's because sometimes there's certain kinds

146
00:08:44,049 --> 00:08:47,800
of bugs you can introduce that don't show up in one element list.

147
00:08:47,800 --> 00:08:50,210
This particular example is also an example

148
00:08:50,210 --> 00:08:53,170
of a function that has two different cases in it.

149
00:08:53,170 --> 00:08:56,950
There's cases where it finds the string it's looking for and cases where it

150
00:08:56,950 --> 00:08:57,810
doesn't.

151
00:08:57,810 --> 00:08:59,740
And so, in that case, of course, you have

152
00:08:59,740 --> 00:09:01,650
to be able to test the true and false case.

153
00:09:01,650 --> 00:09:03,820
Finally, let's look at the function itself.

154
00:09:03,820 --> 00:09:08,670
And to look at the function, what I want to do is I'm going to back up.

155
00:09:08,670 --> 00:09:13,190
So what I'm going to do is I'm going to delete this and go back to the point

156
00:09:13,190 --> 00:09:16,420
where we just have the template.

157
00:09:16,420 --> 00:09:19,680
When you copy the template down, for a template based

158
00:09:19,680 --> 00:09:27,160
on a type with self reference, then the template has a natural recursion in it.

159
00:09:27,160 --> 00:09:31,660
And it's very important when you rename the function, that you

160
00:09:31,660 --> 00:09:36,570
rename both the function definition, and any natural recursion.

161
00:09:36,570 --> 00:09:40,950
That's very important, and we'll see why in a minute.

162
00:09:40,950 --> 00:09:44,030
So now, let me start coding the details .

163
00:09:44,030 --> 00:09:47,990
Let's see if the function is operating on a list that's empty.

164
00:09:47,990 --> 00:09:53,240
Then we can't find UBC in empty list, so that would be false.

165
00:09:53,240 --> 00:09:56,550
Otherwise these examples tell me that there's two different cases,

166
00:09:56,550 --> 00:09:58,420
depending on the first item in the list.

167
00:09:58,420 --> 00:10:01,530
If the first item is UBC, we produce true.

168
00:10:01,530 --> 00:10:05,480
If it's not, we need to go look farther down in the list.

169
00:10:05,480 --> 00:10:13,886
So that makes me put an if in here, and I say, string equal question mark UBC.

170
00:10:13,886 --> 00:10:18,630
If the first in the list is UBC, we're going to produce true.

171
00:10:18,630 --> 00:10:21,410
And otherwise, what do we need to do?

172
00:10:21,410 --> 00:10:24,790
Well, the first item in the list might not be UBC,

173
00:10:24,790 --> 00:10:28,420
but there might be a UBC farther down the list,

174
00:10:28,420 --> 00:10:33,130
so we need to go look further down in the list.

175
00:10:33,130 --> 00:10:36,800
And the key point here is that we want to get

176
00:10:36,800 --> 00:10:39,680
you to trust the natural recursion.

177
00:10:39,680 --> 00:10:45,250
At this point in time, you need to know is UBC in the rest of the list?

178
00:10:45,250 --> 00:10:48,880
And because the template has included a natural recursion,

179
00:10:48,880 --> 00:10:52,300
and because that natural recursion came from a type

180
00:10:52,300 --> 00:10:57,520
with well formed self reference, you could count on the natural recursion

181
00:10:57,520 --> 00:10:58,530
to work.

182
00:10:58,530 --> 00:11:01,590
So we're just going to trust that contains UBC of rest LOS

183
00:11:01,590 --> 00:11:03,670
does what we need it to do.

184
00:11:03,670 --> 00:11:08,520
The key thing is I want you to avoid the temptation to edit in here.

185
00:11:08,520 --> 00:11:11,639
Trust the natural recursion, that's the game.

186
00:11:11,639 --> 00:11:13,430
And the reason you could trust it is again,

187
00:11:13,430 --> 00:11:17,880
is because it came from a well formed self referential type.

188
00:11:17,880 --> 00:11:21,270
Let's see, all four test passed.

189
00:11:21,270 --> 00:11:25,410
What I'd like you to do now is go look at the how to design functions,

190
00:11:25,410 --> 00:11:29,620
and how to design data, and data driven templates web pages,

191
00:11:29,620 --> 00:11:32,680
and pay attention to the parts that talk specifically

192
00:11:32,680 --> 00:11:34,700
about designing with lists.

193
00:11:34,700 --> 00:11:36,470
Just go ahead and review that.

194
00:11:36,470 --> 00:11:39,660
And then, you'll be in a good position to keep

195
00:11:39,660 --> 00:11:42,060
designing with lists going forward.

196
00:11:42,060 --> 00:11:46,610
And remember, the big summary of kind of what we've seen so far

197
00:11:46,610 --> 00:11:50,000
is, if you have arbitrary size information,

198
00:11:50,000 --> 00:11:53,070
then you need arbitrary size data.

199
00:11:53,070 --> 00:11:58,440
That requires a well formed self referential type comment.

200
00:11:58,440 --> 00:12:02,240
That leads to a natural workers in the template.

201
00:12:02,240 --> 00:12:06,410
That leads a recursive call in the function.

202
00:12:06,410 --> 00:12:10,260
You should test the base case first, and you should always

203
00:12:10,260 --> 00:12:12,762
trust the natural recursion.

204
00:12:12,762 --> 00:12:13,262



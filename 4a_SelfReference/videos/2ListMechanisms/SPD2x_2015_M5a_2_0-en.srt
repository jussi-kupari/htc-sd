0
00:00:00,000 --> 00:00:03,827


1
00:00:03,827 --> 00:00:06,660
GREGOR KICZALES: Now, it turns out you can represent arbitrary sized

2
00:00:06,660 --> 00:00:09,300
information using compound data.

3
00:00:09,300 --> 00:00:12,430
And that's something we'll do a little bit later this week.

4
00:00:12,430 --> 00:00:17,180
But the simplest form of arbitrary size data is lists of values.

5
00:00:17,180 --> 00:00:20,550
And so we're going to do lists of values first.

6
00:00:20,550 --> 00:00:23,500
Now, before I can talk about designing with lists,

7
00:00:23,500 --> 00:00:27,170
I have to show you the basic mechanisms that BSL gives us

8
00:00:27,170 --> 00:00:28,800
for representing lists.

9
00:00:28,800 --> 00:00:30,800
So this is kind of like what happened last week,

10
00:00:30,800 --> 00:00:33,920
where first I showed you the define-struct mechanism,

11
00:00:33,920 --> 00:00:36,970
and then we learned how to design compound data.

12
00:00:36,970 --> 00:00:40,360
First, I'm going to talk about the BSL primitives for lists,

13
00:00:40,360 --> 00:00:42,410
and we'll do that in this video.

14
00:00:42,410 --> 00:00:47,340
And then over the next several videos, we'll look at designing with lists.

15
00:00:47,340 --> 00:00:52,500
The primitive data that BSL gives us is called lists.

16
00:00:52,500 --> 00:00:56,610
Here's the value that BSL gives us for representing empty lists.

17
00:00:56,610 --> 00:01:00,586
So that value empty is an empty list of anything you want.

18
00:01:00,586 --> 00:01:01,835
It's an empty list of strings.

19
00:01:01,835 --> 00:01:03,470
It's an empty list of hockey teams.

20
00:01:03,470 --> 00:01:05,120
It's an empty list of numbers.

21
00:01:05,120 --> 00:01:07,910
Since it's empty, it can be an empty list of anything.

22
00:01:07,910 --> 00:01:11,540
Now, let's look at how to make a list that isn't empty.

23
00:01:11,540 --> 00:01:16,240
The way we do that is we have a primitive cons.

24
00:01:16,240 --> 00:01:23,830
And if I do this, that is a list that's constructed

25
00:01:23,830 --> 00:01:28,450
by putting flames on to the front of this list here,

26
00:01:28,450 --> 00:01:29,730
which happens to be empty.

27
00:01:29,730 --> 00:01:31,605
So this is going to be a list of one element.

28
00:01:31,605 --> 00:01:35,400


29
00:01:35,400 --> 00:01:36,525
Here's a list two elements.

30
00:01:36,525 --> 00:01:42,970


31
00:01:42,970 --> 00:01:44,930
And again, the way you read this is it says,

32
00:01:44,930 --> 00:01:47,710
we'll construct a list in which leafs is the first element,

33
00:01:47,710 --> 00:01:50,300
and add leafs to the front of.

34
00:01:50,300 --> 00:01:55,100
Construct a list in which you add flames to the front of the list empty.

35
00:01:55,100 --> 00:01:56,475
So that's a list of two elements.

36
00:01:56,475 --> 00:02:03,490


37
00:02:03,490 --> 00:02:10,410
If we run this, Racket shows us the list using this cons notation, it's called.

38
00:02:10,410 --> 00:02:13,430
So it shows us values that look very much like these expressions,

39
00:02:13,430 --> 00:02:15,263
but there's an important point to make here.

40
00:02:15,263 --> 00:02:18,030
Let me show you a third one of these, kind of a silly one,

41
00:02:18,030 --> 00:02:19,440
except to make this point.

42
00:02:19,440 --> 00:02:24,630


43
00:02:24,630 --> 00:02:32,090
If I evaluate this third expression, the value that I get is cons Canucks empty.

44
00:02:32,090 --> 00:02:37,210
What happens is, when Racket evaluates this, the string-append C anucks,

45
00:02:37,210 --> 00:02:39,600
produces the string Canucks.

46
00:02:39,600 --> 00:02:43,540
And then the resulting value, the resulting list

47
00:02:43,540 --> 00:02:48,630
is the list formed with the string Canucks

48
00:02:48,630 --> 00:02:52,700
at the beginning of the list that's empty.

49
00:02:52,700 --> 00:02:58,320
So you could put expressions as the operands for cons in expressions.

50
00:02:58,320 --> 00:03:04,230
When BSL shows us values, it'll always be formed out of values.

51
00:03:04,230 --> 00:03:07,070
Now, lists can have more than just strings in them.

52
00:03:07,070 --> 00:03:10,880
For example, you could represent problem set quiz grades.

53
00:03:10,880 --> 00:03:14,080
And let's suppose we're doing very well on our problem set quizzes.

54
00:03:14,080 --> 00:03:18,300
So we've got a 10, a 9, and a 10.

55
00:03:18,300 --> 00:03:26,120
There is a list of three elements-- the numbers 10, 9, and 10.

56
00:03:26,120 --> 00:03:30,130
And we can also make lists out of images, for example.

57
00:03:30,130 --> 00:03:35,680
So we have a list that's a square of size 10, and solid, and blue.

58
00:03:35,680 --> 00:03:41,390
And let's see, the second element of the list would be a triangle of size 20,

59
00:03:41,390 --> 00:03:46,940
that's solid and green and empty.

60
00:03:46,940 --> 00:03:49,920


61
00:03:49,920 --> 00:03:53,300
So lists can have all kinds of different values in them.

62
00:03:53,300 --> 00:03:55,520
Technically, you can use the list mechanism

63
00:03:55,520 --> 00:03:59,340
to make lists that have more than one type of data in them.

64
00:03:59,340 --> 00:04:00,810
The mechanism will do that.

65
00:04:00,810 --> 00:04:04,380
But our data definitions don't let us talk about that very well.

66
00:04:04,380 --> 00:04:07,570
So we're not going to see values like that in this course.

67
00:04:07,570 --> 00:04:10,480
Let me clean this up a bit.

68
00:04:10,480 --> 00:04:13,600
And what I'm going to do is give some of these values names.

69
00:04:13,600 --> 00:04:16,668
So let me call this one L1.

70
00:04:16,668 --> 00:04:20,079


71
00:04:20,079 --> 00:04:24,840
And I will call this one L2.

72
00:04:24,840 --> 00:04:27,840


73
00:04:27,840 --> 00:04:29,687
And I'll just get rid of this one.

74
00:04:29,687 --> 00:04:30,770
And I'll call this one L3.

75
00:04:30,770 --> 00:04:37,540


76
00:04:37,540 --> 00:04:39,310
Now they've all got names.

77
00:04:39,310 --> 00:04:41,420
Now that we've made lists of things, we'd kind of

78
00:04:41,420 --> 00:04:44,310
like to know what's in the lists.

79
00:04:44,310 --> 00:04:47,750
So Racket gives us two more primitives for doing that.

80
00:04:47,750 --> 00:04:49,830
One is called first.

81
00:04:49,830 --> 00:04:53,670
So first, given a list, produces the first element of the list.

82
00:04:53,670 --> 00:04:56,125
So first of L1 produces flames.

83
00:04:56,125 --> 00:04:59,330


84
00:04:59,330 --> 00:05:03,540
First of L2 would produce 10.

85
00:05:03,540 --> 00:05:06,100
And first of L3 would produce that square.

86
00:05:06,100 --> 00:05:10,561


87
00:05:10,561 --> 00:05:11,060
OK.

88
00:05:11,060 --> 00:05:12,240
So that's first.

89
00:05:12,240 --> 00:05:15,282
First produces the first item in the list.

90
00:05:15,282 --> 00:05:18,166
First is kind of like a selector.

91
00:05:18,166 --> 00:05:21,420
That's because lists are kind of like compound data.

92
00:05:21,420 --> 00:05:21,950
Right?

93
00:05:21,950 --> 00:05:26,140
Cons is basically a compound data constructor, saying make a new list,

94
00:05:26,140 --> 00:05:30,330
in which the first element is this, and the rest of the list

95
00:05:30,330 --> 00:05:34,870
is the second operand for cons.

96
00:05:34,870 --> 00:05:38,720
So first is the selector that produces the first item in the list.

97
00:05:38,720 --> 00:05:41,040
And the name of the selector that produces

98
00:05:41,040 --> 00:05:44,310
the rest of the elements of the list is called rest.

99
00:05:44,310 --> 00:05:50,440
So rest of L1 is going to be empty, because everything

100
00:05:50,440 --> 00:05:54,390
in the list after flames is empty.

101
00:05:54,390 --> 00:05:56,285
Well, I'll just quickly type these other two.

102
00:05:56,285 --> 00:06:00,770


103
00:06:00,770 --> 00:06:06,070
Rest of L2 is cons 9 cons 10 empty.

104
00:06:06,070 --> 00:06:11,210
And rest of L3 three is cons the triangle empty.

105
00:06:11,210 --> 00:06:13,160
So that's first and rest.

106
00:06:13,160 --> 00:06:16,900
Those are the BSL primitives for taking lists apart.

107
00:06:16,900 --> 00:06:20,390
Now, let me ask you a question.

108
00:06:20,390 --> 00:06:30,230
Suppose what I want, how do I get the second element of L2?

109
00:06:30,230 --> 00:06:34,330
Now, BSL has a primitive called second.

110
00:06:34,330 --> 00:06:36,260
And it has one called third.

111
00:06:36,260 --> 00:06:37,890
I don't want you to use those.

112
00:06:37,890 --> 00:06:42,940
For the next couple weeks, in order to get at the insides of lists,

113
00:06:42,940 --> 00:06:47,250
in order to take lists apart, I only want you to use first and rest.

114
00:06:47,250 --> 00:06:52,310
So using only first and rest, how do I get at the second element of L2?

115
00:06:52,310 --> 00:06:55,870
Well, if I call a first as the first thing I do, I'm in trouble,

116
00:06:55,870 --> 00:06:58,020
because I'll just get 10.

117
00:06:58,020 --> 00:07:01,100
So what I do actually is I take rest of L2.

118
00:07:01,100 --> 00:07:04,790
Now, that's going to give me cons 9 cons 10 empty.

119
00:07:04,790 --> 00:07:11,510
And once I have rest of L2, then the first of that

120
00:07:11,510 --> 00:07:13,680
is the second thing in L2.

121
00:07:13,680 --> 00:07:17,510
The way to read this is first of rest of L2.

122
00:07:17,510 --> 00:07:19,525
So rest of L2 is that.

123
00:07:19,525 --> 00:07:23,120
Give me the first of that, which is 9.

124
00:07:23,120 --> 00:07:26,596
How do I get the third element?

125
00:07:26,596 --> 00:07:27,970
You just do the same trick again.

126
00:07:27,970 --> 00:07:33,122
You say first of rest of rest of L2.

127
00:07:33,122 --> 00:07:34,830
Now, that would get tedious if you wanted

128
00:07:34,830 --> 00:07:37,619
to get the 23rd element of a list.

129
00:07:37,619 --> 00:07:39,660
And what we'll see, starting in the next lecture,

130
00:07:39,660 --> 00:07:41,369
is that we'd do it a different way.

131
00:07:41,369 --> 00:07:41,910
So let's see.

132
00:07:41,910 --> 00:07:43,770
I have cons for constructing lists.

133
00:07:43,770 --> 00:07:46,400
I have first and rest for taking lists apart.

134
00:07:46,400 --> 00:07:50,020
There's one more primitive that BSL gives me for working with lists.

135
00:07:50,020 --> 00:07:51,980
And that's called empty question mark.

136
00:07:51,980 --> 00:07:55,240
It's a predicate, because its name ends in question mark.

137
00:07:55,240 --> 00:07:58,900
And what happens is that empty question mark of empty

138
00:07:58,900 --> 00:08:02,660
produces-- let me comment these things out, so we won't get confused here.

139
00:08:02,660 --> 00:08:05,210


140
00:08:05,210 --> 00:08:09,060
Empty question mark of empty produces true.

141
00:08:09,060 --> 00:08:12,320
And empty question mark of a list that isn't empty, or in fact of anything

142
00:08:12,320 --> 00:08:15,580
at all, produces false.

143
00:08:15,580 --> 00:08:19,550
You can also say, if you want, empty question mark of 1.

144
00:08:19,550 --> 00:08:23,450
But you're not going to say that as often.

145
00:08:23,450 --> 00:08:29,664
We'll often want to know, is the list that we're holding here empty?

146
00:08:29,664 --> 00:08:30,330
So there you go.

147
00:08:30,330 --> 00:08:34,929
There's the primitives for constructing and operating on lists

148
00:08:34,929 --> 00:08:37,900
that are part of the BSL language.

149
00:08:37,900 --> 00:08:38,592



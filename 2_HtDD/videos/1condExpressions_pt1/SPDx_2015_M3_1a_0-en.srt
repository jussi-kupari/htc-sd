0
00:00:00,000 --> 00:00:04,570


1
00:00:04,570 --> 00:00:07,920
GREGOR KICZALES: This week we're going to talk about the design of data.

2
00:00:07,920 --> 00:00:10,810
And what we're going to see is that the design of data

3
00:00:10,810 --> 00:00:14,470
really turns out to be a point of leverage in designing programs.

4
00:00:14,470 --> 00:00:19,060
Because when we design data, we make decisions about all the functions

5
00:00:19,060 --> 00:00:21,740
that later operate on that data.

6
00:00:21,740 --> 00:00:26,420
But before we get to that, this video covers cond expressions.

7
00:00:26,420 --> 00:00:29,730
Which are a new kind of expression in racket

8
00:00:29,730 --> 00:00:32,880
that's going to let us program conditional behavior where

9
00:00:32,880 --> 00:00:36,150
there's more than just two cases.

10
00:00:36,150 --> 00:00:41,260
I have the cond-starter.rkt file opened from the lecture page.

11
00:00:41,260 --> 00:00:42,970
Let's just look at this file quickly.

12
00:00:42,970 --> 00:00:47,540
It starts by defining three constants, called I1, I2, and I3.

13
00:00:47,540 --> 00:00:49,860
And they're all three rectangles.

14
00:00:49,860 --> 00:00:55,880
And let's see, I1 is 10 wide and 20 high, and I2 is 20 by 20,

15
00:00:55,880 --> 00:00:57,770
and I3 is 20 by 10.

16
00:00:57,770 --> 00:01:00,500
So these are three rectangles of different shapes.

17
00:01:00,500 --> 00:01:02,310
Now here's a function design.

18
00:01:02,310 --> 00:01:06,800
And the function consumes an image and produces a string.

19
00:01:06,800 --> 00:01:08,970
And let's see, it produces the shape of the image,

20
00:01:08,970 --> 00:01:12,260
one of tall, square, or wide.

21
00:01:12,260 --> 00:01:15,370
And these three examples slash check expects really

22
00:01:15,370 --> 00:01:17,330
help me understand this function.

23
00:01:17,330 --> 00:01:21,240
If I ask for the aspect ratio I1 I get tall.

24
00:01:21,240 --> 00:01:22,785
Whereas for I2 I get square.

25
00:01:22,785 --> 00:01:25,440
And for I3 I get wide.

26
00:01:25,440 --> 00:01:27,390
And reading through the rest of this there's

27
00:01:27,390 --> 00:01:29,660
a stub and a template that are commented out.

28
00:01:29,660 --> 00:01:33,200
Now when we look at the definition of the function, what does it say?

29
00:01:33,200 --> 00:01:38,010
It says well if the height of the image is greater than the width of the image

30
00:01:38,010 --> 00:01:39,580
then produce tall.

31
00:01:39,580 --> 00:01:44,800
That's this whole if there.

32
00:01:44,800 --> 00:01:46,180
And that's its question.

33
00:01:46,180 --> 00:01:48,590
And that's it's true answer.

34
00:01:48,590 --> 00:01:51,420
On the other hand let's see it's false answer is another

35
00:01:51,420 --> 00:01:56,060
if that asks if the image height and width are equal produce square

36
00:01:56,060 --> 00:01:57,780
otherwise produce y.

37
00:01:57,780 --> 00:02:03,660
So this function design works and if I run it, I'll get what I want.

38
00:02:03,660 --> 00:02:07,170
But there is something I'm not entirely happy about here.

39
00:02:07,170 --> 00:02:10,470
If you think about this function there are really three cases, right?

40
00:02:10,470 --> 00:02:13,700
There's the tall case, the square case, and the wide case.

41
00:02:13,700 --> 00:02:16,490
And those three cases really feel like they're parallel to me.

42
00:02:16,490 --> 00:02:19,870
They feel like they're corresponding cases.

43
00:02:19,870 --> 00:02:25,270
Whereas when we implemented here with if, we end up having one case tall.

44
00:02:25,270 --> 00:02:31,520
Which has two other cases square and wide kind of inside of it.

45
00:02:31,520 --> 00:02:33,290
And that doesn't feel quite right.

46
00:02:33,290 --> 00:02:37,230
It doesn't feel quite right to have one case with two inside of it,

47
00:02:37,230 --> 00:02:40,490
as opposed to three parallel cases.

48
00:02:40,490 --> 00:02:45,660
So what we're going to learn in this video is a new mechanism called cond.

49
00:02:45,660 --> 00:02:48,740
That's what's called a multi armed conditional.

50
00:02:48,740 --> 00:02:51,780
And that is something we can use when we want

51
00:02:51,780 --> 00:02:54,810
to make an expression that has different behavior depending

52
00:02:54,810 --> 00:02:57,520
on the answer to predicates.

53
00:02:57,520 --> 00:03:01,390
But there's more than two different options.

54
00:03:01,390 --> 00:03:04,390
So here we go, let's do it to this one.

55
00:03:04,390 --> 00:03:06,450
Let me first show you a new trick.

56
00:03:06,450 --> 00:03:10,220
If I do sharp sign semicolon, that's going to comment out

57
00:03:10,220 --> 00:03:13,050
the entire-- all of that stuff.

58
00:03:13,050 --> 00:03:17,130
It basically comments out from balanced parentheses to balanced parentheses.

59
00:03:17,130 --> 00:03:20,800
It's easier than putting a semicolon before each line.

60
00:03:20,800 --> 00:03:22,115
Now let's redo this function.

61
00:03:22,115 --> 00:03:27,580
I'll say define aspect-ratio image.

62
00:03:27,580 --> 00:03:30,130
And what I have is three cases.

63
00:03:30,130 --> 00:03:35,840
So what I would do is I'm going to write cond, and then there's three cases.

64
00:03:35,840 --> 00:03:39,930
And each case has a question and a answer.

65
00:03:39,930 --> 00:03:42,860
And there's three of them.

66
00:03:42,860 --> 00:03:47,259
So I'll just copy that like that.

67
00:03:47,259 --> 00:03:48,800
Oh, and I spell the name of it wrong.

68
00:03:48,800 --> 00:03:52,929


69
00:03:52,929 --> 00:03:54,720
Now notice something here which is that I'm

70
00:03:54,720 --> 00:03:57,980
using square brackets instead of round parentheses

71
00:03:57,980 --> 00:04:01,500
around the question and answer pair.

72
00:04:01,500 --> 00:04:05,280
That's just a convention to make the question and answer pairs stand out

73
00:04:05,280 --> 00:04:05,780
better.

74
00:04:05,780 --> 00:04:08,880
Particularly when they get larger.

75
00:04:08,880 --> 00:04:13,470
Square brackets and round parentheses are really treated the same by racket.

76
00:04:13,470 --> 00:04:17,459
Square brackets balance each other and round parentheses balance each other.

77
00:04:17,459 --> 00:04:20,890
You could use round parentheses here, but square brackets just

78
00:04:20,890 --> 00:04:23,360
makes it look a little bit better.

79
00:04:23,360 --> 00:04:25,280
Now what's the question for the first case?

80
00:04:25,280 --> 00:04:28,770
Well the question for the first case is actually right here.

81
00:04:28,770 --> 00:04:33,960
I'll take that, and I'll replace that question with it.

82
00:04:33,960 --> 00:04:36,480
And if that question is true, then what's the answer?

83
00:04:36,480 --> 00:04:38,700
Well the answer is right here.

84
00:04:38,700 --> 00:04:45,117


85
00:04:45,117 --> 00:04:46,950
And what's the question for the second case?

86
00:04:46,950 --> 00:04:49,116
Well the question for the second case is right here.

87
00:04:49,116 --> 00:04:53,690


88
00:04:53,690 --> 00:04:57,910
And the answer for the second case is right there.

89
00:04:57,910 --> 00:05:02,730


90
00:05:02,730 --> 00:05:04,730
And then what's the question for the third case?

91
00:05:04,730 --> 00:05:06,380
Well, the third case is the last case.

92
00:05:06,380 --> 00:05:08,980
It's the in all other cases case.

93
00:05:08,980 --> 00:05:12,510
And so there's a special question that we could put there called else.

94
00:05:12,510 --> 00:05:16,390
Which means if it wasn't the first one or the second one, just do this.

95
00:05:16,390 --> 00:05:20,330
And the answer for the last case is wide.

96
00:05:20,330 --> 00:05:24,755


97
00:05:24,755 --> 00:05:27,380
Let me first run this to make sure I haven't made any mistakes.

98
00:05:27,380 --> 00:05:30,980


99
00:05:30,980 --> 00:05:33,290
I haven't and it's working.

100
00:05:33,290 --> 00:05:37,590
And so the way I want read this is it says, gee, there's multiple conditions.

101
00:05:37,590 --> 00:05:40,500
If image-height is greater than image-width.

102
00:05:40,500 --> 00:05:46,120
then produce this result. Evaluate this expression and produce that result.

103
00:05:46,120 --> 00:05:49,105
If image-height is equal to image-width, evaluate this expression

104
00:05:49,105 --> 00:05:54,515
and produce that result. Otherwise or else, evaluate that expression

105
00:05:54,515 --> 00:05:56,830
and produce that result.

106
00:05:56,830 --> 00:05:57,830
And that's kind of nice.

107
00:05:57,830 --> 00:06:01,700
What that gets me is multiple questions.

108
00:06:01,700 --> 00:06:03,980
Kind of all at the same level of nesting.

109
00:06:03,980 --> 00:06:08,400
All at the same level of important in some sense.

110
00:06:08,400 --> 00:06:14,960
So cond is a good thing to use for multiple case expressions

111
00:06:14,960 --> 00:06:16,930
when there's more than two cases.

112
00:06:16,930 --> 00:06:17,770
You can use if.

113
00:06:17,770 --> 00:06:20,840
You can use if and nest them the way we have up here.

114
00:06:20,840 --> 00:06:23,860
But, it tends to read more easily if you use cond

115
00:06:23,860 --> 00:06:26,480
when there's more than two cases.

116
00:06:26,480 --> 00:06:28,590
Now we'll do the usual thing and look at the rules

117
00:06:28,590 --> 00:06:31,670
for forming a cond expression.

118
00:06:31,670 --> 00:06:34,270
It's just open paren cond.

119
00:06:34,270 --> 00:06:37,090
And then one more question and answer pairs.

120
00:06:37,090 --> 00:06:40,835
Where each question answer pair is open bracket,

121
00:06:40,835 --> 00:06:46,980
a question expression, and then an answer expression, and a close bracket.

122
00:06:46,980 --> 00:06:50,280
And all the question expressions have to produce a Boolean,

123
00:06:50,280 --> 00:06:52,540
except the last question expression, which

124
00:06:52,540 --> 00:06:55,520
is allowed to be the special word else.

125
00:06:55,520 --> 00:06:58,730
Which is going to mean if you get to this question answer pair,

126
00:06:58,730 --> 00:07:01,320
definitely produce this answer.


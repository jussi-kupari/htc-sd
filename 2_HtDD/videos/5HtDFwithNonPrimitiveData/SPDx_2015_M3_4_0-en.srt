0
00:00:00,000 --> 00:00:04,750


1
00:00:04,750 --> 00:00:06,590
GREGOR KICZALES: Last time I showed you how

2
00:00:06,590 --> 00:00:12,690
to use the how to design data recipe to design a simple data definition.

3
00:00:12,690 --> 00:00:15,330
In this video what I'm going to do is show you

4
00:00:15,330 --> 00:00:18,050
how to use the how to design functions recipe

5
00:00:18,050 --> 00:00:24,380
to design a function that consumes data defined by your own data definition.

6
00:00:24,380 --> 00:00:28,400
So this will be a function that consumes what's called non-primitive data.

7
00:00:28,400 --> 00:00:33,960
In this case, it'll be a function that consumes the type CityName.

8
00:00:33,960 --> 00:00:36,710
In this problem we're asked to design a function

9
00:00:36,710 --> 00:00:39,590
based on having a data definition.

10
00:00:39,590 --> 00:00:43,060
So the problem says use the CityName data definition below

11
00:00:43,060 --> 00:00:45,640
to design a function that produces true if the given

12
00:00:45,640 --> 00:00:47,800
city is the best in the world.

13
00:00:47,800 --> 00:00:52,470
We're allowed to decide whatever best city we want.

14
00:00:52,470 --> 00:00:54,540
So what's going on here is that we know that city

15
00:00:54,540 --> 00:00:57,320
name itself that's consumed by the function

16
00:00:57,320 --> 00:01:01,030
is going to be represented as a CityName.

17
00:01:01,030 --> 00:01:03,930
CityName type here.

18
00:01:03,930 --> 00:01:06,560
So that lets us get started right away our signature.

19
00:01:06,560 --> 00:01:11,140
This function is going to consume a CityName.

20
00:01:11,140 --> 00:01:13,830
And let's see, we're producing true.

21
00:01:13,830 --> 00:01:17,390
So it's a yes/no question we're representing it with a Boolean.

22
00:01:17,390 --> 00:01:22,504
So that's going to produce a Boolean.

23
00:01:22,504 --> 00:01:23,920
Now, what we do we got to do here?

24
00:01:23,920 --> 00:01:27,410
Well, we produce true if the given city is the best in the world.

25
00:01:27,410 --> 00:01:30,850
We could start with this is as a purpose.

26
00:01:30,850 --> 00:01:33,040
Produce, I'll just copy it.

27
00:01:33,040 --> 00:01:35,910


28
00:01:35,910 --> 00:01:39,940
Let's see, the next step of the recipe is the stub.

29
00:01:39,940 --> 00:01:41,850
We'll call this function best question mark.

30
00:01:41,850 --> 00:01:44,600
Remember there's a convention that the name of predicate functions

31
00:01:44,600 --> 00:01:47,910
to produce a Boolean value should end in a question mark.

32
00:01:47,910 --> 00:01:51,980
So we'll say best of some cn, for the stub I'll say false.

33
00:01:51,980 --> 00:01:54,970
And I'll just label this as the stub.

34
00:01:54,970 --> 00:01:57,600
And now we can get on to the check expects.

35
00:01:57,600 --> 00:02:00,700
And when we design a function using a data definition,

36
00:02:00,700 --> 00:02:04,380
this is a good time to go back to the how to design data definitions web

37
00:02:04,380 --> 00:02:10,430
page, remember I get to that web page by first going to the design recipes page

38
00:02:10,430 --> 00:02:16,560
and then going to how to design data, and then

39
00:02:16,560 --> 00:02:18,680
this is an atomic data definition.

40
00:02:18,680 --> 00:02:21,740
A simple atomic data definition, so I'll go there.

41
00:02:21,740 --> 00:02:25,160
And in this web page each kind of data definition

42
00:02:25,160 --> 00:02:30,100
has a section called guidance on examples and tests.

43
00:02:30,100 --> 00:02:32,210
And this gives us some hints about making

44
00:02:32,210 --> 00:02:36,630
check expects for this particular kind of data definition.

45
00:02:36,630 --> 00:02:39,500
So whenever you design a function using data definition,

46
00:02:39,500 --> 00:02:42,440
go to this part of how to design data definition web page,

47
00:02:42,440 --> 00:02:44,220
and get some of this guidance.

48
00:02:44,220 --> 00:02:47,740
For our purposes now I'll tell you what it says as we keep working.

49
00:02:47,740 --> 00:02:50,600
It basically says that one or two examples are enough.

50
00:02:50,600 --> 00:02:53,584
And that also is true of a function that produces a Boolean value.

51
00:02:53,584 --> 00:02:55,750
If you have a function that produces a Boolean value

52
00:02:55,750 --> 00:02:57,624
you should always have at least two examples.

53
00:02:57,624 --> 00:03:01,050
The one that produces true, and the one that produces false.

54
00:03:01,050 --> 00:03:06,210
So let's see, if I say check expect, best question mark,

55
00:03:06,210 --> 00:03:10,370
and now I need to give some city name like let's say Boston.

56
00:03:10,370 --> 00:03:13,609
And is that the best city in the world?

57
00:03:13,609 --> 00:03:15,400
Well remember, the problem description said

58
00:03:15,400 --> 00:03:18,442
we were free to choose any best city we want.

59
00:03:18,442 --> 00:03:20,650
So I loved Boston where I lived there, but let me say

60
00:03:20,650 --> 00:03:24,040
that it's not the best in the world.

61
00:03:24,040 --> 00:03:28,010
Let's use an imaginary city for the best in the world.

62
00:03:28,010 --> 00:03:30,610
So no one can possibly be upset.

63
00:03:30,610 --> 00:03:34,090
We'll use Hogsmeade as our best in the world.

64
00:03:34,090 --> 00:03:37,860
Now that is the best city in the world.

65
00:03:37,860 --> 00:03:43,700
And probably this is a good time to make the purpose more specific.

66
00:03:43,700 --> 00:03:48,680
So we'll say produce true if the given city is Hogsmeade.

67
00:03:48,680 --> 00:03:52,990


68
00:03:52,990 --> 00:03:58,680
So now I've got two tests and the stub I should run.

69
00:03:58,680 --> 00:04:02,050
And I get that one of the two tests fail,

70
00:04:02,050 --> 00:04:04,350
but both tests actually managed to run.

71
00:04:04,350 --> 00:04:07,095
So that tells me that my tests are well formed.

72
00:04:07,095 --> 00:04:08,110
Both tests ran.

73
00:04:08,110 --> 00:04:10,650


74
00:04:10,650 --> 00:04:12,110
So now we can keep going.

75
00:04:12,110 --> 00:04:15,690
Let me start by making the screen bigger again.

76
00:04:15,690 --> 00:04:20,339
So let's see, signature, purpose, stub, check-expects, now the template.

77
00:04:20,339 --> 00:04:24,290
Well, the way we get the template now is we're going to put a note here

78
00:04:24,290 --> 00:04:33,850
that says took template from CityName.

79
00:04:33,850 --> 00:04:36,950
Because this function consumes a CityName CityName

80
00:04:36,950 --> 00:04:39,412
is a data definition that we designed.

81
00:04:39,412 --> 00:04:41,370
So we're going to take the template right here.

82
00:04:41,370 --> 00:04:42,800
What I'm going to do is copy it.

83
00:04:42,800 --> 00:04:45,880


84
00:04:45,880 --> 00:04:48,920
I'll have this note about where I got it.

85
00:04:48,920 --> 00:04:52,100
And the first thing I'm going to do is remember to rename it.

86
00:04:52,100 --> 00:04:54,560
I'll rename it to best?

87
00:04:54,560 --> 00:04:57,462
And now here's the template.

88
00:04:57,462 --> 00:04:58,670
Now let's see what I do next.

89
00:04:58,670 --> 00:05:00,320
This is a function that has two cases.

90
00:05:00,320 --> 00:05:03,539
A false case and a true case.

91
00:05:03,539 --> 00:05:06,580
So a good first thing to do when you've got a function that has two cases

92
00:05:06,580 --> 00:05:09,190
is to add an if to the template.

93
00:05:09,190 --> 00:05:12,485
So what I'm going to do is I'm going to copy the existing template.

94
00:05:12,485 --> 00:05:15,990


95
00:05:15,990 --> 00:05:21,830
I'll put an if in here and for both the question and the true and false answer

96
00:05:21,830 --> 00:05:24,080
I'll put the copy of the template.

97
00:05:24,080 --> 00:05:27,790
This is a way of telling me listen there's an if, in order

98
00:05:27,790 --> 00:05:34,890
to fill out all these parts, dot dot dot cn is what you have to work with.

99
00:05:34,890 --> 00:05:38,050
Let's see cn is the city name.

100
00:05:38,050 --> 00:05:44,860
So let's see, in one case the CityName is Hogsmeade.

101
00:05:44,860 --> 00:05:50,080


102
00:05:50,080 --> 00:05:54,370
Let's see if the CityName is Hogsmeade, than this example right here

103
00:05:54,370 --> 00:05:55,690
tells me I should produce true.

104
00:05:55,690 --> 00:05:58,750


105
00:05:58,750 --> 00:06:00,830
So that's true.

106
00:06:00,830 --> 00:06:04,890
And if the CityName is not Hogsmeade, then this example and the purpose

107
00:06:04,890 --> 00:06:08,200
tell me I should produce false.

108
00:06:08,200 --> 00:06:12,060
So that's going to be false.

109
00:06:12,060 --> 00:06:15,360
Let me run it.

110
00:06:15,360 --> 00:06:21,280
Oh, I forgot when I was up here to comment out this stub.

111
00:06:21,280 --> 00:06:22,340
There we go.

112
00:06:22,340 --> 00:06:24,710
Both tests passed.

113
00:06:24,710 --> 00:06:27,430
Now, let me make a couple points here.

114
00:06:27,430 --> 00:06:30,800
One is, did you notice that there was a point in the template where

115
00:06:30,800 --> 00:06:34,710
this was dot dot dot cn?

116
00:06:34,710 --> 00:06:38,810
And then I deleted that and replaced it with true.

117
00:06:38,810 --> 00:06:41,330
This is an important thing about templates.

118
00:06:41,330 --> 00:06:44,290
Templates tell you everything you have available to work with.

119
00:06:44,290 --> 00:06:47,400
They don't tell you have to use all of it.

120
00:06:47,400 --> 00:06:50,477
So oftentimes you'll be deleting things out of templates.

121
00:06:50,477 --> 00:06:53,310
Another point to make about this function is let's think about this.

122
00:06:53,310 --> 00:07:00,650
This says if string equals cn Hogsmeade is true, produce true.

123
00:07:00,650 --> 00:07:06,430
Otherwise, if string equals cn then Hogsmeade is false, produce false.

124
00:07:06,430 --> 00:07:09,060
When you follow very structured approach to designing code,

125
00:07:09,060 --> 00:07:11,349
sometimes you produce code that's a little bit more

126
00:07:11,349 --> 00:07:12,640
cumbersome than it needs to be.

127
00:07:12,640 --> 00:07:18,355
This function could instead just me this.

128
00:07:18,355 --> 00:07:23,550


129
00:07:23,550 --> 00:07:27,950
Let me comment out this version of it and run it again.

130
00:07:27,950 --> 00:07:30,520
Now that's working too.

131
00:07:30,520 --> 00:07:34,230
But don't worry if you produce this version of function.

132
00:07:34,230 --> 00:07:37,170
This is clear and it's well tested.

133
00:07:37,170 --> 00:07:43,170
It's just that if you ever find yourself writing if XXX true false,

134
00:07:43,170 --> 00:07:46,100
that's always the same as just XXX.

135
00:07:46,100 --> 00:07:48,044



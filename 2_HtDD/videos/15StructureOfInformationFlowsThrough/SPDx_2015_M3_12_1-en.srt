0
00:00:00,000 --> 00:00:04,770


1
00:00:04,770 --> 00:00:08,070
GREGOR KICZALES: At the beginning of the week I showed you this picture.

2
00:00:08,070 --> 00:00:12,270
And I talked about how the structure of this part of the course

3
00:00:12,270 --> 00:00:17,240
was really going to be defined by the cross product of recipes like how

4
00:00:17,240 --> 00:00:22,090
to design functions and how to design world programs with data

5
00:00:22,090 --> 00:00:24,270
definitions with different structure.

6
00:00:24,270 --> 00:00:28,260
During the week we saw the design simple atomic data definitions,

7
00:00:28,260 --> 00:00:33,220
interval data definitions, enumerations, and itemization's.

8
00:00:33,220 --> 00:00:37,780
And then we designed one function using each of those data definitions.

9
00:00:37,780 --> 00:00:41,150
We basically completed the red box in this week.

10
00:00:41,150 --> 00:00:43,960
Next week we'll do the green box.

11
00:00:43,960 --> 00:00:48,710
That point that you can think about the organization of the first part

12
00:00:48,710 --> 00:00:53,490
of the course in terms of a cross product between the form of the data

13
00:00:53,490 --> 00:00:57,940
and how to design functions recipe, that points important.

14
00:00:57,940 --> 00:01:01,900
But there's a much more important point that underlies that.

15
00:01:01,900 --> 00:01:05,010
Think about the examples we've seen this week.

16
00:01:05,010 --> 00:01:08,290
Think about the CityName example and the best? function.

17
00:01:08,290 --> 00:01:12,640
The inherent structure of the domain information in that case was atomic.

18
00:01:12,640 --> 00:01:15,740
So we represented it using simple atomic data.

19
00:01:15,740 --> 00:01:19,735
And that meant the template had a certain form . . . x.

20
00:01:19,735 --> 00:01:21,610
And that told us something about the function

21
00:01:21,610 --> 00:01:24,790
and something about the test as well.

22
00:01:24,790 --> 00:01:27,540
And that happened with all of the data definitions.

23
00:01:27,540 --> 00:01:30,190
With SeatNum, the inherent structure of the information

24
00:01:30,190 --> 00:01:32,900
is a continuous range of numbers.

25
00:01:32,900 --> 00:01:35,390
So in that case we use an interval.

26
00:01:35,390 --> 00:01:37,309
That formed the template a certain way.

27
00:01:37,309 --> 00:01:39,350
It formed the body of the function a certain way.

28
00:01:39,350 --> 00:01:41,350
And it told us something about the test.

29
00:01:41,350 --> 00:01:43,450
In that case that there should be three of them.

30
00:01:43,450 --> 00:01:49,020
Every example we saw this week there was the same phenomenon.

31
00:01:49,020 --> 00:01:51,950
Which is that once we identify the structure of the information,

32
00:01:51,950 --> 00:01:55,730
the inherent structure of the information, that gives us

33
00:01:55,730 --> 00:01:58,420
the structure of the data used to represent it,

34
00:01:58,420 --> 00:02:01,560
which gives us the structure of the template, which gives us

35
00:02:01,560 --> 00:02:05,360
the structure of the function, and also we get guidance

36
00:02:05,360 --> 00:02:08,380
about the test for that function.

37
00:02:08,380 --> 00:02:10,610
So identifying the structure of the information

38
00:02:10,610 --> 00:02:14,310
is really a key step in the program design.

39
00:02:14,310 --> 00:02:17,030
At least for many kinds of programs, the ones

40
00:02:17,030 --> 00:02:20,510
we're going to look at for the first two parts of this course.

41
00:02:20,510 --> 00:02:23,820
As data definitions get more sophisticated, what you're going to see

42
00:02:23,820 --> 00:02:27,790
is that there are different choices you can make about the data

43
00:02:27,790 --> 00:02:29,700
that you'll use to represent information.

44
00:02:29,700 --> 00:02:32,220
And by making different choices, you actually

45
00:02:32,220 --> 00:02:35,520
have a lot of influence on the rest of the program.

46
00:02:35,520 --> 00:02:38,102
Because of this fact that the structure of the data

47
00:02:38,102 --> 00:02:39,810
determines the structure of the template,

48
00:02:39,810 --> 00:02:43,450
determines the structure of the functions.

49
00:02:43,450 --> 00:02:48,300
So designing data is a very high point of leverage for designing programs.

50
00:02:48,300 --> 00:02:51,480
There are some programs for which that's less true.

51
00:02:51,480 --> 00:02:54,080
But for a very many programs this approach

52
00:02:54,080 --> 00:02:58,000
that we're taking in the first two parts of this course, this data driven

53
00:02:58,000 --> 00:03:01,180
approach, does a very good job of producing the structure

54
00:03:01,180 --> 00:03:04,210
of large parts of the program.

55
00:03:04,210 --> 00:03:07,070
What we'll see later in the course is some examples where

56
00:03:07,070 --> 00:03:11,000
the control structure becomes dominant.

57
00:03:11,000 --> 00:03:13,010
And what we'll learn in that part of the course

58
00:03:13,010 --> 00:03:16,430
is how to blend templates based with control structure

59
00:03:16,430 --> 00:03:19,170
together with templates based on type comments,

60
00:03:19,170 --> 00:03:22,440
or templates based on a form of data, to produce

61
00:03:22,440 --> 00:03:24,490
the dominant structure of our program.

62
00:03:24,490 --> 00:03:27,780
But even in those programs the form of the information

63
00:03:27,780 --> 00:03:29,770
determines the form of the data.

64
00:03:29,770 --> 00:03:33,790
And the form of the data determines the form of many of the functions

65
00:03:33,790 --> 00:03:35,690
that operate on data.

66
00:03:35,690 --> 00:03:38,460
So identifying the form of the information

67
00:03:38,460 --> 00:03:42,130
remains a key step in the design of programs.

68
00:03:42,130 --> 00:03:45,341
That's going to be true throughout the course and throughout all programs

69
00:03:45,341 --> 00:03:45,840
you write.

70
00:03:45,840 --> 00:03:48,311


71
00:03:48,311 --> 00:03:50,060
So have fun with the homework assignments,

72
00:03:50,060 --> 00:03:52,300
and I'll see you next week.

73
00:03:52,300 --> 00:03:59,676




GREGOR KICZALES: As you know, this week is about designing data.
And as part of that, we're going to introduce a new kind of design
element called a data definition.
What I'm going to do in this video though is just talk about the problem
that data definitions solve.
And the way I'm going to do it is first show you
how to design functions recipe solution, a complete function design,
look at a problem we have in understanding that,
and then show you a complete data definition
and talk about how it solves the problem.
Then in the next video, we'll look at designing data definitions
from scratch.
So now, suppose you're working on a program
that somebody else wrote, and the program has
to do with simulating traffic.
So it's reasonable to expect in a program like that
that there's going to be code that has to do with traffic lights, and cars,
and trucks, and things like that.
Now, you're reading that program, and you come to this function definition.
And you ask yourself, what does it do?
Well, you know, the name is kind of a hint.
It seems to produce the next color.
So maybe if you give it a color, it gives you another color.
But it's just not really very clear from this.
Now, at this point in the course you might say, well, look.
The problem is that this person didn't follow the how to design functions
recipe.
Let's imagine that they did follow the how to design functions recipe.
So here's this same function with the how to design functions recipe.
There's the original function definition.
And now we see that the function consumes a natural
and produces a natural.
And it produces the next color of a traffic light.
But here's a question.
The signature says the function consumes natural.
So can I call it with three?
Three's a natural number.
But I don't see any examples other than zero, one, or two.
And what do these examples mean anyways?
I mean, the examples match the function.
So they kind of tell me the function's probably right.
But when I call a next color with zero, and it gives
me back a two, what does that mean?
Well, in order to understand this problem,
we have to understand something very important about data in programs.
In any program, we have what we call the problem domain.
In this case, the problem domain has to do
with traffic and simulation of traffic, and traffic lights, and cars,
and roads, and things like that.
And in the problem domain, we have information in the problem domain.
In this case, we might have a piece of information,
like a certain light is red.
But inside the program, we don't have red lights.
We don't have green lights.
We don't have lights at all inside the program.
What we have inside the program is data.
In this case, the natural number zero.
And what's going on when we design a program like this
is that we're playing a game where we represent information in the problem
domain using data in the program.
In this case, we represent the fact that some light might be red
using the natural number zero.
And the inverse of that relationship is that we
can interpret the natural number zero.
If we're told that this natural number is supposed
to represent some information about a light,
we can interpret it as meaning that the light is red.
And now, if I tell you this-- if I tell you, hey,
to represent a red light you use zero, and if zero is representing a light,
it means it's red-- then you can start to understand this program a bit more.
You can look at it, and you can say, well, if zero is a red,
then I guess maybe one is yellow.
But instead of giving you this information
in a piecemeal way, what we're going to do is going to use something
called a data definition.
And a data definition is really going to tell us
everything we need to know about how we represent information as data.
So now, let's look at a new version of this program, the third version of it,
that uses a data definition.
In this third version of the traffic program,
we've divided the file into two parts.
The first part is called data definitions.
And the second part is called functions.
And in the data definitions part we have one data definition.
I want to read this quickly now.
And in future videos this week we'll talk about it in more detail.
But the data definition starts out with a type comment
that says there's a new type, TL color.
And the way you form something of TL color
is that it's either zero, one, or two.
We'll have more elaborate type comments in the next video.
And it says that if you have a piece of this data you interpret it as follows.
Something that's a TL color is the color of a traffic light, and zero means red,
one means yellow, and two means green.
And this last part is a template for operating on TL color.
And for now, just read it as saying, if you're
designing a function that operates on TL color, then there's really three cases.
There's one case where the color is zero.
There's one case where the color is one.
And there's one case where the color is two.
And now you know all about TL color.
Now, if we scroll down a little bit into the functions part, here is a function.
And the signature now says, hey, this function consumes a TL color,
and it produces a TL color.
And notice we've already answered one of our questions from before.
This function can't consume a four or a three
because it can only consume a TL color.
And the only thing a TL color can be-- I can
see by looking up here at the type comment,
a TL color can only be a zero, a one, or a two.
And this function can only produce a TL color, a zero, a one, or a two.
And now it's producing the next color of a traffic light.
And now this function gets to be easier to understand.
If I say next color of a zero, which means red,
then that produces a two, which means green.
And that's right.
After a light is red, it's green.
The next color of a one, which means yellow, is a zero, which means red.
And a light also goes from green to yellow.
And now, the template.
Well, what's the template for this function?
Well, the template came from TL color, because this function
consumes a TL color.
And what we're going to see for the next several weeks is
that the template for a function is determined by the type of data
it consumes.
And this just says, well, if you consume a zero, in other words, a red light,
it produces a green light.
If you consume a one, in other words, a yellow light, produce a red light.
And a green light goes to a yellow light.
Now, there's a couple of important things going on here.
One is that this data definition tells me how to represent information as data
and how to interpret data as information.
This data definition has made this program much more meaningful.
And this data definition has also greatly simplified
the design of this function.
Because the signature now says TL color to TL color,
I know all sorts of things this function can't consume.
It can't consume the number three.
And I also know how to read this function
and understand what it's doing.

So that's what data definitions are going to do for us.
They're going to help us really understand
the relationship between information in data,
and how data represents information, and how
data can be interpreted as information.
But I didn't talk about how to design data definitions.
And I didn't talk about how to design a function that consumes
data defined by a data definition.
I just showed you examples of the completed product.
So now, what we're going to do starting next time
is look at how to design data definitions.
